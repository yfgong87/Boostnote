type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Clone Graph"
content: '''
  # Clone Graph
  ```java
  /**
   * Definition for undirected graph.
   * class UndirectedGraphNode {
   *     int label;
   *     ArrayList<UndirectedGraphNode> neighbors;
   *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
   * };
   */
  
  public class Solution {
      /*
       * @param node: A undirected graph node
       * @return: A undirected graph node
       */
      public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
          // write your code here
          if(node == null){
              return node;
          }
          //map里存的是<original, copy>
          Map<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
          //set用于检验是否已经process了当前node，因为graph里可能有loop，需要去重复
          Set<UndirectedGraphNode> set = new HashSet<UndirectedGraphNode>();
          
          Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
          queue.offer(node);
          UndirectedGraphNode newNode;
          while(!queue.isEmpty()){
              UndirectedGraphNode head = queue.poll();
              
              //如果已经process过这个点了，continue
              if(set.contains(head)){
                  continue;
              }
              set.add(head);
              
              //如果map里还没有这个点，加进去
              if(!map.containsKey(head)){
                  newNode = new UndirectedGraphNode(head.label);
                  map.put(head, newNode);
              }
              newNode = map.get(head);
              
              //将这个点的所有neighbor放进queue
              UndirectedGraphNode newNeighbor;
              for(UndirectedGraphNode n : head.neighbors){
                  queue.offer(n);
                  //如果map里还没有这个neighbor点，加进去
                  if(!map.containsKey(n)){
                      newNeighbor = new UndirectedGraphNode(n.label);
                      map.put(n, newNeighbor);
                  }
                  newNeighbor = map.get(n);
                  newNode.neighbors.add(newNeighbor);
              }
          }
          return map.get(node);
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-06T14:57:54.354Z"
updatedAt: "2017-09-16T19:52:19.335Z"
