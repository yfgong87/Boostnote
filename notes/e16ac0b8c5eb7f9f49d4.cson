type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Sum of Square Number"
content: '''
  # Sum of Square Number
  ### 最优解 (14ms)
  - Two Pointer解法，复杂度为`O(sqrt(c)) + O(log(c)`
  - Two Point 本身`O(sqrt(c))`，`Math.sqrt(c)`最坏复杂度为`O(log(c))`，由于 `sqrt(c)` >> `log(c)`，最终复杂度为`O(sqrt(c))`
  ```java
  class Solution {
      public boolean judgeSquareSum(int c) {
          if(c < 0){
              return false;
          }
          int left = 0;
          int right = (int) Math.sqrt(c); //出来是double
          while(left <= right){ //相等的时候必须再进入循环，因为 a 可以等于 b
              int dif = left * left + right * right - c;
              if(dif > 0){
                  right--;
              } else if (dif < 0){
                  left++;
              } else {
                  return true;
              }
          }
          return false;
      }
  }
  ```
  ### 中间解I (18ms)
  - 使用自带的`Math.sqrt()`代替二分
  `O(sqrt(c) * log(c))`，外面for循环一共`sqrt(c)`，里面`Math.sqrt()`每次`log(c)`
  ```java
  class Solution {
      public boolean judgeSquareSum(int c) {
          for(long a = 0; a * a <= c; a++){
              double b = Math.sqrt(c - a * a);
              if(b == (int) b){
                  return true;
              }
          }
          return false;
      }
  }
  ```
  ### 中间解II (96ms)
  - Binary Search，`O(sqrt(c) * log(c))`，外面for循环一共`sqrt(c)`，里面二分每次`log(c)`
  ```java
  class Solution {
      public boolean judgeSquareSum(int c) {
          for(long a = 0; a * a <= c; a++){ //注意等号要有
              if(isPerfectSquare(c - (int) (a * a))){
                  return true;
              }
          }
          return false;
      }
      
      public boolean isPerfectSquare(int b){
          long start = 0; //注意使用long型，不然如果 b 太大
          long end = b;   //start/end/mid 如果是 int 则无法在不越界的前提下平方得到 b
          while(start + 1 < end){
              long mid = start + (end - start) / 2;
              if(mid * mid < b){
                  start = mid;
              } else {
                  end = mid;
              }
          }
          if (start * start == b || end * end == b){
              return true;
          }
          return false;
      }
  }
  ```
  ### 最慢解 (TLE)
  - Brute Force, `O(sqrt(c) * sqrt(c))` = `O(c)`
  ```java
  class Solution {
      public boolean judgeSquareSum(int c) {
          for(long a = 0; a * a <= c; a++){
              for(long b = 0; b * b <= c; b++){
                  if(a * a + b * b == c){
                      return true;
                  }
              }
          }
          return false;
      }
  }
  ```
  ### sqrt(N) will increase a lot more than log2(N)
  ![sqrtVSlog](https://i.stack.imgur.com/0oZZQ.png)
  
'''
tags: [
  "Two_Pointer"
]
isStarred: false
isTrashed: false
createdAt: "2017-11-02T20:55:59.403Z"
updatedAt: "2018-01-04T17:41:32.712Z"
