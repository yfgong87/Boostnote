type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "String Homomorphism / Isomorphic String"
content: '''
  # String Homomorphism / Isomorphic String
  Given s = `"egg"`, t = `"add"`, return `true`.
  Given s = `"foo"`, t = `"bar"`, return `false`.
  Given s = `"paper"`, t = `"title"`, return `true`.
  (You may assume both `s` and `t` have the same length)
  
  Solution:
  We can build a 1 to 1 mapping between `s` and `t` at the same index. We can use an array as a HashMap, the integer value of each `char` in `s` will be the index / key of the hashmap. At each index, the Map will store the `char` at the same index in `t`. This way we check if each of the `char` in `s` is uniquely related to `char` in `t`. Then we need to do the same process vice versa, that is to check if each of the `char` in `t` is also uniquely related to `char` in `s`.
  
  Time Complexity: `O(n + m)`, Space: `O(256)`
  ```java
  public boolean isIsomorphic(String s, String t) {
  		//    s		  t
  		//	"bar"	"foo"
  		// scan s:  abfor	 pass 
  		//	 		of00o
  		// scan t:  abfor	 not pass 
  		//	 		00ba0 
  
          int[] map = new int[256];
          char[] sc = s.toCharArray();
          char[] tc = t.toCharArray();
          for(int i = 0; i < s.length(); i++){
              if(map[sc[i]] == 0){
                  map[sc[i]] = tc[i];
              } else {
                  if(map[sc[i]] != tc[i]){
                      return false;
                  }
              }
          }
          //必须正反各扫一遍，不然 bar -> foo 能过，foo -> bar 过不了
          int[] map2 = new int[256]; // 一定要记得清空 map
          for(int i = 0; i < t.length(); i++){
              if(map2[tc[i]] == 0){
                  map2[tc[i]] = sc[i];
              } else {
                  if(map2[tc[i]] != sc[i]){
                      return false;
                  }
              }
          }
          
          return true;
      }
  ```
'''
tags: [
  "Linkedin"
  "HashMap"
  "String"
]
isStarred: false
isTrashed: false
createdAt: "2017-10-02T18:45:39.080Z"
updatedAt: "2018-01-23T03:13:09.066Z"
