type: "MARKDOWN_NOTE"
folder: "0ef4dc321cdc22cb8b00"
title: "链表的递归"
content: '''
  # 链表的递归
  ### Insert a value in a sorted linked list.
  
  Examples
  
  L = null, insert 1, return 1 -> null
  L = 1 -> 3 -> 5 -> null, insert 2, return 1 -> 2 -> 3 -> 5 -> null
  L = 1 -> 3 -> 5 -> null, insert 3, return 1 -> 3 -> 3 -> 5 -> null
  L = 2 -> 3 -> null, insert 1, return 1 -> 2 -> 3 -> null
  
  ```java
  public class Solution {
  	public ListNode insert(ListNode head, int value) {
  		//最后一层返回插入后的新节点
      	if(head == null || head.val > value){
  			ListNode newNode = new ListNode(value);
  			newNode.next = head;
  			return newNode;
  		}
  		//每一层都指向下一层返回的自己
  		head.next = insert(head.next, value);
  		//每一层都返回自己给前一个节点
  		return head;
  	}
  }
  ```
  ### Reverse a singly-linked list.
  
  Examples
  
  L = null, return null
  L = 1 -> null, return 1 -> null
  L = 1 -> 2 -> 3 -> null, return 3 -> 2 -> 1 -> null
  ```java
  public class Solution {
  	public ListNode reverse (ListNode head) {
  		//最后一层返回自己
      	if(head == null || head.next == null){
  			return head;
  		}
  		//每一层都指向下一层返回的head
  		ListNode newNode = reverse(head.next);
  		head.next.next = head;
  		head.next = null;
  		//每层都返回reverse之后的head
  		return newNode;
  	}
  }
  ```
  
  ### Merge two sorted lists into one large sorted list.
  
  Examples
  
  L1 = 1 -> 4 -> 6 -> null, L2 = 2 -> 5 -> null, merge L1 and L2 to 1 -> 2 -> 4 -> 5 -> 6 -> null
  L1 = null, L2 = 1 -> 2 -> null, merge L1 and L2 to 1 -> 2 -> null
  L1 = null, L2 = null, merge L1 and L2 to null
  ```java
  public class Solution {
  	public ListNode merge (ListNode one, ListNode two) {
  		//最后一层返回剩下的节点
  		if(one == null){
  			return two;
  		}
  		if(two == null){
  			return one;
  		}
      	if(one.val < two.val){
  			//merge(one, two) 返回的是 merge后的新 head
  			one.next = merge(one.next, two);
  			//每一层都返回更小的那个节点
  			return one;
  		}
  		if(two.val < one.val){
  			two.next = merge(two.next, one);
  			return two;
  		}
  	}
  }
  ```
  
  ### Reorder the given singly-linked list N1 -> N2 -> N3 -> N4 -> … -> Nn -> null to be N1- > Nn -> N2 -> Nn-1 -> N3 -> Nn-2 -> … -> null
  
  Examples
  
  L = null, is reordered to null
  L = 1 -> null, is reordered to 1 -> null
  L = 1 -> 2 -> 3 -> 4 -> null, is reordered to 1 -> 4 -> 2 -> 3 -> null
  L = 1 -> 2 -> 3 -> null, is reordred to 1 -> 3 -> 2 -> null
  ```java
  
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-12-04T20:50:04.971Z"
updatedAt: "2017-12-05T00:32:49.739Z"
