type: "MARKDOWN_NOTE"
folder: "0ef4dc321cdc22cb8b00"
title: "Rotate Matrix"
content: '''
  # Rotate Matrix
  `O(n^2)` time and `O(1)` space algorithm
  
  - Rotate by +90:
  `Reverse along horizontal midline` -> `Transpose`
  
  - Rotate by -90:
  `Reverse along vertical midline` -> `Transpose`
  
  - Rotate by +180:
  Method 1: `Rotate by +90 twice`
  Method 2: (`Reverse each row` -> `reverse each column`) = (`Transpose`)
  
  - Rotate by -180:
  Method 1: `Rotate by -90 twice`
  Method 2: `Reverse each column` -> `reverse each row`
  Method 3: `Rotate by +180` 
  
  ### Transpose
  ![transpose](https://www.thecrazyprogrammer.com/wp-content/uploads/2015/04/Java-Program-to-Find-Transpose-of-Matrix.jpg)
  
  ```java
  public class Solution {
      /*
       * @param matrix: a lists of integers
       * @return: 
       */
      public void rotate(int[][] matrix) {
          // write your code here
          int n = matrix.length;
          if(n == 0){
              return;
          }
          //上下翻转，注意只需翻转一半的 row
          for(int row = 0; row < n / 2; row++){
              for(int col = 0; col < n; col++){
                  int temp = matrix[row][col];
                  matrix[row][col] = matrix[n - 1 - row][col];
                  matrix[n - 1 - row][col] = temp;
              }
          }
          //Transpose x and y (只交换右上的半个三角矩阵, 右上永远 col > row)
          //不然每个点交换之后又换回来了
          for(int rol = 0; row < n; row ++){
              for(int col = row; col < n; col++){
                  int temp = matrix[row][col];
                  matrix[row][col] = matrix[col][row];
                  matrix[col][row] = temp;
              }
          }
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-09T19:58:20.377Z"
updatedAt: "2017-10-23T03:42:51.082Z"
