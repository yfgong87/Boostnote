type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "strStr"
content: '''
  # strStr
  Follow up，允许一个maxError数: 
  解法一：Brute Force
  解法二：对 target 进行 sort，对每个 sliding window 也进行 sort
  解法二复杂度不如解法一
  
  ### Brute Force
  时间 `O(n * m)`, 空间 `O(1)`
  ```java
  public int strStr(String source, String target) {
          // write your code here
          if(source == null || target == null){
              return -1;
          }
          for(int i = 0; i < source.length() - target.length() + 1; i++){
              int j = 0;
              for(j = 0; j < target.length(); j++){
                  if(source.charAt(i + j) != target.charAt(j)){
                      break;
                  }
              }
              if(j == target.length()){
                  return i;
              }
          }
          return -1;
      }
  ```
  时间 `O(256 * n + m)`， 空间 `O(256)`
  ```java
  class Solution {
      public int strStr(String source, String target) {
          if(source.length() < target.length()){
              return -1;
          }
          int[] mapS = new int[256];
          int[] mapT = new int[256];
          char[] sc = source.toCharArray();
          char[] tc = target.toCharArray();
          for(int i = 0; i < target.length(); i++){
              mapS[sc[i]]++;
              mapT[tc[i]]++;
          }
          if(Arrays.equals(mapS, mapT)){
              if(source.substring(0, target.length()).equals(target)){
                  return 0;
              }
          }
          for(int i = 1; i <= source.length() - target.length(); i++){
              mapS[sc[i - 1]]--;
              mapS[sc[i + target.length() - 1]]++;
              if(Arrays.equals(mapS, mapT)){
                  if(source.substring(i, i + target.length()).equals(target)){
                      return i;
                  }
              }
          }
          return -1;
      }
  }
  ```
  时间 `O(n + m)`, 空间 `O(1)`
  ```java
  public class Solution {
      /**
       * @param source a source string
       * @param target a target string
       * @return an integer as index
       */
      int BASE = 10^6;
      public int strStr2(String source, String target) {
          // Write your code here
          if(target == null){
              return -1;
          }
          if(source != null && target.length() == 0){
              return 0;
          }
          if(source == null || source.length() == 0){
              return -1;
          }
          //hash of target
          int hashTarget = 0;
          int hashcode = 0;
          for(int i = 0; i < target.length(); i++){
              hashTarget = (hashTarget * 31 + target.charAt(i)) % BASE;
              hashcode = (hashcode * 31 + source.charAt(i)) % BASE;
          }
          if(source.substring(0, target.length()).equals(target)){
              return 0;
          }
          //power
          int power = 1;
          for(int i = 0; i < target.length(); i++){
              power = power * 31 % BASE;
          }
          
          // 012345
          // abcdef   source.length() = 6
          //  bcd     target.length() = 3
          //    i 
          //
          for(int i = target.length(); i < source.length(); i++){
              hashcode = (hashcode * 31 + source.charAt(i)) % BASE;
              hashcode = (hashcode - power * source.charAt(i - target.length()) % BASE) % BASE;
              if(hashcode < 0){
                  hashcode += BASE;
              }
              if(hashcode == hashTarget){
                  if(source.substring(i - target.length() + 1, i + 1).equals(target)){
                      return i - target.length() + 1;
                  }
              }
          }
          return -1;
      }
  }
  ```
'''
tags: [
  "PocketGem"
  "HashMap"
]
isStarred: false
isTrashed: false
createdAt: "2017-08-04T14:14:22.315Z"
updatedAt: "2018-01-11T06:08:41.493Z"
