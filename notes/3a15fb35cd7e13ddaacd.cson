createdAt: "2018-01-19T02:04:25.358Z"
updatedAt: "2018-01-22T03:41:43.666Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Evaluate Reverse Polish Notation"
content: '''
  # Evaluate Reverse Polish Notation
    `["2", "1", "+", "3", "*"]` -> `((2 + 1) * 3)` -> `9`
    `["4", "13", "5", "/", "+"]` -> `(4 + (13 / 5))` -> `6`
   
  Solution:
  - Since the operator is always after the numbers, and they actually comes immediately after the number, we can use a stack to store the most recently appeared numbers. As soon as we see an operator, we pop out two numbers and do the calculation. We then push the result back to the stack.
  - For divide and substract, the number that is popped out first is the second number in the operation, we need to pop the next number out then perform the operation. 
   
   Time complexity: `O(n)`, Space complexity: worst caes `O(n)`
   ```java
   class Solution {
      public int evalRPN(String[] tokens) {
          if(tokens == null || tokens.length == 0){
              return 0;
          }
          Stack<Integer> stack = new Stack<>();
          for(String token : tokens){
              if(token.equals("+")){
                  stack.push(stack.pop() + stack.pop());
              } else if(token.equals("*")){
                  stack.push(stack.pop() * stack.pop());
              } else if(token.equals("-")){
                  int a = stack.pop();
                  int b = stack.pop();
                  stack.push(b - a);
              } else if(token.equals("/")){
                  int a = stack.pop();
                  int b = stack.pop();
                  stack.push(b / a);
              } else {
                  stack.push(Integer.valueOf(token));
              }
          }
          return stack.pop();
      }
  }
  ```
'''
tags: [
  "Linkedin"
  "Stack"
]
isStarred: false
isTrashed: false
