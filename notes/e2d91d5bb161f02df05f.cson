createdAt: "2018-02-05T03:10:40.272Z"
updatedAt: "2018-02-18T21:04:05.917Z"
type: "MARKDOWN_NOTE"
folder: "826d661fa478dc56691c"
title: "Build URI"
content: '''
  # Build URI
  
  ```java
  public class NetworkUtils {
  
      final static String GITHUB_BASE_URL =
              "https://api.github.com/search/repositories";
  
      final static String PARAM_QUERY = "q";
  
      /*
       * The sort field. One of stars, forks, or updated.
       * Default: results are sorted by best match if no field is specified.
       */
      final static String PARAM_SORT = "sort";
      final static String sortBy = "stars";
  
      /**
       * Builds the URL used to query Github.
       *
       * @param githubSearchQuery The keyword that will be queried for.
       * @return The URL to use to query the weather server.
       */
      public static URL buildUrl(String githubSearchQuery) {
          // To build the proper Github query URL
  		// Uri 是一个 Android Class
          Uri builtUri = Uri.parse(GITHUB_BASE_URL).buildUpon()
                  .appendQueryParameter(PARAM_QUERY,githubSearchQuery) 	//Uri类可以自动生成各类特殊符号
                  .appendQueryParameter(PARAM_SORT,sortBy)
                  .build();
  		
  		//URL 是一个 Java Class
          URL url = null;
          try{
              url = new URL(builtUri.toString());
          }catch(MalformedURLException e){
              e.printStackTrace();
          }
          return url;
      }
  
      /**
       * This method returns the entire result from the HTTP response.
       *
       * @param url The URL to fetch the HTTP response from.
       * @return The contents of the HTTP response.
       * @throws IOException Related to network and stream reading
       */
      public static String getResponseFromHttpUrl(URL url) throws IOException {
          HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
          try {
              InputStream in = urlConnection.getInputStream();
  			
              Scanner scanner = new Scanner(in);
  			// 让 Scanner 从 beginning of stream 开始读，set delimiter to '\\A'，注意 '\\' 需要写成 '\\\\'
              scanner.useDelimiter("\\\\A");
  
              boolean hasInput = scanner.hasNext();
              if (hasInput) {
                  return scanner.next();
              } else {
                  return null;
              }
          } finally {
              urlConnection.disconnect();
          }
      }
  }
  ```
  `MainActivity.java` 中从 `mSearchBoxEditText` 获取 `userinput`，调用上面的 `NetworkUtils.buildUrl()`生成最终的URI：https://api.github.com/search/repositories?q=userinput&sort=stars
  ```java
  private void makeGithubSearchQuery(){
          //get user input from EditText
          String githubQuery = mSearchBoxEditText.getText().toString();
          //build URI using input
          URL githubSearchUrl = NetworkUtils.buildUrl(githubQuery);
          //display URI
          mUrlDisplayTextView.setText(githubSearchUrl.toString());
  }
  ```
  ### Tips
  Let's say that I want to create the following URL:
  `https://www.myawesomesite.com/turtles/types?type=1&sort=relevance#section-name`
  To build this with the `Uri.Builder` I would do the following.
  ```java
  Uri.Builder builder = new Uri.Builder();
  builder.scheme("https")
      .authority("www.myawesomesite.com")
      .appendPath("turtles")
      .appendPath("types")
      .appendQueryParameter("type", "1")
      .appendQueryParameter("sort", "relevance")
      .fragment("section-name");
  String myUrl = builder.build().toString();
  ```
'''
tags: []
isStarred: false
isTrashed: false
