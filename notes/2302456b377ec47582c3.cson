createdAt: "2018-02-19T03:30:27.133Z"
updatedAt: "2018-03-10T17:58:27.935Z"
type: "MARKDOWN_NOTE"
folder: "826d661fa478dc56691c"
title: "Android Life Cycle"
content: '''
  # Android Life Cycle
  ![Life Cycle](https://developer.android.com/guide/components/images/activity_lifecycle.png)
  ## App lauch
  `onCreate` -> `onStart` -> `onResume`
  
  ### Rotate Screen
  `onPause` -> `onSaveInstanceState()` -> `onStop` -> `onDestroy` -> `onCreate` -> `onStart` -> `onResume`
  
  ### Home button / switch to other apps
  `onPause` -> `onSaveInstanceState()` -> `onStop` -> Disappear from UI -> `onRestart` -> `onStart` -> `onResume`
  
  ### Switch between Activity A and B
  - Activity A's `onPause()` method executes ->
  - Activity B's `onCreate()`, `onStart()`, and `onResume()` methods execute in sequence. (Activity B now has user focus.) ->
  - Then, if Activity A is no longer visible on screen, its `onStop()` method executes.
  
  ### Use `onPause` to store persistent data
  Note: Because `onSaveInstanceState()` is not guaranteed to be called, you should use it only to record the transient state of the activity (the state of the UI)â€”you should never use it to store persistent data. Instead, you should use `onPause()` to store persistent data (such as data that should be saved to a database) when the user leaves the activity.
  
  ```java
  public class MainActivity extends AppCompatActivity {
  
      /**
       * Called when the activity is first created. This is where you should do all of your normal
       * static set up: create views, bind data to lists, etc.
       *
       * Always followed by onStart().
       *
       * @param savedInstanceState The Activity's previously frozen state, if there was one.
       */
      @Override
      protected void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          setContentView(R.layout.activity_main);
      }
  
      /**
       * Called when the activity is becoming visible to the user.
       *
       * Followed by onResume() if the activity comes to the foreground, or onStop() if it becomes
       * hidden.
       */
      @Override
      protected void onStart() {
          super.onStart();
      }
  
      /**
       * Called when the activity will start interacting with the user. At this point your activity
       * is at the top of the activity stack, with user input going to it.
       *
       * Always followed by onPause().
       */
      @Override
      protected void onResume() {
          super.onResume();
      }
  
      /**
       * Called when the system is about to start resuming a previous activity. This is typically
       * used to commit unsaved changes to persistent data, stop animations and other things that may
       * be consuming CPU, etc. Implementations of this method must be very quick because the next
       * activity will not be resumed until this method returns.
       *
       * Followed by either onResume() if the activity returns back to the front, or onStop() if it
       * becomes invisible to the user.
       */
      @Override
      protected void onPause() {
          super.onPause();
      }
  
      /**
       * Called when the activity is no longer visible to the user, because another activity has been
       * resumed and is covering this one. This may happen either because a new activity is being
       * started, an existing one is being brought in front of this one, or this one is being
       * destroyed.
       *
       * Followed by either onRestart() if this activity is coming back to interact with the user, or
       * onDestroy() if this activity is going away.
       */
      @Override
      protected void onStop() {
          super.onStop();
      }
  
      /**
       * Called after your activity has been stopped, prior to it being started again.
       *
       * Always followed by onStart()
       */
      @Override
      protected void onRestart() {
          super.onRestart();
      }
      
      /**
       * The final call you receive before your activity is destroyed. This can happen either because
       * the activity is finishing (someone called finish() on it, or because the system is
       * temporarily destroying this instance of the activity to save space. You can distinguish
       * between these two scenarios with the isFinishing() method.
       */
      @Override
      protected void onDestroy() {
          super.onDestroy();
      }
  
      @Override
      protected void onSaveInstanceState(Bundle outState) {
          super.onSaveInstanceState(outState);
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
