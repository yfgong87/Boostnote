type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Partition to k equal sum subsets"
content: '''
  # Partition to k equal sum subsets
  有重复数
  Input: nums = `[4, 3, 2, 3, 5, 2, 1]`, `k` = `4`
  Output: `true`
  Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
  
  Coner Cases:
  - `nums.length < k` or `k <= 0` : impossible
  - `sum % k != 0`, If sum of array is not divisible by K, then it is not possible to divide the array.
  
  Solution:
  - Starting from the first element, we add its value to sum, if `sum > target`, we backtrack
  - if `sum == target`, means we found a valid subset, now we do `k - 1` and start searching from the beginning of the input array
  - we use a `visited[]` to check whether an element is already used or not
  - `k == 1` means we have the answer, when we find a subset, we do `k - 1`
  - dfs will return a `boolean`, whenever we found a possible partition, we return true, no need to process every possibility
  
  Time Complexity: `O(n!)`, Space: `O(n)`
  ```java
  // 		     [4,3,2,3,5,2,1]	 sum / k = 5
  // visited    1 1 1 1 0 1 1
  //
  //     		[4]	    				[3] 	   [2] ...
  //	  #[4,3]#[4,2]...[4,1]  k=3
  //				    [3]
  //				   [3,2]  k=2
  //				  [3]
  //		     #[3,5][3,2] k=1
  //
  // height of the tree: n;    branch: n - 1, n - 2... 1
  class Solution {
      public boolean canPartitionKSubsets(int[] nums, int k) {
          int sum = 0;
          for(int num : nums){
              sum += num;
          }
          if(k <= 0 || sum % k != 0){
              return false;
          }
          if(nums.length < k){
              return false;
          }
          boolean[] visited = new boolean[nums.length];
          //找到 k 个和为 sum / k 的 subsets
          return canPartition(nums, k, visited, 0, sum / k, 0);
      }
      
      public boolean canPartition (int[] nums,
                                   int k,
                                   boolean[] visited,
                                   int startIndex,
                                   int target,
                                   int sum){
          // If sum % k == 0 and you’ve already found three subsets
  		// Then the sum of the remain elements will also equal to the target
  		// k == 0 is also acceptable
  		if(k == 1){
              return true;
          }
          //如果 nums 里只有正数，则没有继续的必要，因为下一个 sum = sum + nums[i]
          if(sum > target){
              return false;
          }
          //找到了一个满足条件的 subset，还要找剩下的 k - 1 个
          if(sum == target){
              return canPartition(nums, k - 1, visited, 0, target, 0);
          }
          for(int i = startIndex; i < nums.length; i++){
              if(visited[i]){
                  continue;
              }
              visited[i] = true;
              if(canPartition(nums, k, visited, i + 1, target, sum + nums[i])){
  				//when it is true for current state
  				//backtracking for previous state will NOT continue searching
  				//so not necessary to reset visited[i]
                  return true;
              }
              visited[i] = false;
          }
          return false;
      }
  }
  ```
'''
tags: [
  "Backtracking"
  "DFS"
  "Linkedin"
]
isStarred: false
isTrashed: false
createdAt: "2017-11-07T03:18:39.686Z"
updatedAt: "2018-01-20T16:18:53.172Z"
