createdAt: "2018-01-19T05:27:42.905Z"
updatedAt: "2018-01-22T04:09:19.278Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "House Rober"
content: '''
  ### House Rober
  `nums`里是每个house能抢的钱数，两个相邻的house不能都抢，必须选择一个，求`最多`能抢多少钱
  - `f[i]`: 到第 i 个房子时最多能抢的钱
  - `f[i]` = `Math.max(nums[i] + f[i - 2], f[i - 1])` either rob the current house and the house before last house, or rob the last house and skip the current house
  - 初始化：`f[1]` = `Math.max(nums[0], nums[1])`;
  - 返回：return `f[n - 1]`;
  
  Time Complexity: `O(n)`, Space `O(n)`
  ```java
  class Solution {
      public int rob(int[] nums) {
          if(nums == null || nums.length == 0){
              return 0;
          }
          if(nums.length == 1){
              return nums[0];
          }
          int n = nums.length;
          int[] f = new int[n];
          f[0] = nums[0];
          f[1] = Math.max(nums[0], nums[1]);
          for(int i = 2; i < n; i++){
              f[i] = Math.max(nums[i] + f[i - 2], f[i - 1]);
          }
          return f[n - 1];
      }
  }
  ```
  ### House Rober II
  所有房子首尾相连
  分两种情况讨论：
  - 从第一栋开始抢
  - 从第二栋开始抢
  
  ```java
  class Solution {
      public int rob(int[] nums) {
          if(nums == null || nums.length == 0){
              return 0;
          }
          if(nums.length == 1){
              return nums[0];
          }
          int n = nums.length;
  		// f1 代表从第一栋房子开始抢，因此最后返回 f1[n - 1] 因为最后一栋房子与第一栋相邻，肯定不能抢
          int[] f1 = new int[n + 1]; 
          f1[0] = 0;
          f1[1] = nums[0];
          // f2 代表从第二栋房子开始抢，因此最后返回 f2[n] 因为最后一栋房子可以抢
          int[] f2 = new int[n + 1];
          f2[0] = 0;
          f2[1] = 0;
          
          for(int i = 2; i < n + 1; i++){
              f1[i] = Math.max(nums[i - 1] + f1[i - 2], f1[i - 1]);
              f2[i] = Math.max(nums[i - 1] + f2[i - 2], f2[i - 1]);
          }
          
          return Math.max(f1[n - 1], f2[n]);
      }
  }
  ```
'''
tags: [
  "Dynamic_Programming"
  "Linkedin"
]
isStarred: false
isTrashed: false
