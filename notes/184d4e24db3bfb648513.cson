createdAt: "2018-01-13T17:51:23.122Z"
updatedAt: "2018-01-14T01:25:11.044Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Intersection of two arrays"
content: '''
  # Intersection of two arrays
  要求：
  - Result 中每个 element 必须是 Unique 的
  - The result can be in any order.
  
  ### 解法一：HashSet
  用一个`HashSet`记录第一个array，另一个`HashSet`记录 intersection
  Time:`O(n + m)`，Space:`O(n)`
  ```java
  class Solution {
      public int[] intersection(int[] nums1, int[] nums2) {
          Set<Integer> set = new HashSet<>();
          Set<Integer> set1 = new HashSet<>();
          for(int num : nums1){
              set1.add(num);
          }
          for(int num : nums2){
              if(set1.contains(num)){
                  set.add(num);
              }
          }
          int[] results = new int[set.size()];
          int index = 0;
          for(int num : set){
              results[index++] = num;
          }
          return results;
      }
  }
  ```
  ### 解法二：Two Pointer
  对两个数组排序，使用同向双指针，注意去重
  Time:`O(nlogn + mlogm + n + m)` = `O(nlogn + mlogm)`，Space:`O(n)`
  ```java
  class Solution {
      public int[] intersection(int[] nums1, int[] nums2) {
          ArrayList<Integer> list = new ArrayList<>();
          Arrays.sort(nums1);
          Arrays.sort(nums2);
          int i = 0;
          int j = 0;
          while(i < nums1.length && j < nums2.length){
              if(nums1[i] < nums2[j]){
                  i++;
              } else if(nums1[i] > nums2[j]){
                  j++;
              } else {
  				// 去重
                  if(i == 0){
                      list.add(nums1[i]);
                  } else if(i > 0 && nums1[i] != nums1[i - 1]){
                      list.add(nums1[i]);
                  }
                 i++;
                 j++;
              }
          }
          int[] results = new int[list.size()];
          int index = 0;
          for(int num : list){
              results[index++] = num;
          }
          return results;
      }
  }
  ```
  ### 解法三：Binary Search
  对数组二排序，在数组二中找数组一中的每一个数
  Time:`O(mlogm + n * logm)` = `O((n + m) * logm)`，Space:`O(1)`
  ```java
  class Solution {
      public int[] intersection(int[] nums1, int[] nums2) {
          Set<Integer> set = new HashSet<>();
          Arrays.sort(nums2);
          for(int num : nums1){
              if(binarySearch(nums2, num)){
                  set.add(num);
              }
          }
          int[] results = new int[set.size()];
          int index = 0;
          for(int num : set){
              results[index++] = num;
          }
          return results;
      }
      
      public boolean binarySearch(int[] nums, int target){
          if(nums == null || nums.length == 0){
              return false;
          }
          int start = 0;
          int end = nums.length - 1;
          while(start + 1 < end){
              int mid = start + (end - start) / 2;
              if(nums[mid] < target){
                  start = mid;
              } else {
                  end = mid;
              }
          }
          if(nums[start] == target || nums[end] == target){
              return true;
          }
          return false;
      }
  }
  ```
  # Intersection of two arrays II
  要求：
  - Each element in the result should appear as many times as it shows in both arrays.
  - The result can be in any order.
  ### 解法一：HashMap
  用一个`HashMap`记录更小的那个array中每个 Element 及其出现次数，另一个`ArrayList`记录 intersection
  Time:`O(n + m)`，Space:`O(n)`
  ```java
  class Solution {
      public int[] intersect(int[] nums1, int[] nums2) {
          ArrayList<Integer> list = new ArrayList<>();
          Map<Integer, Integer> map = new HashMap<>();
          for(int num : nums1){
              if(!map.containsKey(num)){
                  map.put(num, 1);
              } else {
                  map.put(num, map.get(num) + 1);
              }
          }
          for(int num : nums2){
              if(map.containsKey(num)){
                  list.add(num);
                  map.put(num, map.get(num) - 1);
                  if(map.get(num) == 0){
                      map.remove(num);
                  }
              }
          }
          int[] results = new int[list.size()];
          int index = 0;
          for(int num : list){
              results[index++] = num;
          }
          return results;
      }
  }
  ```
  ### Follow up
  - What if the given array is already sorted? How would you optimize your algorithm?
    - 使用 `Two Pointer` (如果需要知道同样的数出现次数则不需要去重) 或 `Binary Search` (如果需要知道同样的数一共出现了多少次，用类似于 Search a Range 的做法)
  - What if nums1's size is small compared to nums2's size? Which algorithm is better?
    - 用 `HashMap` 存更小的那个 array
  - What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?
    - 同上
'''
tags: [
  "HashSet"
  "Array"
  "Binary_Search"
  "Two_Pointer"
]
isStarred: false
isTrashed: false
