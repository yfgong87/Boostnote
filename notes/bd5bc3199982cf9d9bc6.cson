type: "MARKDOWN_NOTE"
folder: "ca7b6b3755f93c46a5f8"
title: "String"
content: '''
  # String
  ### Iterate String
  ```java
  String s = "123";
  for (Character c : s.toCharArray()){
    //code
  }
  ```
  ### Check if `char` is within a specific `char` set
  ```java
  char c = '1';
  String charSet = "123";
  if (charSet.contains(String.valueOf(c))) {
      return true;
  }
  ```
  ### Split String
  ```java
  str = "Hello I'm your String";
  String[] splited = str.split(" ");//split by ONE whitespace
  String[] splited = str.split("\\\\s");//split by ONE whitespace
  String[] splited = str.split("\\\\s+");//split by ONE or MANY whitespace
  //NOTE: A tab could be a different number of columns depending on your environment, but a space is always one column
  ```
  ### String.substring(startIndex, endIndex)
  - `String`.`substring`(`startIndex`, `endIndex`): `endIndex` is NOT inclusive
  ```java
  String str = "smiles"
  str.substring(1, 5); // returns "mile"
  str.substring(0, str.length()); //return "smiles", str.length() = 6
  ```
  ### Number of subStrings in a string with `n` char
  - `n * (n + 1) / 2`, e.g. `O(n^2)`
  - `"abcd"`: 4 (`"a"`, `"b"`, `"c"`, `"d"`) + 3 (`"ab"`, `"bc"`, `"cd"`) + 2 (`"abc"`, `"bcd"`) + 1 (`"abcd"`) = `4 * (4 + 1) / 2`
  
  ### Compare String
  - `boolean` `String`.`equals`(`String` `str`)
  Return `true` if equal, return `false` if not equal or `str` is `null`
  NOTE1: `equals`() make a check on reference first, so it is SAFE to compare with `null`
  NOTE2: However `equals`() CANNOT be invoked on a `null` object
  - `int` `String`.`compareTo`(`String` `str`)
  Return `0` if equal, or `positive` / `negative` value based on lexicographic difference
  NOTE: If `str` is `null`, throw `NullPointerException`
  
  ### String Methods
  #### Check
  - `int` `String`.`length`( )
  - `boolean` `String`.`isEmpty`( )
  - `boolean` `String`.`startsWith`(`String` `str`)
  - `boolean` `String`.`endsWith`(`String` `str`)
  #### Get
  - `char` `String`.`charAt`(`int`, `index`)
  - `String` `String`.`substring`(`int` `beginIndex`)
  - `String` `String`.`substring`(`int` `beginIndex`, `int` `endIndex`): `beginIndex` is INCLUSIVE, `endIndex` is EXCLUSIVE
  #### Compare
  - `int` `String`.`compareTo`(`String` `str`): Compares two strings lexicographically.
  - `int` `String`.`compareToIgnoreCase`(`String` `str`): Compares two strings lexicographically, ignoring case differences.
  - `boolean` `String`.`equals`(`Object` `o`): Compares this string to the specified object.
  - `boolean`	`String`.`equalsIgnoreCase`(`String` `str`): Compares this String to another String, ignoring case considerations.
  #### Modify
  - `String` `String`.`toUpperCase`( )
  - `String` `String`.`toLowerCase`( )
  - `char[ ]` `String`.`toCharArray`( )
  - `String[ ]` `String`.`split`(`String` `regex`)
  - `String` `String`.`concat`(`String` `anotherStr`): concatenate `anotherStr` to the end of `String`
  - `String` `String`.`trim`( ): Returns a copy of the string, with leading and trailing whitespace omitted.
  - `String` `String`.`replaceAll`(`String` `regex`, `String` `replacement`): Replaces EACH match.
  - `String` `String`.`replaceFirst`(`String` `regex`, `String` `replacement`): Replaces FIRST match
  #### valueOf
  - `String`.`valueOf`(`Primitive`)
  `Primitive` can be `boolean`, `char`, `char[ ]`, `double`, `long`, `int`, `float`, `Object`
  - `String`.`valueOf`(`char[ ]` charSet)
  - `String`.`valueOf`(`char[ ]` `charSet`, `int` `offset`, `int` `count`)
  #### indexOf / lastIndexOf
  `indexOf`: Return the index of `first` occurence
  `lastIndexOf`: Return the index of `last` occurence
  Return `-1` if NOT found
  - `int` `String`.`indexOf`(`char` `c`)
  - `int` `String`.`indexOf`(`String` `s`)
  - `int` `String`.`indexOf`(`char` `c`, `int` `startIndex`)
  - `int` `String`.`indexOf`(`String` `s`, `int` `startIndex`)
  #### Other
  - `int` `String`.`hashcode`( )
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-16T20:25:36.618Z"
updatedAt: "2017-09-06T04:15:17.184Z"
