type: "MARKDOWN_NOTE"
folder: "ca7b6b3755f93c46a5f8"
title: "String & Character"
content: '''
  # String & Character
  ## `String`
  ### Iterate String
  ```java
  String s = "123";
  for (Character c : s.toCharArray()){
    //code
  }
  ```
  ### Check if `char` is within a specific `char` set
  ```java
  char c = '1';
  String charSet = "123";
  if (charSet.contains(String.valueOf(c))) {
      return true;
  }
  ```
  ### Split String: `String`[ ] `String`.`split`(`String` `regex`)
  - `regex`本身被删掉
  - 如果`regex`删掉后生成的空串在中间，则保留，如果在开头或结尾，则不保留
  ```java
  String str = "boo:and:foo";
  str.split(":"); //{ "boo", "and", "foo" }
  str.split("o"); //{ "b", "", ":and:f" }, 前两个"o"之间形成空串，后两个"o"之间形成的空串因为在结尾，所以不保留
  ```
  - 注意！！空串`split`还是空串，有可能会死循环
  ```java
  str = "Hello I'm your String";
  String[] splited = str.split(" ");//split by ONE whitespace
  String[] splited = str.split("\\\\s");//split by ONE whitespace
  String[] splited = str.split("\\\\s+");//split by ONE or MANY whitespace
  //NOTE: A tab could be a different number of columns depending on your environment, but a space is always one column
  ```
  ### String.substring(startIndex, endIndex)
  - `String`.`substring`(`startIndex`, `endIndex`): `endIndex` is NOT inclusive
  ```java
  String str = "smiles"
  str.substring(1, 5); // returns "mile"
  str.substring(0, str.length()); //return "smiles", str.length() = 6
  ```
  
  ### Compare String
  - `boolean` `String`.`equals`(`String` `str`)
  Return `true` if equal, return `false` if not equal or `str` is `null`
  NOTE1: `equals`() make a check on reference first, so it is SAFE to compare with `null`
  NOTE2: However `equals`() CANNOT be invoked on a `null` object
  - `int` `String`.`compareTo`(`String` `str`)
  Return `0` if equal, or `positive` / `negative` value based on lexicographic difference
  NOTE: If `str` is `null`, throw `NullPointerException`
  ```java
  //结果 < 0 则 str1 is lexicographically first (comes first in a dictionary)
  str1.compareTo(str2); 
  ```
  
  ### String Methods
  #### Check
  - `int` `String`.`length`( )
  - `boolean` `String`.`isEmpty`( )
  - `boolean` `String`.`startsWith`(`String` `str`)
  - `boolean` `String`.`endsWith`(`String` `str`)
  #### Get
  - `char` `String`.`charAt`(`int` `index`)
  - `String` `String`.`substring`(`int` `beginIndex`)
  - `String` `String`.`substring`(`int` `beginIndex`, `int` `endIndex`): `beginIndex` is INCLUSIVE, `endIndex` is EXCLUSIVE
  #### Compare
  - `int` `String`.`compareTo`(`String` `str`): Compares two strings lexicographically.
  - `int` `String`.`compareToIgnoreCase`(`String` `str`): Compares two strings lexicographically, ignoring case differences.
  - `boolean` `String`.`equals`(`Object` `o`): Compares this string to the specified object.
  - `boolean`	`String`.`equalsIgnoreCase`(`String` `str`): Compares this String to another String, ignoring case considerations.
  #### Modify
  - `String` `String`.`toUpperCase`( )
  - `String` `String`.`toLowerCase`( )
  - `char[ ]` `String`.`toCharArray`( )
  - `String[ ]` `String`.`split`(`String` `regex`)
  - `String` `String`.`concat`(`String` `anotherStr`): concatenate `anotherStr` to the end of `String`
  ```java
  String str = "";
  char a = 'a';
  int b = 1;
  // + 是以 StringBuilder.append() 实现的
  str = a + b; //b被自动转换成String，最后结果为"a1"
  return "" + a + b; //同上
  ```
  - `String` `String`.`trim`( ): Returns a copy of the string, with leading and trailing whitespace omitted.
  
  #### Replace
  Replace is the ONLY way to remove char/substring from String
  - `String` `String`.`replace`(`char` `oldChar`, `char` `newChar`): Replaces EACH match.
  - `String` `String`.`replaceAll`(`String` `regex`, `String` `replacement`): Replaces EACH match.
  - `String` `String`.`replaceFirst`(`String` `regex`, `String` `replacement`): Replaces FIRST match
  #### valueOf
  - `String`.`valueOf`(`Primitive`)
  `Primitive` can be `boolean`, `char`, `char[ ]`, `double`, `long`, `int`, `float`, `Object`
  - `String`.`valueOf`(`char[ ]` charSet)
  - `String`.`valueOf`(`char[ ]` `charSet`, `int` `offset`, `int` `count`)
  
  #### indexOf / lastIndexOf
  ##### 返回值：
  - `indexOf`: Return the index of `first` occurence
  - `lastIndexOf`: Return the index of `last` occurence
  - Both return `-1` if NOT found
  - 返回的都是`String`的第一位所在的`index`
  ```java
  //     012345678910
  str = "Hello Hello";
  str.indexOf("llo"); //返回2，返回第一个char所在的index
  str.lastIndexOf("llo"); //返回8，返回第一个char所在的index
  str.indexOf("llo", 5); //返回8，从5往后找
  str.lastIndexOf("llo", 5); //返回2, 从5往前找
  ```
  
  ##### 语法：
  - `int` `String`.`indexOf`(`char` `c`)
  - `int` `String`.`indexOf`(`String` `s`)
  - `int` `String`.`indexOf`(`char` `c`, `int` `startIndex`)
  - `int` `String`.`indexOf`(`String` `s`, `int` `startIndex`) : 可以把`startIndex`设为上一个`index + 1`去找第二次出现的`index`
  - `int` `String`.`lastIndexOf`(`String` `s`, `int` `startIndex`): 从`startIndex`往回(`backwards`)找！
  
  ##### 活用indexOf：Remove Vowel
  ```java
  //本质上将indexOf作为一个类似.contains()的method来使用
  StringBuffer sb = new StringBuffer();
  String v = "aeiouAEIOU";
  for(int i = 0; i < string.length(); i++){
      if(v.indexOf(string.charAt(i)) > -1) continue; 
      sb.append(string.charAt(i));
  }
  return sb.toStirng();
  
  //String本身有.contains()
  public boolean String.contains(CharSequence s);
  String.contains(String str);  //Valid, String can be converted to CharSequence
  String.contains(char c); //WRONG! char cannot be converted to CharSequence
  ```
  
  #### Other
  - `int` `String`.`hashcode`( )
  
  ## `Character`
  ### cases
  - `char` `Character`.`toLowerCase`(`char` `c`)
  - `char` `Character`.`toUpperCase`(`char` `c`)
  - `boolean` `Character`.`isLowerCase`(`char` `c`)
  - `boolean` `Character`.`isUpperCase`(`char` `c`)
  
  ### validate char type
  - `boolean` `Character`.`isDigit`(`char` `c`)
  - `boolean` `Character`.`isLetter`(`char` `c`)
  - `boolean` `Character`.`isWhiteSpace`(`char` `c`)
  ### transform
  - `String` `Character`.`toString`( )
  ```java
  char[] charArray = oldString.toCharArray();
  String newString = new String(charArray);
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-16T20:25:36.618Z"
updatedAt: "2017-12-07T18:32:46.922Z"
