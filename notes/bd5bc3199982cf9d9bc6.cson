type: "MARKDOWN_NOTE"
folder: "ca7b6b3755f93c46a5f8"
title: "String"
content: '''
  # String
  ### Split String
  ```java
  str = "Hello I'm your String";
  String[] splited = str.split(" ");//split by ONE whitespace
  String[] splited = str.split("\\\\s");//split by ONE whitespace
  String[] splited = str.split("\\\\s+");//split by ONE or MANY whitespace
  //NOTE: A tab could be a different number of columns depending on your environment, but a space is always one column
  ```
  ### String.substring(startIndex, endIndex)
  - `String`.`substring`(`startIndex`, `endIndex`): `endIndex` is NOT inclusive
  ```java
  String str = "smiles"
  str.substring(1, 5); // returns "mile"
  str.substring(0, str.length()); //return "smiles", str.length() = 6
  ```
  ### Number of subStrings in a string with `n` char
  - `n * (n + 1) / 2`, e.g. `O(n^2)`
  - `"abcd"`: 4 (`"a"`, `"b"`, `"c"`, `"d"`) + 3 (`"ab"`, `"bc"`, `"cd"`) + 2 (`"abc"`, `"bcd"`) + 1 (`"abcd"`) = `4 * (4 + 1) / 2`
  
  ### Compare String
  - `boolean` `String`.`equals`(`String` `str`)
  Return `true` if equal, return `false` if not equal or `str` is `null`
  NOTE1: `equals`() make a check on reference first, so it is SAFE to compare with `null`
  NOTE2: However `equals`() CANNOT be invoked on a `null` object
  - `int` `String`.`compareTo`(`String` `str`)
  Return `0` if equal, or `positive` / `negative` value based on lexicographic difference
  NOTE: If `str` is `null`, throw `NullPointerException`
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-16T20:25:36.618Z"
updatedAt: "2017-08-29T00:08:23.673Z"
