type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Binary Tree Longest Consecutive Sequence I, II, III"
content: '''
  # Binary Tree Longest Consecutive Sequence I, II, III
  I: 最长路线必须从`parent`到`child`
  ```java
  public class Solution {
      /**
       * @param root the root of binary tree
       * @return the length of the longest consecutive sequence path
       */
      int max = Integer.MIN_VALUE;
      public int longestConsecutive(TreeNode root) {
          // Write your code here
          helper(root);
          return max;
      }
  	//helper 返回的是包括该点自己，与Child节点组成的连续序列最长的长度
      private int helper (TreeNode root){
          if(root == null){
              return 0;
          }
          
          int left = helper(root.left);
          int right = helper(root.right);
          
  		//如果向左或向右不连续，归零
          if(root.left != null && root.left.val != root.val + 1){
              left = 0;
          }
          
          if(root.right != null && root.right.val != root.val + 1){
              right = 0;
          }
          
  		//往左下和往右下走的 Longest Consecutive Sequence 取最长
  		//root 自己的 LCS 至少为 1，所以要 +1
          int result = Math.max(left, right) + 1;
          max = Math.max(max, result);
          return result;
      }
  }
  ```
  II: 最长路径可以从任意点开始，任意点结束
  - `max_dec`记录的是，不包括该点自己，比该点小的点组成的连续序列最长的长度
  - `max_inc`记录的是，不包括该点自己，比该点大的点组成的连续序列最长的长度
  - `max`记录的是，包括该点自己，比该点大和小的点组成的连续序列最长的长度
  - `null`节点的`(max_dec, max_inc, max)`为`(0, 0, 0)`
  - `leaf`节点的`(max_dec, max_inc, max)`为`(0, 0, 1)`
  ```java
      class returnType{
        int max_dec;
        int max_inc;
        int max;
        returnType(int max_dec, int max_inc, int max){
            this.max_dec = max_dec;
            this.max_inc = max_inc;
            this.max = max;
        }
      }
      
      public int longestConsecutive2(TreeNode root) {
          // write your code here
          return helper(root).max;
      }
      
      public returnType helper(TreeNode root){
          if(root == null){
              return new returnType(0, 0, 0);
          }
  		
          returnType left = helper(root.left);
          returnType right = helper(root.right);
  		
          int dec = 0;  //如果不连续，最少也是0
          int inc = 0;
  		
  		// Compare with the original dec/inc to decide which path (left/right) has the longest LCS
          if(root.left != null && root.left.val == root.val - 1){
              dec = Math.max(dec, left.max_dec + 1);
          }
          if(root.left != null && root.left.val == root.val + 1){
              inc = Math.max(inc, left.max_inc + 1);
          }
          if(root.right != null && root.right.val == root.val - 1){
              dec = Math.max(dec, right.max_dec + 1);
          }
          if(root.right != null && root.right.val == root.val + 1){
              inc = Math.max(inc, right.max_inc + 1);
          }
  		
          int max = dec + 1 + inc;
          //注意还要再跟 left 和 right 的最大值比较，分治的最后一步
          max = Math.max(max, Math.max(left.max, right.max));
          return new returnType(dec, inc, max);
      }
  ```
  III: 从二叉树变为N叉树
  ```java
  /**
   * Definition for a multi tree node.
   * public class MultiTreeNode {
   *     int val;
   *     List<MultiTreeNode> children;
   *     MultiTreeNode(int x) { val = x; }
   * }
   */
  public int longestConsecutive3(MultiTreeNode root) {
          // write your code here
          return helper(root).max;
      }
      
      public returnType helper(MultiTreeNode root){
          if(root == null){
              return new returnType(0, 0, 0);
          }
          int dec = 0;
          int inc = 0;
          int childrenMax = Integer.MIN_VALUE;
          for(MultiTreeNode n : root.children){
              returnType child = helper(n);
              if(n.children != null && n.val == root.val - 1){
                  dec = Math.max(dec, child.max_dec + 1);
              }
              if(n.children != null && n.val == root.val + 1){
                  inc = Math.max(inc, child.max_inc + 1);
              }
              childrenMax = Math.max(childrenMax, child.max);
          }
          int max = dec + 1 + inc;
          max = Math.max(max, childrenMax);
          return new returnType(dec, inc, max);
    }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-16T02:48:00.281Z"
updatedAt: "2017-12-11T15:14:01.440Z"
