type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Factorization (Factor Combination)"
content: '''
  # Factorization (Factor Combination)
  Solution:
  - Crude solution is to keep divide the number by numbers that are less than it, until the remain is 1. 
  - When the remain is not divisible by the number we pick, we can skip this number
  - When remain is 1, we need to check if there is only 1 factor which is the number itself, if not, we add all the factors to results.
  - Recursion + Backtracking. In first level of the recursion, the divisors candidates starts from `2`, goes all the way up to `n`. In the next level, the divisor candidates starts from the divisor we chose in the last level. Otherwise there will be redundant calculation.
  - Demo
  
  Time Complexity:
  - 一个数最多有`logn`个约数(全是`2`)，因此递归树最多`logn`层，每层有最多`n`种分叉可能，复杂度为`n^(logn)`
  - 如果考虑剪枝，每层最多`sqrt(n)`种分叉？
  
  以下待验证：
  - 对于loop到`n`，大约是`O((logn)! * n ^ (logn))`
  - 对于loop到`sqrt(n)`即剪枝情况，大约是`O((logn)! * sqrt(n) ^ (logn))`
  - `(logn)!`为解的个数：就如combination 的解的个数为`n!`一样，如果一个数可能的约数有`logn`个，那么全组合有`(logn)!`个解
  - 在计算每个解的时候，一共递归`logn`层，每一层中都有一个`n`的循环，`n ^ (logn)`
  ```java
  // 8                          (remain % i != 0)                 (remain % i != 0)      (solution.size() == 1)
  //          [2,] remain = 4      #[3,?]        [4,] remain = 2   #[5,?] #[6?] #[7,?]   #[8,] remain = 1 
  // [2,2,] #[2,3?] [2,4,] remain = 1   	    #[4,4,](start = 4 > 2)
  //[2,2,2] remain = 1
  ```
  ```java
  class Solution {  
      public List<List<Integer>> getFactors(int n) {
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          if(n == 1){
              return results;
          }
          dfs(results, new ArrayList<Integer>(), 2, n);
          return results;
      }
      
      public void dfs(List<List<Integer>> results,
                      List<Integer> solution,
                      int start,
                      int remain){
          if(remain == 1){
              if(solution.size() != 1){
                  results.add(new ArrayList<Integer>(solution));
              }
              return;
          }
          for(int i = start; i <= remain; i++){
              if(remain % i == 0){
                  solution.add(i);
  				// 注意下一个 dfs 以 i 为 start
                  dfs(results, solution, i, remain / i);
                  solution.remove(solution.size() - 1);
              }
          }
      }
  }
  ```
  剪枝
  ```java
  // 8                                                      
  //          [2,4]            		#[8,1] (i = remain 的情况必须单独加入dfs，solution.size() == 1)
  // [2,2,2]       [2,4,1] (i = remain 的情况必须单独加入dfs)         
  //[2,2,2,1] (i = remain 的情况必须单独加入dfs)   
  ```
  ```java
  public class Solution {
      /*
       * @param n: An integer
       * @return: a list of combination
       */
      public List<List<Integer>> getFactors(int n) {
          // write your code here
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          if(n == 1){
              return results; // when n = 1, expected return = [ ], not [ [ ] ]
          }
          dfs(results, new ArrayList<Integer>(), 2, n);
          return results;
      }
      
      public void dfs(List<List<Integer>> results, 
                      List<Integer> solution, 
                      int start,
                      int remain){
          if(remain == 1){
              if(solution.size() != 1){
                  results.add(new ArrayList<Integer>(solution));
              }
              return;
          }
          
          for(int i = start; i <= remain; i++){
              // i * i > remain 则 break 
              //(从此往后每个 start 都 > remain，没有继续循环的必要了)
              if(i * i > remain){
                  break;
              }
              if(remain % i == 0){
                  solution.add(i);
                  dfs(results, solution, i, remain / i);
                  solution.remove(solution.size() - 1);
              }
          }
          //当 i == remain, remain / i == 1
          solution.add(remain);
          dfs(results, solution, remain, 1);
          solution.remove(solution.size() - 1);
      }
  }
  ```
'''
tags: [
  "Linkedin"
  "Backtracking"
]
isStarred: false
isTrashed: false
createdAt: "2017-10-09T18:19:05.939Z"
updatedAt: "2018-01-22T04:05:34.601Z"
