createdAt: "2018-02-18T03:02:03.530Z"
updatedAt: "2018-03-04T17:02:02.586Z"
type: "MARKDOWN_NOTE"
folder: "826d661fa478dc56691c"
title: "Shared Preferences"
content: '''
  # Shared Preferences
  ```java
  public class SharedPreferencesUtils {
  
      private static String PREF_NAME = "models";
  
      public static void saveString(Context context, String key, String value) {
          SharedPreferences sp = context.getApplicationContext().getSharedPreferences(
                  PREF_NAME, Context.MODE_PRIVATE);
  
          sp.edit()
  			.putString(key, value)
  			.apply();  // pass the update to Main thread
      }
  
      public static String readString(Context context, String key, String defaultString) {
          SharedPreferences sp = context.getApplicationContext().getSharedPreferences(
                  PREF_NAME, Context.MODE_PRIVATE);
  
          return sp.getString(key, defaultString);
      }
  }
  ```
  # PreferenceFragment
  
  ### 1. Add dependencies
  
  In `build.grade(Module:app)`
  ```java
  dependencies {
  	compile 'com.android.support:preference-v7:25.1.0'
  }
  ```
  
  ### 2. Make the code looks better
  
  In `res/values/bools.xml`
  ```xml
  <?xml version="1.0" encoding="utf-8"?>
  <resources>
      <bool name="pref_show_bass_default">true</bool>
  </resources>
  ```
  In `res/values/strings.xml`
  ```xml
  <resources>
      <string name="app_name">Visualize</string>
  
      <string name="action_settings">Settings</string>
  
      <!-- - - - - - - - - - - - - - - -
            - Used by Preferences  -
            - - - - - - - - - - - - - - - -->
      <!-- Add Strings label for checkbox preference -->
      <string name="pref_show_bass_label">Show Bass</string>
  	<!-- translatable="false" will make sure not to waste resource to translate this String-->
      <string name="pref_show_bass_key" translatable="false">show_bass</string>	
  	<!-- Summary for CheckBox -->
  	<string name="pref_show_true">Shown</string>
      <string name="pref_show_false">Hidden</string>
  	
  	<!-- Label for the EditText preference -->
      <string name="pref_size_label">Size Multiplier</string>
      <!-- Key name for storing size in SharedPreferences -->
      <string name="pref_size_key" translatable="false">size</string>
      <!-- Default for size preference -->
      <string name="pref_size_default" translatable="false">1</string>
  	
  	 <!-- Label color preference -->
      <string name="pref_color_label_red">Red</string>
      <string name="pref_color_label_blue">Blue</string>
      <string name="pref_color_label_green">Green</string>
  
      <!-- Key name for color preference in SharedPreferences -->
      <string name="pref_color_key" translatable="false">color</string>
  
      <!-- Value in SharedPreferences for color option -->
      <string name="pref_color_red_value" translatable="false">red</string>
      <string name="pref_color_blue_value" translatable="false">blue</string>
      <string name="pref_color_green_value" translatable="false">green</string>
  	
  </resources>
  ```
  In `res/values/arrays.xml`
  ```xml
  <?xml version="1.0" encoding="utf-8"?>
  <!-- Add a res->values->arrays.xml file which contains two arrays, one for
      labels and one for values. The arrays should contain strings found in this file-->
  <resources>
      <!-- Label ordering must match values -->
      <array name="pref_color_option_labels">
          <item>@string/pref_color_label_red</item>
          <item>@string/pref_color_label_blue</item>
          <item>@string/pref_color_label_green</item>
      </array>
  
      <array name="pref_color_option_values">
          <item>@string/pref_color_red_value</item>
          <item>@string/pref_color_blue_value</item>
          <item>@string/pref_color_green_value</item>
      </array>
  </resources>
  ```
  
  ### 3. Set up SettingsFragment UI
  
  In `res/xml/pref_visualizer.xml`
  ```xml
  <?xml version="1.0" encoding="utf-8"?>
  <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
      <!-- android:key is used to retrieve the value later-->
  	<CheckBoxPreference
          android:defaultValue="@bool/pref_show_bass_default"
          android:key="@string/pref_show_bass_key"
          android:summaryOff="@string/pref_show_false"
          android:summaryOn="@string/pref_show_true"
          android:title="@string/pref_show_bass_label" />
  	
  	<EditTextPreference
          android:defaultValue="@string/pref_size_default"
          android:key="@string/pref_size_key"
          android:title="@string/pref_size_label" />
  	
  	<!-- android:entries and android:entries take an Array which is defined in res/values/arrays.xml-->
  	<ListPreference
          android:defaultValue="@string/pref_color_red_value"
          android:entries="@array/pref_color_option_labels"
          android:entryValues="@array/pref_color_option_values"
          android:key="@string/pref_color_key"
          android:title="@string/pref_color_label" />
  </PreferenceScreen>
  ```
  
  ### 4. Create PreferenceFragment and use the UI
  
  In `SettingsFragment.java` (It handles the direct writing of values into `SharedPreferences`)
  ```java
  import android.support.v7.preference.PreferenceFragmentCompat;
  
  public class SettingsFragment extends PreferenceFragmentCompat {
      @Override
      public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
          addPreferencesFromResource(R.xml.pref_visualizer);
      }
  }
  ```
  
  ### 5. Create a SettingsActivity and Add the fragment to it
  In root layout (`activity_settings.xml`) of the activity
  ```xml
  <?xml version="1.0" encoding="utf-8"?>
  <fragment xmlns:android="http://schemas.android.com/apk/res/android"
      android:id="@+id/activity_settings"
      android:name="android.example.com.visualizerpreferences.SettingsFragment"
      android:layout_height="match_parent"
      android:layout_width="match_parent" />
  ```
  
  In `SettingsActivity.java`
  ```java
  public class SettingsActivity extends AppCompatActivity {
  
      @Override
      protected void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          setContentView(R.layout.activity_settings);
          ActionBar actionBar = this.getSupportActionBar();
  
          // Set the action bar back button to look like an up button
          if (actionBar != null) {
              actionBar.setDisplayHomeAsUpEnabled(true);
          }
      }
  
      @Override
      public boolean onOptionsItemSelected(MenuItem item) {
          int id = item.getItemId();
          // When the home button is pressed, take the user back to the VisualizerActivity
          if (id == android.R.id.home) {
              NavUtils.navigateUpFromSameTask(this);
          }
          return super.onOptionsItemSelected(item);
      }
  }
  ```
  
  Since we used the preference fragment compat lib, we need to set the theme.
  In `res/values/styles.xml`
  ```xml
  <resources>
  
      <!-- Base application theme. -->
      <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
          <!-- Customize your theme here. -->
          <item name="colorPrimary">@color/colorPrimary</item>
          <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
          <item name="colorAccent">@color/colorAccent</item>
          <!-- Add a theme for the preference -->
          <item name="preferenceTheme">@style/PreferenceThemeOverlay</item>
      </style>
  
  </resources>
  ```
  
  ### 6. To retrieve the value stored via `PreferenceFragment` from Main Activity
  
  In Main activity (`VisualizerActivity.java`)
  ```java
  SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);
  
  // getBoolean(String key, boolean defaultValue)
  boolean showBass = sp.getBoolean(getString(R.string.pref_show_bass_key), 
     					  getResources().getBoolean(R.bool.pref_show_bass_default)));
  String newColor = sp.getString(getString(R.string.pref_color_key), 
  					  getString(R.string.pref_color_red_value));
  float minSize = Float.parseFloat(sp.getString(getString(R.string.pref_size_key),
                  getString(R.string.pref_size_default)));
  ```
  
  ### 7. To automatically apply changed preference
  - Implement `onSharedPreferenceChangeListener`
  ```java
  public class VisualizerActivity extends AppCompatActivity implements SharedPreferences.OnSharedPreferenceChangeListener{
  	//...
  }
  ```
  - Override Callbacks
  - Register the listener to the `SharedPreference` Object
  - Unregister the listener in `onDestroy` of the activity
  ```java
  	// Register the listener
  	SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);
  	sp.registerOnSharedPreferenceChangeListener(this);
  	
  	// Override the onSharedPreferenceChanged of the listener
  	@Override
      public void onSharedPreferenceChanged(SharedPreferences sp, String key) {
          if(key.equals(getString(R.string.pref_show_bass_key))){
              boolean showBass = sp.getBoolean(key, getResources().getBoolean(R.bool.pref_show_bass_default));
              mVisualizerView.setShowBass(showBass);
          } else if (key.equals(getString(R.string.pref_color_key))) {
              String newColor = sp.getString(key, getString(R.string.pref_color_red_value));
  			mVisualizerView.setColor(newColor);
          } else if (key.equals(getString(R.string.pref_size_key))) {
              float minSize = Float.parseFloat(sp.getString(key, getString(R.string.pref_size_default)));
              mVisualizerView.setMinSizeScale(minSize);
          }
      }
  	
  	// Override the onDestroy of the activity to unregister the listener 
  	@Override
      protected void onDestroy() {
          super.onDestroy();
          PreferenceManager.getDefaultSharedPreferences(this).unregisterOnSharedPreferenceChangeListener(this);
      }
  ```
  
  # How to update preference summary of `ListPreference`
  
  ```java
  
  // COMPLETED (1) Implement OnSharedPreferenceChangeListener 
  // COMPLETED (6) Implement Preference.OnPreferenceChangeListener
  
  public class SettingsFragment extends PreferenceFragmentCompat implements
          OnSharedPreferenceChangeListener, Preference.OnPreferenceChangeListener {
  
      @Override
      public void onCreatePreferences(Bundle bundle, String s) {
  
          // Add visualizer preferences, defined in the XML file in res->xml->pref_visualizer
          addPreferencesFromResource(R.xml.pref_visualizer);
  
          // COMPLETED (3) Get the preference screen, get the number of preferences and iterate through
          // all of the preferences if it is not a checkbox preference, call the setSummary method
          // passing in a preference and the value of the preference
  
          SharedPreferences sharedPreferences = getPreferenceScreen().getSharedPreferences();
          PreferenceScreen prefScreen = getPreferenceScreen();
          int count = prefScreen.getPreferenceCount();
  
          // Go through all of the preferences, and set up their preference summary.
          for (int i = 0; i < count; i++) {
              Preference p = prefScreen.getPreference(i);
              // You don't need to set up preference summaries for checkbox preferences because
              // they are already set up in xml using summaryOff and summary On
              if (!(p instanceof CheckBoxPreference)) {
                  String value = sharedPreferences.getString(p.getKey(), "");
                  setPreferenceSummary(p, value);
              }
          }
  		
  		// COMPLETED (8) Add the OnPreferenceChangeListener specifically to the EditTextPreference
          // Add the preference listener which checks that the size is correct to the size preference
          Preference preference = findPreference(getString(R.string.pref_size_key));
          preference.setOnPreferenceChangeListener(this);
      }
  
      // COMPLETED (4) Override onSharedPreferenceChanged and, if it is not a checkbox preference,
      // call setPreferenceSummary on the changed preference
      @Override
      public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
          // Figure out which preference was changed
          Preference preference = findPreference(key);
          if (null != preference) {
              // Updates the summary for the preference
              if (!(preference instanceof CheckBoxPreference)) {
                  String value = sharedPreferences.getString(preference.getKey(), "");
                  setPreferenceSummary(preference, value);
              }
          }
      }
  
      // COMPLETED (2) Create a setPreferenceSummary which takes a Preference and String value as parameters.
      // This method should check if the preference is a ListPreference and, if so, find the label
      // associated with the value. You can do this by using the findIndexOfValue and getEntries methods
      // of Preference.
      /**
       * Updates the summary for the preference
       *
       * @param preference The preference to be updated
       * @param value      The value that the preference was updated to
       */
      private void setPreferenceSummary(Preference preference, String value) {
          if (preference instanceof ListPreference) {
              // For list preferences, figure out the label of the selected value
              ListPreference listPreference = (ListPreference) preference;
              int prefIndex = listPreference.findIndexOfValue(value);
              if (prefIndex >= 0) {
                  // Set the summary to that label
                  listPreference.setSummary(listPreference.getEntries()[prefIndex]);
              }
          } else if (preference instanceof EditTextPreference) {
              // For EditTextPreferences, set the summary to the value's simple string representation.
              preference.setSummary(value);
          }
      }
  
      // COMPLETED (5) Register and unregister the OnSharedPreferenceChange listener (this class) in
      // onCreate and onDestroy respectively.
      
      @Override
      public void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          getPreferenceScreen().getSharedPreferences()
                  .registerOnSharedPreferenceChangeListener(this);
      }
  
      @Override
      public void onDestroy() {
          super.onDestroy();
          getPreferenceScreen().getSharedPreferences()
                  .unregisterOnSharedPreferenceChangeListener(this);
      }
  	
  	// COMPLETED (7) Override onPreferenceChange. This method should try to convert the new preference value
      // to a float; if it cannot, show a helpful error message and return false. If it can be converted
      // to a float check that that float is between 0 (exclusive) and 3 (inclusive). If it isn't, show
      // an error message and return false. If it is a valid number, return true.
  
      @Override
      public boolean onPreferenceChange(Preference preference, Object newValue) {
          // In this context, we're using the onPreferenceChange listener for checking whether the
          // size setting was set to a valid value.
  
          Toast error = Toast.makeText(getContext(), "Please select a number between 0.1 and 3", Toast.LENGTH_SHORT);
  
          // Double check that the preference is the size preference
          String sizeKey = getString(R.string.pref_size_key);
          if (preference.getKey().equals(sizeKey)) {
              String stringSize = (String) newValue;
              try {
                  float size = Float.parseFloat(stringSize);
                  // If the number is outside of the acceptable range, show an error.
                  if (size > 3 || size <= 0) {
                      error.show();
                      return false;
                  }
              } catch (NumberFormatException nfe) {
                  // If whatever the user entered can't be parsed to a number, show an error
                  error.show();
                  return false;
              }
          }
          return true;
      }
  }
  ```
  # Setting an acceptable range for preference input
  To limit the acceptable values, eg.between 0 (non inclusive) and 3 (inclusive), we opted to use a `PreferenceChangeListener` - this is not the same as a `SharedPreferenceChangeListener`. The differences are:
  
  - `SharedPreferenceChangeListener` is triggered after any value is saved to the SharedPreferences file.
  - `PreferenceChangeListener` is triggered before a value is saved to the SharedPreferences file. Because of this, it can prevent an invalid update to a preference. `PreferenceChangeListeners` are also attached to a single preference.
  
  Generally the flow goes like this:
  
  1. User updates a preference.
  2. `PreferenceChangeListener` triggered for that preference.
  3. The new value is saved to the SharedPreference file.
  4. `onSharedPreferenceChanged` listeners are triggered.
  
  Otherwise they act very similarly. In your activity you implement the `Preference.OnPreferenceChangeListener`, override the `onPreferenceChange(Preference preference, Object newValue)`. The `onPreferenceChange` method will return either `true` or `false`, depending on whether the preference should actually be saved.
  
  Okay, so let’s take a look at the code.
  ### Step 1: Implement the OnPreferenceChangeListener:
  ```java
  public class SettingsFragment extends PreferenceFragmentCompat implements OnSharedPreferenceChangeListener, Preference.OnPreferenceChangeListener
  ```
  ### Step 2: Attach the listener to the size preference in `onCreatePreferences`
  ```java
  @Override
  public void onCreatePreferences(Bundle bundle, String s) {
           /* Other preference setup code code */
          //...
          Preference preference = findPreference(getString(R.string.pref_size_key));
          preference.setOnPreferenceChangeListener(this);
  }
  ```
  ### Step 3: Implement onPreferenceChange
  
  This code will first try to convert the preference into a number and then checks that the number is between 0 and 3. If either of these fail, a toast will be show and false is returned. By returning false, the incorrect value is not saved to shared preferences.
  ```java
  public boolean onPreferenceChange(Preference preference, Object newValue) {
     Toast error = Toast.makeText(getContext(), "Please select a number between 0.1 and 3", Toast.LENGTH_SHORT);
  
     String sizeKey = getString(R.string.pref_size_key);
     if (preference.getKey().equals(sizeKey)) {
         String stringSize = ((String) (newValue)).trim();
         if (stringSize == null) stringSize = "1";
         try {
             float size = Float.parseFloat(stringSize);
             if (size > 3 || size <= 0) {
                 error.show();
                 return false;
             }
         } catch (NumberFormatException nfe) {
             error.show();
             return false;
         }
     }
     return true;
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
