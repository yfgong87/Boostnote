type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Merge Interval, Insert Interval, Missing Interval"
content: '''
  # Merge Interval, Insert Interval, Missing Interval
  ### Merge Interval
  ```java
  public class Solution {
      /*
       * @param intervals: interval list.
       * @return: A new interval list.
       */
      public List<Interval> merge(List<Interval> intervals) {
          // write your code here
          List<Interval> result = new ArrayList<Interval>();
          //左端点排序
          Comparator<Interval> comparator = new Comparator<Interval>(){
              public int compare(Interval a, Interval b){
                  return a.start - b.start;
              }
          };
          intervals.sort(comparator);
          //intervals.sort(Comparator.comparing(i -> i.start));
          //记录前一个interval
          Interval last = null;
          for(Interval curr : intervals){
              //比较当前interval的左端点与前一个的右端点
              if(last == null || curr.start > last.end){
                  result.add(curr);
                  last = curr;
              } else {
                  last.end = Math.max(curr.end, last.end);
              }
          }
          return result;
      }
  }
  ```
  ### Insert Interval (interval array already sorted by start)
  ```java
  class Solution {
      public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
          List<Interval> results = new ArrayList<Interval>();
          int index = 0;
          while(index < intervals.size() && intervals.get(index).start < newInterval.start){
              index++;
          }
          intervals.add(index, newInterval);
          Interval prev = null;
          for(Interval i : intervals){
              if(prev == null || prev.end < i.start){
                  results.add(i);
                  prev = i;
              } else {
                  prev.end = Math.max(prev.end, i.end);
              }
          }
          return results;
      }
  }
  ```
  ### Missing Interval
  ```java
  public class Solution {
      /*
       * @param nums: a sorted integer array
       * @param lower: An integer
       * @param upper: An integer
       * @return: a list of its missing ranges
       */
      public List<String> findMissingRanges(int[] nums, int lower, int upper) {
          // write your code here
          List<String> results = new ArrayList<String>();
          if(nums.length == 0){
              add(results, lower, upper);
              return results;
          }
          add(results, lower, (long)nums[0] - 1);
          for(int i = 1; i < nums.length; i++){
              add(results, (long)nums[i - 1] + 1, (long)nums[i] - 1);
          }
          add(results, (long)nums[nums.length - 1] + 1, upper);
          return results;
      }
      
      public void add(List<String> results, long start, long end){
          if(start > end){
              return;
          }
          if(start == end){
              results.add(String.valueOf(start));
          } else {
              results.add("" + start + "->" + end);
          }
      }
  }
  ```
'''
tags: [
  "Interval"
]
isStarred: false
isTrashed: false
createdAt: "2017-10-03T22:03:48.044Z"
updatedAt: "2018-01-02T02:59:12.651Z"
