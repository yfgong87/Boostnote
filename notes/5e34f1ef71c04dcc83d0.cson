createdAt: "2018-01-07T18:40:10.521Z"
updatedAt: "2018-01-11T04:58:23.904Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Palindrome Pairs"
content: '''
  # Palindrome Pairs
  Given words = `["abcd", "dcba", "lls", "s", "sssll"]`
  Return `[[0, 1], [1, 0], [3, 2], [2, 4]]`
  The palindromes are `["dcbaabcd", "abcddcba", "slls", "llssssll"]`
  
  Solution: 
  - Use a `HashMap` to store each word and its index
  - for each word, check the following conditions:
    - If the whole word itself is a palindrome, check if its reverse is in the map
    - If there are empty string in the map, if so it can be placed before or after the word
    - Whether there are substring of the word or its reverse exist in the map to be placed before or after the word
  - Because empty string and the whole word are special cases of substring of that word, there are two general conditions: 
    - For a word, get its reverse word, check all substring starting from index 0, see if any of those can be put in front of the word to generate a palindrome
    - For a word, get all substring starting from index 0 of the word, see if the reverse of any of those substring can be put behind the word to generate a palindrome
  
  Time Complexity:
  `HashMap`: `O(n)`
  扫描每个word(`O(n)`)，得到其所有从 0 开始的 substring(`O(k)`)，检查其是否存在于`HashMap`且是否能组成回文`O(k)`
  总复杂度：`O(n * k^2)`
  
  Space Complexity:
  `O(n)`
  ```java
  class Solution {
      public List<List<Integer>> palindromePairs(String[] words) {
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          // <word, index>
          Map<String, Integer> map = new HashMap<>(); 
          for(int i = 0; i < words.length; i++){
              map.put(words[i], i);
          }
          
          for(int i = 0; i < words.length; i++){
              String reverse = new StringBuilder(words[i]).reverse().toString();
          	
  			// 对 "abc"，扫描其 reverse ("cba") 的所有从 0 开始的 substring
  			// 检查 "", "c", "cb", "cba" 能否放到 "abc" 的前面形成 palindrome
              for(int j = 0; j <= reverse.length(); j++){
                  String sub = reverse.substring(0, j);
                  if(!map.containsKey(sub)){
                      continue;
                  }
                  if(map.get(sub) == i){
                      continue;
                  }
                  String remain = words[i].substring(0, words[i].length() - j);
                  if(isPalindrome(remain)){
                      ArrayList<Integer> result = new ArrayList<>();
                      result.add(map.get(sub)); // 注意顺序，prefix 先放进 result
                      result.add(i);
                      results.add(result);
                  }
              }
              
  			// 对 "abc"，扫描其所有从 0 开始的 substring 的 reverse
  			// 检查 "", "a", "ba", "cba" 能否放到 "abc" 的后面形成 palindrome
  			// 注意去掉等号，避免"cba"被加入答案两次（即 word 自身为回文的情况）
              for(int j = 0; j < words[i].length(); j++){
                  String sub = new StringBuilder(words[i].substring(0, j)).reverse().toString();
                  if(!map.containsKey(sub)){
                      continue;
                  }
                  if(map.get(sub) == i){
                      continue;
                  }
                  String remain = words[i].substring(j, words[i].length());
                  if(isPalindrome(remain)){
                      ArrayList<Integer> result = new ArrayList<>();
                      result.add(i);
                      result.add(map.get(sub)); // 注意顺序，suffix 后放进 result
                      results.add(result);
                  }
              }
              
          }
          return results;
      }
      
      public boolean isPalindrome(String s){
          int i = 0;
          int j = s.length() - 1;
          while(i <= j){
              if(s.charAt(i) != s.charAt(j)){
                  return false;
              }
              i++;
              j--;
          }
          return true;
      }
  }
  ```
'''
tags: [
  "PocketGem"
  "HashMap"
]
isStarred: false
isTrashed: false
