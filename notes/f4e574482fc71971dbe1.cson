type: "MARKDOWN_NOTE"
folder: "0ef4dc321cdc22cb8b00"
title: "排列和组合的DFS问题"
content: '''
  # 排列和组合的DFS问题
  #### `SubSet` I : 
  - 数组`无`重复数，找子集组合，子集不能有重复 -> `sort`(答案需有序) + `startIndex` + `i + 1`(每个数只能用一次)
  ####  `SubSet` II : 
  - 数组`有`重复数，找子集组合，子集不能有重复 -> `sort`(答案需有序) + `startIndex` + `i + 1`(每个数只能用一次) + `选代表`(数组有重复)
  #### `Combine Sum` I : 
  - 数组`无`重复数，找满足`sum == target`的子集组合，每个数可被用`多次` -> `sort`(答案需有序) + `startIndex` + `i`(每个数可被用多次)
  - 数组`有`重复数，找满足`sum == target`的子集组合, 每个数可被用`多次` -> `sort`(答案需有序) + `startIndex` + `i`(每个数可被用多次) + `选代表`(数组有重复)
  #### `Combine Sum` II : 
  - 数组`无`重复数，找满足`sum == target`的子集组合, 每个数只能用`一次` -> `sort`(答案需有序) + `startIndex` + `i + 1`(每个数只能用一次)
  - 数组`有`重复数，找满足`sum == target`的子集组合, 每个数只能用`一次` -> `sort`(答案需有序) + `startIndex` + `i + 1`(每个数只能用一次) + `选代表`(数组有重复)
  #### `Permutation` I : 
  - 数组`无`重复数，找全集排列 -> 不用`startIndex`(因为排列是全集) + `ArrayList.contains()`(每个数只能用一次，判断当前数是否已经访问过)
  #### `Permutation` II : 
  - 数组`有`重复数，找全集排列 -> 不用`startIndex`(因为排列是全集) + `选代表`(数组有重复，使用`sort` 和 `int[] visited`来判断当前数是否已经访问过，以及判断重复数是否已经访问过)
  
  `注意`：基于判断`nums[i]`和`nums[i - 1]`的`选代表`需要首先排序`sort`
  
  ### DFS: backtracking
  Can use `stack` if allowed
  ```java
  for(int i = 0; i < array.length; i++){
      solution.add(array[i]);
      addSubset(result, solution, array);
      solution.remove(solution.size()-1);
  }
  ```
  ### Module 1, `startIndex`
  - `When to use`: 只要不是排列（`Permutation`），都需要用到`startIndex`
  ```java
  for(int i = index; i < array.length; i++){
      solution.add(array[i]);
      addSubset(result, solution, i, array);
      solution.remove(solution.size()-1);
  }
  ```
  ### Module 2, `i + 1`
  - `When to use`: 每个数只能用`一次`
  - eg.`SubSets I`, `SubSets II`, `Combination Sum II`
  ```java
  for(int i = index; i < array.length; i++){
      solution.add(array[i]);
      addSubset(result, solution, i + 1, array);
      solution.remove(solution.size()-1);
  }
  ```
  ### Module 3, 选代表
  - `When to use`: 数组有重复数
  - eg. `SubSets II`,`Combination Sum II`,`Permutation II`
  ```java
  //排序要先做
  Arrays.sort(array);
  
  for(int i = index; i < array.length; i++){
      //选代表
      if(i != index && array[i] == array[i - 1]){
      continue;
      } 
      
      solution.add(nums[i]);
      addSubset(result, solution, i + 1, array);
      solution.remove(solution.size()-1);
  }
  ```
  ### Permutation II 当数组有重复数时，需要判断两件事来去重：
  以下情况出现时`continue`
  情况1：当前数`array[i]`已经访问过，可以用一个`int[] visited`来记录（`visited[i] == 1`）
  情况2：相同的数再次出现时（`array[i] == array[i - 1]`），前一个数如果已被访问过（`visited[i - 1] == 1`）
  - visited[i - 1] == 0是判断前面一个相同的数有没有取过，没取过就跳过
    visited[i - 1] == 1是判断前面一个相同的数有没有取过，取过就跳过
  
    两者看起来很矛盾，实际上是一个意思的两种表达方式
    [1, 2, 3(1), 3(2), 3(3), 4]
    对于第一种取法，3(1)不取的话，3(2)和3(3)都不会取。
    对于第二种取法，3(1)取了的话，3(2)和3(3)都不会取。
    由此可以得到结论，对于第一种取法，取3(1),3(2),3(3)的顺序是3(1)->3(2)->3(3)
    对于第二种取法，取3(1),3(2),3(3)的顺序是3(3)->3(2)->3(1)
    所以两者都是可以通过的
    
  ### 递归的出口
  - `SubSets`: 遍历数组后
  - `Combination Sum`: `remainTarget == 0`, 注意优化：当`remainTarget < nums[i]` 时可以break
  - `Permutation`: `solution`的大小等于数组大小
  
  ### 时间复杂度
  Combination: `O(n * 2^n)`, 解的个数`2^n`(`n`个数每个数取或者不取两种可能)，递归每一层打印每个解的复杂度`O(n)`
  Permutation: `O(n * n!)`, 解的个数`n!`(`n` * `n - 1` * `n - 2` *...* `1`)，递归每一层打印每个解的复杂度`O(n)`
  
  ### Combination
  Given two integers `n` and `k`, return all possible combinations of `k` numbers out of `1 ... n`.
  If `n` = `4` and `k` = `2`, a solution is:
  `[[2,4],[3,4],[2,3],[1,2],[1,3],[1,4]]`
  
  这题本质上是个`subset`问题
  树的高度为`k`，每一层有`n`种可能，复杂度为`k^n`
  ```java
  public class Solution {
      /*
       * @param n: Given the range of numbers
       * @param k: Given the numbers of combinations
       * @return: All the combinations of k numbers out of 1..n
       */
      //n: {1, 2, 3, 4}
      //                             []
      //       [1]             [2]        [3]      [4]
      // [1,2][1,3][1,4]    [2,3][2,4]   [3,4]
  
      public List<List<Integer>> combine(int n, int k) {
          // write your code here
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          helper(results, new ArrayList<Integer>(), n, k, 1);
          return results;
      }
      
      public void helper(List<List<Integer>> results,
                         List<Integer> solution,
                         int n,
                         int k,
                         int startIndex){
          if(solution.size() == k){
              results.add(new ArrayList<Integer>(solution));
              return;
          }
          for(int i = startIndex; i <= n; i++){
              solution.add(i);
              helper(results, solution, n, k, i + 1);
              solution.remove(solution.size() - 1);
          }
      }
  }
  ```
  ### Permutation
  ```java
  public class Solution {
      /*
       * @param nums: A list of integers.
       * @return: A list of permutations.
       */
      // [1,2,3]
      //                     []
      //      [1]           [2]               [3]
      //  [1,2][1,3]     [2,1][2,3]       [3,1][3,2] 
      //[1,2,3][1,3,2] [2,1,3][2,3,1]    [3,1,2][3,2,1]
  
      public List<List<Integer>> permute(int[] nums) {
          // write your code here
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          helper(results, new ArrayList<Integer>(), nums, new int[nums.length]);
          return results;
      }
      
      public void helper(List<List<Integer>> results,
                         List<Integer> solution,
                         int[] nums,
                         int[] visited){
          if(solution.size() == nums.length){
              results.add(new ArrayList<Integer>(solution));
              return;
          }
          for(int i = 0; i < nums.length; i++){
              if(visited[i] == 1){
                  continue;
              }
              visited[i] = 1;
              solution.add(nums[i]);
              helper(results, solution, nums, visited);
              visited[i] = 0;
              solution.remove(solution.size() - 1);
          }
      }
  }
  ```
  ### Permutation II 
  有重复数
  ```java
  class Solution {
      /**
       * @param nums: A list of integers.
       * @return: A list of unique permutations.
       */
      // [1,2a,2b]
      //                     []
      //        [1]               [2a]                   [2b]
      //  [1,2a]   [1,2b]     [2a,1][2a,2b]          [2b,1][2b,2a] 
      //[1,2a,2b] [1,2b,2a] [2a,1,2b][2a,2b,1]     [2b,1,2a][2b,2a,1]
      // [1,2,2]   [1,2,2]   [2,1,2]  [2,2,1]       [2,1,2]  [2,2,1]
      //   pick                pick     pick
      public List<List<Integer>> permuteUnique(int[] nums) {
          // Write your code here
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          Arrays.sort(nums); //区分2a,2b
          helper(results, new ArrayList<Integer>(), nums, new int[nums.length]);
          return results;
          
      } 
      private void helper(List<List<Integer>> results,
                          ArrayList<Integer> solution, 
                          int[] nums,
                          int[] visited){
          if(solution.size() == nums.length){
              results.add(new ArrayList<Integer>(solution));
              return;
          }
          for(int i = 0; i < nums.length; i++){
              if(visited[i] == 1){
                  continue;
              }
              if(i >= 1 && nums[i] == nums[i - 1] && visited[i - 1] == 1){
                  continue;
              }
              visited[i] = 1;
              solution.add(nums[i]);
              helper(results, solution, nums, visited);
              solution.remove(solution.size() - 1);
              visited[i] = 0;
              
          }
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-19T17:47:51.066Z"
updatedAt: "2017-12-23T23:26:31.552Z"
