type: "MARKDOWN_NOTE"
folder: "6e2623e3aff765e4a79c"
title: "Split String + Palindrome Partitioning"
content: '''
  # Split String + Palindrome Partitioning
  ### Split String
  Give a string, you can choose to split the string after `one` character or `two` adjacent characters, and make the string to be composed of only one character or two characters. Output all possible results.
  Given the string `"123"`
  return `[["1","2","3"],["12","3"],["1","23"]]`
  ```java
  public class Solution {
      /*
       * @param : a string to be split
       * @return: all possible split string array
       */
      public List<List<String>> splitString(String s) {
          // write your code here
          List<List<String>> results = new ArrayList<List<String>>();
          if(s == null){
              return results;
          }
          if(s.length() == 0){
              results.add(new ArrayList<String>());
              return results;
          }
          helper(s, 0, new ArrayList<String>(), results);
          return results;
      }
      
      private void helper (String s,
                           int startIndex,
                           ArrayList<String> solution,
                           List<List<String>> results){
          if (startIndex == s.length()) {
              results.add(new ArrayList<String>(solution));
              return;
          }
          for(int i = startIndex; i < s.length(); i++){
              String subString = s.substring(startIndex, i + 1);
              if(subString.length() > 2){
                  continue;
              }
              solution.add(subString);
              helper(s, i + 1, solution, results);
              solution.remove(solution.size() - 1);
          }
      }
  }
  ```
  ### Palindrome Partition
  Given a string s, partition s such that every substring of the partition is a palindrome.
  Return all possible palindrome partitioning of s.
  Given s = `"aab"`, return:
  `[
    ["aa","b"],
    ["a","a","b"]
  ]`
  ```java
  public class Solution {
      /**
       * @param s: A string
       * @return: A list of lists of string
       */
      public List<List<String>> partition(String s) {
          // write your code here
          List<List<String>> results = new ArrayList<List<String>>();
          if(s.length() == 0 || s == null){
              return results;
          }
          helper(s, 0, new ArrayList<String>(), results);
          return results;
      }
      
      private void helper (String s,
                           int startIndex,
                           ArrayList<String> solution,
                           List<List<String>> results){
          if (startIndex == s.length()) {
              results.add(new ArrayList<String>(solution));
              return;
          }
          for(int i = startIndex; i < s.length(); i++){
              String subString = s.substring(startIndex, i + 1);
              if(!isPalindrome(subString)){
                  continue;
              }
              solution.add(subString);
              helper(s, i + 1, solution, results);
              solution.remove(solution.size() - 1);
          }
      }
      
      private boolean isPalindrome(String s){
          for(int i = 0, j = s.length() - 1; i < j; i++, j--){
              if (s.charAt(i) != s.charAt(j)){
                  return false;
              }
          }
          return true;
      }
  }
  ```
  
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-12-18T05:14:34.245Z"
updatedAt: "2017-12-18T05:17:38.543Z"
