type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Split String + Palindrome Partitioning"
content: '''
  # Split String + Palindrome Partitioning
  ### Split String
  Give a string, you can choose to split the string after `one` character or `two` adjacent characters, and make the string to be composed of only one character or two characters. Output all possible results.
  Given the string `"123"`
  return `[["1","2","3"],["12","3"],["1","23"]]`
  
  树的最坏高度为`n`(每次只走一个`char`的情况)，每一层有两种走法（走一格或两格），总复杂度为`2^n`
  ```java
  public class Solution {
      /*
       * @param : a string to be split
       * @return: all possible split string array
       */
  	//							123
  	//				1,							12,						
  	//		  1,2,       1,23,			        12,3,
  	//	     1,2,3,
  	
      public List<List<String>> splitString(String s) {
          // write your code here
          List<List<String>> results = new ArrayList<List<String>>();
          if(s == null){
              return results;
          }
          if(s.length() == 0){
              results.add(new ArrayList<String>());
              return results;
          }
          helper(s, 0, new ArrayList<String>(), results);
          return results;
      }
      
      private void helper (String s,
                           int startIndex,
                           ArrayList<String> solution,
                           List<List<String>> results){
          if (startIndex == s.length()) {
              results.add(new ArrayList<String>(solution));
              return;
          }
          for(int i = startIndex; i < s.length() && i < startIndex + 2; i++){
              String subString = s.substring(startIndex, i + 1);
              /*if(subString.length() > 2){
                  continue;
              }*/
              solution.add(subString);
              helper(s, i + 1, solution, results);
              solution.remove(solution.size() - 1);
          }
      }
  }
  ```
  ### Palindrome Partition
  Given a string s, partition s such that every substring of the partition is a palindrome.
  Return all possible palindrome partitioning of s.
  Given s = `"aab"`, return:
  `[
    ["aa","b"],
    ["a","a","b"]
  ]`
  
  Solution：
  The idea is to go through every substring starting from first character, check if it is palindrome. If yes, then add the substring to solution and recursion for remaining part.
  
  树的高度为`n = s.length()`，第一层有`n`种可能，第二层`n - 1`种，...总复杂度`n * n - 1 * n - 2 * ... * 1 = n!`  
  但是，如果理解成在每个间隔选择切或者不切，则是`2^n`，产生的所有`substring`进行回文判断耗费`n`，总复杂度`n * 2^n`
  ```java
  public class Solution {
      /**
       * @param s: A string
       * @return: A list of lists of string
       */
      //                          aab
      //          a,              aa,         aab,(X)
      //   a,a,   a,ab,(X)       aa,b(X) 
      //  a,a,b
      public List<List<String>> partition(String s) {
          // write your code here
          List<List<String>> results = new ArrayList<List<String>>();
          if(s.length() == 0 || s == null){
              return results;
          }
          helper(s, 0, new ArrayList<String>(), results);
          return results;
      }
      
      private void helper (String s,
                           int startIndex,
                           ArrayList<String> solution,
                           List<List<String>> results){
          if (startIndex == s.length()) {
              results.add(new ArrayList<String>(solution));
              return;
          }
          for(int i = startIndex; i < s.length(); i++){
              String subString = s.substring(startIndex, i + 1);
              if(!isPalindrome(subString)){
                  continue;
              }
              solution.add(subString);
              helper(s, i + 1, solution, results);
              solution.remove(solution.size() - 1);
          }
      }
      
      private boolean isPalindrome(String s){
          for(int i = 0, j = s.length() - 1; i < j; i++, j--){
              if (s.charAt(i) != s.charAt(j)){
                  return false;
              }
          }
          return true;
      }
  }
  ```
  
'''
tags: [
  "Backtracking"
  "DFS"
]
isStarred: false
isTrashed: false
createdAt: "2017-12-18T05:14:34.245Z"
updatedAt: "2018-01-23T03:17:20.386Z"
