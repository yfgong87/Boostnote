createdAt: "2018-01-20T07:31:50.226Z"
updatedAt: "2018-01-22T03:32:31.095Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Can I Win"
content: '''
  # Can I Win
  Solution: 
  - Since we cannot use a number twice, we need to know whether we already used it. We can use a boolean array to record that.
  - We can use a recursive method which return a boolean that indicate whether the current player will win or lose.
  - When we pick a number, and find out that the total is <= 0, that means we lost the game, return false.
  - Otherwise we substract the number we pick from the total, then recursion down to the give the turn to the second player. 
  - If second player lose, which means we won, we return true in the upper level recursion.
  - If second player won, which means the current choice of number did not work out, now we need to try a different number at the upper level.
  - If the first player choose `1`, the second player has `n - 1` different choices that we need to try. In the worst case, we need to rotate between the two player `n` times, make the complexity `O(n!)`
  ```java
  // max = 3, total = 4
  // First player choose 1:
  // 								1 [2,3], total = 3, visited[] = {100}
  // Second player choose 2 or 3:
  // 2 [3], total = 1, visited[] = {110} (false) 		3 [2], total = 0, visited[] = {101} (true)	
  // 3 [], total < 0, visited[] = {111} (true)
  //
  // First player choose 2:
  //								2 [1,3], total = 2, visited[] = {010}
  //        # redundant sub-problem
  // 1 [3], total = 1, visited[] = {110} (false) 		3 [1], total < 0, visited[] = {011} (true)	
  // 3 [], total < 0, visited[] = {111} (true)
  //
  // First player choose 3:
  //								3 [1,2], total = 1, visited[] = {001}							
  // 1 [2], total = 0, visited[] = {101} (true)
  //								
  ```
  Brute Force, `O(n!)`
  ```java
  class Solution {
      public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
          if(desiredTotal == 0){
              return true;
          }
          return dfs(new boolean[maxChoosableInteger + 1], maxChoosableInteger, desiredTotal);
      }
      
      public boolean dfs(boolean[] visited, int maxChoosableInteger, int desiredTotal){
          if(desiredTotal <= 0){
              return false;
          }
          for(int i = 1; i <= maxChoosableInteger; i++){
              if(visited[i]){
                  continue;
              }
              visited[i] = true;
              if(!dfs(visited, maxChoosableInteger, desiredTotal - i)){
  				//when it is true for current state
  				//backtracking for previous state will continue searching
  				//so it is necessary to reset visited[i]
                  visited[i] = false;
                  return true;
              }
              visited[i] = false;
          }
          return false;
      }
  }
  ```
  优化 `2^n` (`2^n` possible `boolean[]` combination used)
  ```java
  public class Solution {
      Map<String, Boolean> map;
      public boolean canIWin(int max, int total) {
          // corner case 1
          int sum = (1 + max) * max / 2;
          if(sum < total) return false;
          // corner case 2
          if(total <= 0) return true;
          
          map = new HashMap();
          return dfs(new boolean[max + 1], max, total);
      }
      
      public boolean dfs(boolean[] visited, int max, int total){
          if(total <= 0){
              return false;
          }
  		// 将 visited[] 转化为一个 String 作为 HashMap 的 Key
          String key = Arrays.toString(visited);
          if(!map.containsKey(key)){
              // try every unchosen number as next step
              for(int i = 1; i <= max; i++){
                  if(visited[i]){
                      continue;
                  }
                  visited[i] = true;
                  // check whether this lead to a win (i.e. the other player lose)
                  if(!dfs(visited, max, total - i)){
                      map.put(key, true);
                      visited[i] = false;
                      return true;
                  }
                  visited[i] = false;
              }
              map.put(key, false);
          }
          return map.get(key);
      }
  }
  ```
'''
tags: [
  "Dynamic_Programming"
  "Linkedin"
  "Backtracking"
]
isStarred: false
isTrashed: false
