createdAt: "2018-01-07T02:17:32.678Z"
updatedAt: "2018-01-11T21:48:59.987Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Sliding Window Maximum"
content: '''
  # Sliding Window Maximum
  Brute Force 解法：PriorityQueue
  Maintain a PriorityQueue of size `k`, it has to be a maxHeap, everytime the sliding window moves toward right, remove the old number on the left from the heap, put the new number into the heap, add the new number into heap, let the heap calculate the maximum value, peek the maximum value and put into results
  
  时间复杂度：`k + (n - k) * (k + logk)`，`pq.remove()` 耗时 `O(k)`，`pq.add()` 耗时 `O(logk)`, 总计约 `n * k`
  空间复杂度：`k`
  ```java
  //	1   2   3   4   5
  // |		 |
  //  3   4   5
  //
  class Solution {
      public int[] maxSlidingWindow(int[] nums, int k) {
          if(nums == null || nums.length < k || k <= 0){
              return new int[0];
          }
          int[] results = new int[nums.length - k + 1];
          PriorityQueue<Integer> pq = new PriorityQueue<Integer>((Integer a, Integer b) -> b - a);
  		// k
          for(int i = 0; i < k; i++){
              pq.add(nums[i]);
          }
  		// (n - k) * (k + logk)
          results[0] = pq.peek();
          for(int i = 1; i < nums.length - k + 1; i++){
              pq.remove(nums[i - 1]);
              pq.add(nums[i + k - 1]);
              results[i] = pq.peek();
          }
          return results;
      }
  }
  ```
  
  使用 `Deque` 优化
  时间复杂度：Sliding Window 一共前进 `n` 格，每一格平均做一次比较，`O(n)`
  空间复杂度：`O(k)`
  ```java
  // old Element remoe from head 	<-  |head          tail|   <- (new Element add from tail
  //	      				 	         max	 ->	    min 	   and compare with every Element before
  //		   				             old	 ->     new		   until it is the min in the deque)
  class Solution {
      public int[] maxSlidingWindow(int[] nums, int k) {
          if(nums == null || nums.length < k || k <= 0){
              return new int[0];
          }
          int[] results = new int[nums.length - k + 1];
          int index = 0;
          Deque<Integer> dq = new ArrayDeque<>();
          for(int i = 0; i < nums.length; i++){
              while(!dq.isEmpty() && dq.peekFirst() < i - k + 1){
                  dq.removeFirst();
              }
              while(!dq.isEmpty() && nums[dq.peekLast()] < nums[i]){
                  dq.removeLast();
              }
              dq.offerLast(i);
              if(i >= k - 1){
                  results[index] = nums[dq.peekFirst()];
                  index++;
              }
          }
          return results;
      }
  }
  ```
'''
tags: [
  "PocketGem"
  "PriorityQueue"
  "Deque"
  "Sliding_Window"
]
isStarred: false
isTrashed: false
