type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Remove Duplicate 系列"
content: '''
  # Remove Duplicate 系列
  ### Move Zeros (or any value)
  Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.
  ```java
  public void moveZeroes(int[] nums) {
          // write your code here
          if(nums == null || nums.length == 0){
              return;
          }
          int slow = 0; 
  		int fast = 0;
          while(right < nums.length){
              //如果右指针碰到0,继续走
              if(nums[fast] == 0){
                  fast++;
              } else {
                  //右指针不是0，跟左指针换，左右指针各走一格
  				//交换是为了把 0 都换到右边，如果不需要保留 0，直接赋值(nums[slow] = nums[fast])就行了
                  int temp = nums[slow];
                  nums[slow] = nums[fast];
                  nums[fast] = temp;
                  slow++;
                  fast++;
              }
          }
      }
  ```
  ### Remove Duplicate in Array
  不要求保持原来顺序，只需要不重复的数在数组前面就行了
  ```java
  public class Solution {
      /**
       * @param nums an array of integers
       * @return the number of unique integers
       */
      public int deduplication(int[] nums) {
          // Write your code here
          if(nums == null || nums.length == 0){
              return 0;
          }
          Arrays.sort(nums);
          int slow = 0;
          int fast = 0;
          while(fast < nums.length){
  			//如果右指针碰到重复数,继续走
              if(nums[fast] == nums[slow]){
                  fast++; 
              } else {
  				//右指针不是重复数，左指针的下一位替换，左右指针各走一格
  				//slow指针永远指向非重复数 subArray 的最后一位
  				nums[++slow] = nums[fast]; 
  				fast++;
  			}
          }
          return slow + 1;
      }
  }
  ```
  ### Remove Duplicate in Array II
  Duplicate are allowed at most twice
  ```java
  public int removeDuplicates(int[] nums) {
          // write your code here
          if(nums == null || nums.length == 0){
              return 0;
          }
          int slow = 0;
          int fast = 1; //right 从 1 开始
          int count = 1; //增加一个count，从 1 开始
          while(fast < nums.length){
              if(nums[fast] == nums[slow]){
                  if(count < 2){ //当不足两次时，替换左指针，两指针都向右移动
  					//这一步是因为此时左指针的下一个数并不一定等于右指针当前所指的数
  					//1 1 1 1 2 2 3
                      nums[++slow] = nums[fast]; 
  					fast++;
                      count++;
                  } else {  //只有当重复数出现大于两次时，右指针跳过重复数
                      fast++;
                  }
              } else {
                  nums[++slow] = nums[fast];
  				fast++;
                  count = 1; //重置count
              }
          }
          return slow + 1;
      }
  ```
  ### Remove Duplicate in List
  Given `1->2->3->3->4->4->5`, return `1->2->3->4->5`.
  ```java
  //完全模仿Array的做法
  public ListNode deleteDuplicates(ListNode head) {
          // write your code here
          if(head == null){
              return head;
          }
          ListNode left = head, right = head;
          while(right != null){
              if(left.val == right.val){
                  right = right.next;
              } else {
                  left = left.next;
                  left.val = right.val;
                  right = right.next;
              }
          }
          left.next = null;
          return head;
      }
      
  //直接删除重复点的做法
  public ListNode deleteDuplicates(ListNode head) {
          // write your code here
          if(head == null){
              return head;
          }
          ListNode curr = head;
          while(curr.next != null){
              if(curr.val == curr.next.val){
  				// 一定要注意，删除节点后curr已经指向了下一个节点，不需要再curr = curr.next
                  curr.next = curr.next.next;
              } else {
                  curr = curr.next; 
              }
          }
          return head;
      }
  ```
  ### Remove Duplicate in List II
  Given `1->2->3->3->4->4->5`, return `1->2->5`.
  ```java
  public ListNode deleteDuplicates(ListNode head) {
          // write your code here
          if(head == null || head.next == null){
              return head;
          }
          ListNode dummy = new ListNode(0), curr = dummy;
          dummy.next = head;
          while(curr.next != null && curr.next.next != null){
              if(curr.next.val == curr.next.next.val){
                  int val = curr.next.val;
                  while(curr.next != null && curr.next.val == val){
                      curr.next = curr.next.next;
                  }
              } else {
                  curr = curr.next;
              }
          }
          return dummy.next;
      }
  ```
  ### Remove Element
  Given an array and a value, remove all occurrences of that value in place and return the new length.
  
  The order of elements can be changed, and the elements after the new length don't matter.
  ```java
  public int removeElement(int[] A, int elem) {
          // write your code here
          if(A == null || A.length == 0){
              return 0;
          }
          int left = 0;
          int right = A.length - 1;
          while(left < right){
              while(left < right && A[left] != elem){
                  left++;
              }
              while(left < right && A[right] == elem){
                  right--;
              }
              if(left < right){
                  int temp = A[left];
                  A[left] = A[right];
                  A[right] = temp;
                  left++;
                  right--;
              }
          }
          //最后 left 指向的数可能等于或不等于 elem
          if(A[left] == elem){
              return left;
          }
          return left + 1;
      }
      ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-06T18:18:09.235Z"
updatedAt: "2017-12-29T20:07:26.131Z"
