type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Rorate LinkedList"
content: '''
  # Rorate LinkedList
  Given a list, rotate the list to the right by k places, where k is non-negative.
  Given `1->2->3->4->5` and k = `2`, return `4->5->1->2->3`.
  ```java
  public class Solution {
      /**
       * @param head: the List
       * @param k: rotate to the right k places
       * @return: the list after rotation
       */
      public ListNode rotateRight(ListNode head, int k) {
          // write your code here
          if(head == null){
              return head;
          }
          int length = getLength(head);
          k %= length;
          ListNode dummy = new ListNode(0);
          dummy.next = head;
          head = dummy;
          ListNode tail = head;
          for(int i = 0; i < k; i++){
              head = head.next;
          }
          while(head.next != null){
              head = head.next;
              tail = tail.next;
          }
          head.next = dummy.next;
          dummy.next = tail.next;
          tail.next = null;
          return dummy.next;
          
      }
      private int getLength(ListNode head){
          int length = 0;
          while(head != null){
              length++;
              head = head.next;
          }
          return length;
      }
  }
  ```
  ```java
  public class Solution {
      /*
       * @param head: the List
       * @param k: rotate to the right k places
       * @return: the list after rotation
       */
      public ListNode rotateRight(ListNode head, int k) {
          // write your code here
          if(head == null){
              return null;
          }
          ListNode dummy = new ListNode(0), curr = dummy;
          dummy.next = head;
          int len = 0;
          while(curr.next != null){
              len++;
              curr = curr.next;
          }
          ListNode tail = curr;
          curr = dummy;
          k = k % len;
          for(int i = 0; i < len - k; i++){
              curr = curr.next;
          }
          tail.next = head;
          head = curr.next;
          curr.next = null;
          return head;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-12-21T01:29:57.034Z"
updatedAt: "2017-12-21T01:50:39.670Z"
