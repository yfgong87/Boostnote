type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Add Two numbers"
content: '''
  # Add Two numbers
  ### Two Number stored in `LinkedList`
  #### `6 -> 1 -> 7` = `716`
  Time: `O(n + m)` since we need to go through every node until both list reach null
  Space: `max(n,m) + 1` to store the new LinkedList
  ```java
  public class Solution {
      /*
       * @param l1: the first list
       * @param l2: the second list
       * @return: the sum list of l1 and l2 
       */
      public ListNode addLists(ListNode l1, ListNode l2) {
          // write your code here
          ListNode dummy = new ListNode(0), curr = dummy;
          int carry = 0;
          while(l1 != null || l2 != null){
              int sum = 0;
              if(l1 != null){
                  sum += l1.val;
                  l1 = l1.next;
              }
              if(l2 != null){
                  sum += l2.val;
                  l2 = l2.next;
              }
              sum += carry;
              carry = sum / 10;
              ListNode newNode = new ListNode(sum % 10);
              curr.next = newNode;
              curr = curr.next;
          }
          if(carry != 0){
              curr.next = new ListNode(carry);
          }
          return dummy.next;
      }
  }
  ```
  #### `6 -> 1 -> 7` = `617`
  Time: 
  - `O(n) + O(m)` to reverse both list, `O(n + m)` to add, `O(n + m)` to reverse the final answer.
  - `O(n + m)` in total
  ```java
  public class Solution {
      /*
       * @param l1: The first list.
       * @param l2: The second list.
       * @return: the sum list of l1 and l2.
       */
      public ListNode addLists2(ListNode l1, ListNode l2) {
          // write your code here
          l1 = reverse(l1);
          l2 = reverse(l2);
          return reverse(addLists(l1, l2));
      }
      
      public ListNode reverse(ListNode head){
          ListNode prev = null;
          while(head != null){
              ListNode temp = head.next;
              head.next = prev;
              prev = head;
              head = temp;
          }
          return prev;
      }
      
      public ListNode addLists(ListNode l1, ListNode l2) {
          // write your code here
          int x = 0;
          int y = 0;
          int sum = 0;
          int carry = 0;
          ListNode dummy = new ListNode(0), curr = dummy;
          while(l1 != null || l2 != null){
              if(l1 == null){
                  x = 0;
              } else {
                  x = l1.val;
              }
              if(l2 == null){
                  y = 0;
              } else {
                  y = l2.val;
              }
              sum = x + y + carry;
              carry = sum / 10;
              curr.next = new ListNode(sum % 10);
              if(l1 != null){
                  l1 = l1.next;
              }
              if(l2 != null){
                  l2 = l2.next;
              }
              curr = curr.next;
          }
          if(carry != 0){
              curr.next = new ListNode(carry);
          }
          return dummy.next;
      }
  }
  ```
  ### Two `binary` number stored in `String`
  a = `"11"`
  b = `"1"`
  Return `"100"`.
  ```java
  class Solution {
      public String addBinary(String a, String b) {
          StringBuilder sb = new StringBuilder();
          int i = a.length() - 1;
          int j = b.length() - 1;
          int carry = 0;
          while(i >= 0 || j >= 0){
              int sum = 0;
              if(i >= 0){
                  sum += a.charAt(i) - '0';
                  i--;
              }
              if(j >= 0){
                  sum += b.charAt(j) - '0';
                  j--;
              }
              sum += carry;
              carry = sum / 2;
              sb.insert(0, sum % 2);
          }
          if(carry != 0){
              sb.insert(0, carry);
          }
          return sb.toString();
      }
  }
  ```
  ### Plus One
  Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.
  You may assume the integer do not contain any leading zero, except the number 0 itself.
  The digits are stored such that the most significant digit is at the head of the list.
  ```java
  class Solution {
      // {1,2,3} = 123
      public int[] plusOne(int[] digits) {
          int carry = 1;
          for(int i = digits.length - 1; i >= 0; i--){
              int sum = digits[i] + carry;
              carry = sum / 10;
              digits[i] = sum % 10;
              if(carry == 0){
                  break;
              } 
          }
          if(carry == 1){
              digits = new int[digits.length + 1];
              digits[0] = 1;
          }
          return digits;
      }
  }
  ```
  ### Plus One LinkedList
  新建一个List
  ```java
  class Solution {
      public ListNode plusOne(ListNode head) {
          ListNode dummy = new ListNode(0), curr = dummy;
          head = reverse(head);
          int carry = 1;
          while(head != null){
              int sum = head.val + carry;
              carry = sum / 10;
              curr.next = new ListNode(sum % 10);
              curr = curr.next;
              head = head.next;
          }
          if(carry == 1){
              curr.next = new ListNode(1);
          }
          return reverse(dummy.next);
      }
      
      public ListNode reverse(ListNode head){
          ListNode prev = null;
          while(head != null){
              ListNode temp = head.next;
              head.next = prev;
              prev = head;
              head = temp;
          }
          return prev;
      }
  }
  ```
'''
tags: [
  "LinkedList"
  "Math"
  "Linkedin"
]
isStarred: false
isTrashed: false
createdAt: "2017-10-24T23:51:25.050Z"
updatedAt: "2018-01-23T04:51:46.208Z"
