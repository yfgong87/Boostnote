type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Convert sorted Array to BST"
content: '''
  # Convert sorted Array to BST
  Given an array where elements are sorted in ascending order, convert it to a `height balanced` BST.
  
  For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
  
  For a height balanced tree, the root node is always the middle number in a sorted list. So find the mid first, assign it as the root, then recursion to its left and right subtree. 
  ```java
  class Solution {
      public TreeNode sortedArrayToBST(int[] nums) {
          if(nums == null || nums.length == 0){
              return null;
          }
          return helper(nums, 0, nums.length - 1);
      }
      
      public TreeNode helper(int[] nums, int start, int end){
          if(start > end){
              return null;
          }
          int mid = start + (end - start) / 2;
          TreeNode root = new TreeNode(nums[mid]);
          root.left = helper(nums, start, mid - 1);
          root.right = helper(nums, mid + 1, end);
          return root;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-12-13T16:19:12.355Z"
updatedAt: "2017-12-13T16:20:47.793Z"
