type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Convert sorted Array to BST"
content: '''
  ### Convert sorted Array to BST
  Given an array where elements are sorted in ascending order, convert it to a `height balanced` BST.
  
  For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
  
  ### Solution:
  For a height balanced tree, the root node is always the middle number in a sorted list. So find the mid first, assign it as the root, then recursion to its left and right subtree. 
  
  ### Complexity
  Time complexity: `O(n)`，`T(n) = 2 * T(n / 2) + O(1)`
  Space complexity: `O(logn)`
  ```java
  class Solution {
      public TreeNode sortedArrayToBST(int[] nums) {
          if(nums == null || nums.length == 0){
              return null;
          }
          return helper(nums, 0, nums.length - 1);
      }
      
  	// start 和 end 是 inclusive 的
      public TreeNode helper(int[] nums, int start, int end){
  		// 注意递归的出口，如果用 start == end 会导致 Stack Overflow
          if(start > end){
              return null;
          }
          int mid = start + (end - start) / 2;
          TreeNode root = new TreeNode(nums[mid]);
          root.left = helper(nums, start, mid - 1);
          root.right = helper(nums, mid + 1, end);
          return root;
      }
  }
  ```
  ### Convert Sorted List to BST
  `T(n) = 2 * T(n / 2) + O(n)`
  Time complexity: `O(nlogn)`因为 `getMid` 的原因，每一次 recursion 都要 traverse 整个树
  Space complexity：`O(logn)`
  ```java
  public class Solution {
      /*
       * @param head: The first node of linked list.
       * @return: a tree node
       */
      public TreeNode sortedListToBST(ListNode head) {
          // write your code here
          return helper(head, null);
      }
      
      public TreeNode helper(ListNode head, ListNode tail){
          if(head == tail){
              return null;
          }
          ListNode slow = head;
          ListNode fast = head.next;
  		// 注意是以 tail 为结束点
          while(fast != tail && fast.next != tail){
              slow = slow.next;
              fast = fast.next.next;
          }
          TreeNode root = new TreeNode(slow.val);
          TreeNode left = helper(head, slow);
          TreeNode right = helper(slow.next, tail);
          root.left = left;
          root.right = right;
          return root;
          
      }
  }
  ```
'''
tags: [
  "Binary_Tree"
  "Array"
  "LinkedList"
]
isStarred: false
isTrashed: false
createdAt: "2017-12-13T16:19:12.355Z"
updatedAt: "2018-01-08T02:18:51.458Z"
