type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Generate Parenthesis"
content: '''
  # Generate Parenthesis
  Solution:
  - For every character so far, we have two options, go left or go right, which means we could either choose `"("` or `")"`. We need to recursively select either left or right bracket.
  - Our extreme case would be we select `2n` `"("` or `")"`. So the max depth of recursion tree will be `2n`
  - However there are rules that we need to follow:
  	- At any level, we always need to have more left than right bracket
  	- Which means whenever we have `n` left bracket and `n` right bracket we need to stop recursion and return the answer. We need to keep a count on how many left and right bracket we have already
  - Demo
  - We found that we actually skipped half of our recursion tree due to the rule that right bracket cannot go first
  
  Time Complexity:
  树的层数为`2n`，每一层有`2`种可能的选择，复杂度为`2^2n`，由于规则有一半的可能性不成立，最终复杂度为`1/2 * 2^2n`
  ```java
  public class Solution {
      /*
       * @param n: n pairs
       * @return: All combinations of well-formed parentheses
       */
  	// n = 2
      //         (          )
      //     ((    ()       
      // (()     ()(
      //(())     ()()
      public ArrayList<String> generateParenthesis(int n) {
          ArrayList<String> result = new ArrayList<String>();
          if (n <= 0) {
              return result;
          }
          dfs(result, "", 0, 0, n);
          return result;
      }
      
  	public void dfs(ArrayList<String> result,
  	                   String solution, // current paren
  	                   int left,     	// how many left paren we have
  	                   int right,   	// how many right paren we have
  	                   int n) {  
  		//Invalid if having more ")" than "("
  		if(left < right){
  		    return;
  		}
  		
  		if (left == n && right == n) {
  			result.add(solution);
  			return;
  		}
  
          if (left < n) {
  		    dfs(result, solution + "(", left + 1, right, n);
          }
          
          if (right < n) {
  		    dfs(result, solution + ")", left, right + 1, n);
          }
  	}
  }
  ```
'''
tags: [
  "DFS"
  "Backtracking"
]
isStarred: false
isTrashed: false
createdAt: "2017-12-17T17:17:29.088Z"
updatedAt: "2018-01-22T20:40:09.103Z"
