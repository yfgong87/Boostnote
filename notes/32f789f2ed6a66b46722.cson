type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Generate Parenthesis"
content: '''
  # Generate Parenthesis
  For every character so far, we have two options, go left or go right, which means we could either "(" or ")". Our base case should be either we have 2n "(" or ")". So we have 2n levels, it is a geometric progression. Then you will get the result O(2^2n). However, for this problem, we only need to consider half of the whole because when we have n "(" or ")" then we reach to the level our result. So generally we can add 1/2 as a factor to the 2^2n, but our time complexity is still `O(2^2n)` level. Hope this will help you understand.
  ```java
  public class Solution {
      /*
       * @param n: n pairs
       * @return: All combinations of well-formed parentheses
       */
      public ArrayList<String> generateParenthesis(int n) {
          ArrayList<String> result = new ArrayList<String>();
          if (n <= 0) {
              return result;
          }
          dfs(result, "", 0, 0, n);
          return result;
      }
      
  	public void dfs(ArrayList<String> result,
  	                   String solution, // current paren
  	                   int left,     	// how many left paren we have
  	                   int right,   	// how many right paren we have
  	                   int n) {  
  		//Invalid if having more ")" than "("
  		if(left < right){
  		    return;
  		}
  		
  		if (left == n && right == n) {
  			result.add(solution);
  			return;
  		}
  
          if (left < n) {
  		    dfs(result, solution + "(", left + 1, right, n);
          }
          
          if (right < n) {
  		    dfs(result, solution + ")", left, right + 1, n);
          }
  	}
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-12-17T17:17:29.088Z"
updatedAt: "2017-12-17T21:14:50.171Z"
