type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Topological Sorting"
content: '''
  # Topological Sorting
  ### 经典拓扑排序
  `O(V + E)`
  ```java
  /**
   * Definition for Directed graph.
   * class DirectedGraphNode {
   *     int label;
   *     ArrayList<DirectedGraphNode> neighbors;
   *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
   * };
   */
  public class Solution {
      /**
       * @param graph: A list of Directed graph node
       * @return: Any topological order for the given graph.
       */    
      public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
          // write your code here
          ArrayList<DirectedGraphNode> results = new ArrayList<DirectedGraphNode>();
          if(graph == null || graph.size() == 0){
              return results;
          }
          //map存的是<node, degree>
          HashMap<DirectedGraphNode, Integer> map = new HashMap<DirectedGraphNode, Integer>();
          //将图中所有点放入map，同时对每个优先级低的node，其degree++
          for(DirectedGraphNode n : graph){
              if(!map.containsKey(n)){
                  map.put(n, 0);
              }
              for(DirectedGraphNode neighbor : n.neighbors){
                  if(!map.containsKey(neighbor)){
                      map.put(neighbor, 0);
                  }
                  map.put(neighbor, map.get(neighbor) + 1);
              }
          }
          //遍历图，找到任意一个degree为0的node作为起始点
          Queue<DirectedGraphNode> queue = new LinkedList<DirectedGraphNode>();
          for(DirectedGraphNode n : graph){
              if(map.get(n) == 0){
                  queue.offer(n);
              }
          }
          //BFS，找到起点的所有下一级点，其degree--，一旦减到0，将点放入queue
          while(!queue.isEmpty()){
              DirectedGraphNode head = queue.poll();
              results.add(head);
              for(DirectedGraphNode neighbor : head.neighbors){
                  map.put(neighbor, map.get(neighbor) - 1);
                  if(map.get(neighbor) == 0){
                      queue.offer(neighbor);
                  }
              }
          }
          return results;
      }
  }
  ```
  ### Six degrees
  ```java
  public class Solution {
      /*
       * @param graph: a list of Undirected graph node
       * @param s: Undirected graph node
       * @param t: Undirected graph nodes
       * @return: an integer
       */
      public int sixDegrees(List<UndirectedGraphNode> graph, UndirectedGraphNode s, UndirectedGraphNode t) {
          // write your code here
          if(s == t){
              return 0;
          }
          Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
          Set<UndirectedGraphNode> set = new HashSet<>();
          queue.offer(s);
          set.add(s);
          int degree = 0;
          while(!queue.isEmpty()){
              degree++;
              int size = queue.size();
              for(int i = 0; i < size; i++){
                  UndirectedGraphNode head = queue.poll();
  				if(set.contains(head)){
                          continue;
                      }
  				set.add(head);
                  for(UndirectedGraphNode neighbor : head.neighbors){
                      /*判断重复可以放在内层循环，也可以放在外层循环
  					if(set.contains(neighbor)){
                          continue;
                      }
  					set.add(neighbor);
  					*/
                      if(neighbor.label == t.label){
                          return degree;
                      }
                      queue.offer(neighbor);
                  }
              }
              
          }
          return -1;
      }
  }
  ```
  
  ### Connected Component in Undirected Graph
  ```java
  public class Solution {
      /**
       * @param nodes a array of Undirected graph node
       * @return a connected set of a Undirected graph
       */
      public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {
          // Write your code here
          List<List<Integer>> results = new ArrayList<>();
          Set<UndirectedGraphNode> set = new HashSet<>();
          Queue<UndirectedGraphNode> queue = new LinkedList<>();
          for(UndirectedGraphNode n : nodes){
              if(set.contains(n)){
                  continue;
              }
              set.add(n);
              queue.offer(n);
              List<Integer> connection = new ArrayList<>();
              while(!queue.isEmpty()){
                  UndirectedGraphNode head = queue.poll();
                  connection.add(head.label);
                  for(UndirectedGraphNode neighbor : head.neighbors){
                      if(set.contains(neighbor)){
                          continue;
                      }
                      set.add(neighbor);
                      queue.offer(neighbor);
                  }
              }
              Collections.sort(connection);
              results.add(connection);
          }
          return results;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-17T02:20:51.205Z"
updatedAt: "2017-12-21T21:34:42.564Z"
