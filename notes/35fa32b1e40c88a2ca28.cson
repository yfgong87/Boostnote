type: "MARKDOWN_NOTE"
folder: "c7615b6dcc7b2832aa16"
title: "Interface"
content: '''
  # Interface
  - `Interface`里所有的方法默认是`public`
  - `Interface`里所有的方法不需要实现(`Java8`之后允许实现，叫做`default`方法)
  - `Interface`里的所有变量都是`常量`，不能定义`变量`
  ```java
  interface Drivable{
    double PI = 3.14; //field in interface is CONSTANT and FINAL
    int getWheel();//public abstract is the default modifier
  } 
  public class Car implements Drivable{
    //RULE 1: must define EVERYTHING in interface
    //RULE 2: method MUST NOT be more restrictive than original method in interface
    public int getWheel();
  }
  ```
  ### Abstract Class & Methods
  - `Abstract` `class` is one which can't be instantiated, i.e. its object cannot be created.
  - `Abstract` `method` are method's declaration without its definition.
  - A `Non-abstract` `class` can only have `Non-abstract` `methods`.
  - An `Abstract` `class` can have both the `Non-abstract` as well as `Abstract` `methods`.
  - If the `Class` has an `Abstract` `method` then the `class` must also be `Abstract`.
  - An `Abstract` `method` must be `implemented` by the very first `Non-Abstract` `sub-class`.
  - `Abstract` `class` in Design patterns are used to encapsulate the behaviors that keeps changing.
  
  ### Abstract Class vs Interface
  - Type of methods: Interface can have ONLY `abstract` methods. Abstract class can have `abstract` and `non-abstract` methods. From Java 8, it can have `default` and `static` methods also.
  - Final Variables: Variables declared in a Java interface are by default `final`. An abstract class may contain `non-final` variables.
  - Type of variables: Abstract class can have final, non-final, static and non-static variables. Interface has only static and final variables.
  - Implementation: Abstract class can provide the implementation of interface. Interface can’t provide the implementation of abstract class.
  - Inheritance vs Abstraction: A Java interface can be implemented using keyword “implements” and abstract class can be extended using keyword “extends”.
  - Multiple implementation: An interface can extend another Java interface only, an abstract class can extend another Java class and implement multiple Java interfaces.
  - Accessibility of Data Members: Members of a Java interface are `public` by default. A Java abstract class can have class members like `private`, `protected`, etc.
  
  ### Interface (`implements`) vs Superclass (`extends`)
  - Use an `interface`/`implements` if you want to define a `contract/default behavior`. I.e. X must take Y and return Z. It doesn't care how the code is doing that. 
  - A `class` can `implements` `MANY` `interface`.
  - Use an `abstract` `class` if you want to define default behaviour in non-abstract methods so that the endusers can reuse it without rewriting it again and again. 
  - A `class` can `extends` from only `ONE` other `class`. 
  - `abstract` `class` with only `abstract` `methods` = `interface`. 
  
  ### Why use Interface when having Superclass?
  In short: You can implement `MANY` interfaces, but you can only inherit `ONE` class.
  [Nice Explaination on stackOverFlow](https://stackoverflow.com/questions/27777641/why-should-we-use-interface-if-we-can-simply-override-methods-of-the-superclass)
  - In short, to prevent `Diamond Problem` when inheriting can cause confusion
  ![diamond](https://i.stack.imgur.com/9q1gh.png)
  - Simply, if a class, `D` inherits from two classes `B` and `C`, and `B` and `C` both inherit from the same class `A`, which implementation of the methods from `A` does `D` get?
  - `interface` does NOT allow modification of its method, but a class can `implements` `MANY` `interface` to acquire desired function
  - `subclass` can modify or add method from `superclass`, but a `subclass` can `extends` `ONLY ONE` `superclass`
  
  ### How to implement an interface?
  ```java
  //Method 1 
  ArrayList<List<Integer>> list = new ArrayList<List<Integer>>();
  //Method 2
  List<List<Integer>> list = new ArrayList<List<Integer>>();
  //Method 3, not recommended
  List<List<Integer>> list = new ArrayList<>();
  //WRONG, Incompatible type error
  List<List<Integer>> list = new ArrayList<ArrayList<Integer>>();
  //WRONG, you can NEVER "new" an interface
  List<List<Integer>> list = new List<ArrayList<Integer>>();
  ```
  
  ### Can Interface be overriden?
  - Interface can be implemented. Implementing is a specific type of overriding, where the overridden method is abstract and the overriding method is not.
  - In java 8, there is a concept of default method for interfaces. Now we can provide a default definition to each method. If the class implementing interface does not overide some method, its default definition provided in the interface get executed.
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-12T16:38:38.775Z"
updatedAt: "2018-01-23T17:57:23.602Z"
