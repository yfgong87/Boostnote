type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Search in Rotated Sorted Array"
content: '''
  # Search in Rotated Sorted Array
  `Target`和`nums[mid]`在同一边和不同边
  Follow up: 有重复数
  因为重复的出现，如果我们遇到中间和边缘相等的情况，那么我们就不能判断哪边有序，所以只能一步一步的移动边缘，直到边缘和中间不相等或者相遇。那么如果整个数组中只有两个元素。并且需要查找的数唯一，就有可能每次移动一步，那么时间复杂度就退化为O(n)了
  ```java
  	//        /|			
  	//		 / |  
  	//	____/  |   _____ 
  	//    A[0] |  /
  	//		   | /
  	//		   |/
  ```
  ```java
  public class Solution {
      /** 
       *@param A : an integer rotated sorted array
       *@param target :  an integer to be searched
       *return : an integer
       */
  	//        /|			
  	//		 / |  
  	//		/__|___ 
  	//    A[0] |  /
  	//		   | /
  	//		   |/
  	//
  
      public int search(int[] A, int target) {
          // write your code here
          //handle exceptions
          if (A.length == 0 || A == null){
              return -1;
          }
          //initiate pointer
          int start = 0;
          int end = A.length - 1;
          //binary search
          while (start + 1 < end){
              int mid = start + (end - start) / 2;
              if (target < A[0] && A[mid] > A[0]){
                  start = mid; // if target is on left segment, mid on right segment
              // 注意！ target >= A[0] 代表 target 在左边，"=" 不能漏
  			} else if (target >= A[0] && A[mid] < A[0]){ 
                  end = mid; // if target is on right segment, mid on left segment
              } else{ //target and mid on same segment, 如果 array 没有 rotate 也是在这里处理
                  if (A[mid] < target){
                      start = mid;
                  } else{
                      end = mid;
                  }
              }
          }
          if (A[start] == target){
              return start;
          }
          if (A[end] == target){
              return end;
          } 
          return -1;
      }
  }
  ```
  
  # Find Minimum in Rotated Sorted Array
  ```java
  public class Solution {
      /**
       * @param nums: a rotated sorted array
       * @return: the minimum number in the array
       */
      public int findMin(int[] nums) {
          // write your code here
          if(nums == null || nums.length == 0){
              return -1;
          }
  		// 如果根本没有 Rotate，直接返回第一个数
          if(nums[0] <= nums[nums.length - 1]){
              return nums[0];
          }
          int start = 0;
          int end = nums.length - 1;
          while(start + 1 < end){
              int mid = start + (end - start) / 2;
              if(nums[mid] >= nums[0]){
                  start = mid;
              } else {
                  end = mid;
              }
          }
          return Math.min(nums[start], nums[end]);
      }
  }
  ```
'''
tags: [
  "Binary_Search"
]
isStarred: false
isTrashed: false
createdAt: "2017-09-07T23:36:53.338Z"
updatedAt: "2018-01-03T19:47:59.944Z"
