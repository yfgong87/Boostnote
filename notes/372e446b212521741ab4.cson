createdAt: "2018-01-13T03:31:39.695Z"
updatedAt: "2018-01-13T03:34:01.519Z"
type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Last Position of Target"
content: '''
  ### Last Position of Target
  ```java
  public class Solution {
      /*
       * @param nums: An integer array sorted in ascending order
       * @param target: An integer
       * @return: An integer
       */
      public int lastPosition(int[] nums, int target) {
          // write your code here
          if(nums == null || nums.length == 0){
              return -1;
          }
          int start = 0;
          int end = nums.length - 1;
          int mid;
          while(start + 1 < end){
              mid = start + (end - start) / 2;
              if(nums[mid] < target){
                  start = mid;
              } else if (nums[mid] > target){
                  end = mid;
              } else {
                  start = mid; // 相等时只移动 start，保证后出现的 target 不被漏掉
              }
          }
  		// 先检查 end，再检查 start
          if(nums[end] == target){
              return end;
          }
          if(nums[start] == target){
              return start;
          }
          return -1;
          
      }
  }
  ```
  ### First Position of Target
  ```java
  public class Solution {
      /*
       * @param nums: An integer array sorted in ascending order
       * @param target: An integer
       * @return: An integer
       */
      public int binarySearch(int[] nums, int target) {
          // write your code here
          if(nums == null || nums.length == 0){
              return -1;
          }
          int start = 0;
          int end = nums.length - 1;
          int mid = 0;
          while (start + 1 < end){
              mid = start + (end - start) / 2;
              if(nums[mid] < target){
                  start = mid;
              } else if(nums[mid] == target){
                  end = mid;
              } else {
                  end = mid; // 相等时只移动 end，保证先出现的 target 不被漏掉
              }
          }
  		// 先检查 start，再检查 end
          if(nums[start] == target){
              return start;
          }
          if(nums[end] == target){
              return end;
          }
          return -1;
      }
  }
  ```
'''
tags: [
  "Binary_Search"
]
isStarred: false
isTrashed: false
