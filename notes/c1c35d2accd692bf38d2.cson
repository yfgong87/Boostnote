createdAt: "2018-01-22T21:15:06.412Z"
updatedAt: "2018-01-22T21:33:48.746Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Maximum Product Subarray"
content: '''
  # Maximum Product Subarray
  Solution:
  - We can keep a running Product in an array. If there are negative numbers in the nums array, then we even need to keep two running Products, one for the maximum product we can get up to index i, the other for the minimum product, because if number is negative, `number * old Min` could be the new max, or if number if positive, `number * old Max` could be the new max. We also need to add the number itself into the comparison, because the old Min or Max could be `0`, or `-1`
  
  Time Complexity: `O(n)`
  
  ```java
  // {2,3,-2,4}
  // oldMin = 2; oldMax = 2; min = 2; max = 2;
  // oldMin = 3; oldMax = 6; min = 3; max = 6;
  // oldMin = -12; oldMax = -2; min = -12; max = -2;
  // oldMin = -48; oldMax = 4; min = -48; max = 4;
  //
  // return 6
  public int maxProduct(int[] nums) {
          // write your code here
          if(nums == null || nums.length == 0){
              return 0;
          }
          int oldMin = nums[0];
          int oldMax = nums[0];
          int min = nums[0];
          int max = nums[0];
          int result = nums[0];
  		// 注意从 1 开始循环
          for(int i = 1; i < nums.length; i++){
              //要和 oldMin 和 oldMax 分别乘
              //因为当 nums[i] 和 oldMin 都为负时， oldMin * nums[i] 可能为最大乘积
  			//同理当 nums[i] 和 oldMax 一正一负时，oldMax * nums[i] 可能为最小值
              //一定记得跟自己(nums[i])比, 因为 oldMin/oldMax 可能为 0，或 -1
              min = Math.min(nums[i], Math.min(nums[i] * oldMin, nums[i] * oldMax));
              max = Math.max(nums[i], Math.max(nums[i] * oldMin, nums[i] * oldMax));
              result = Math.max(result, max);
              oldMin = min;
              oldMax = max;
          }
          return result;
      }
  ```
'''
tags: [
  "Linkedin"
  "prefixSum"
]
isStarred: false
isTrashed: false
