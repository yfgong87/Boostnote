type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Word Search"
content: '''
  # Word Search
  ```java
  public class Solution {
      /*
       * @param board: A list of lists of character
       * @param word: A string
       * @return: A boolean
       */
      class Point{
          int x;
          int y;
          Point(int x, int y){
              this.x = x;
              this.y = y;
          }
      }
      public boolean exist(char[][] board, String word) {
          // write your code here
          if(board.length == 0 || board[0].length == 0){
              return false;
          }
          if(word.length() == 0){
              return true;
          }
          for(int i = 0; i < board.length; i++){
              for(int j = 0; j < board[0].length; j++){
                  //第一个字母相同就继续做
                  if(board[i][j] == word.charAt(0)){
                      boolean exist = dfs(board, word, new Point(i, j), 0);
                      if(exist){
                          return true;
                      }
                  }
              }
          }
          return false;
      }
      
      int[] directionX = new int[]{0, 0, 1, -1};
      int[] directionY = new int[]{1, -1, 0, 0};
      public boolean dfs (char[][] board,
                       String word,
                       Point p,
                       int index){
          //递归出口1
          if(index == word.length()){
              return true;
          }
          //递归出口2：出界或者字母不等
          if(!inBound(board, p) || board[p.x][p.y] != word.charAt(index)){
              return false;
          }
          //标记已经走过的点
          board[p.x][p.y] = '$';
          boolean result = false;
          for(int i = 0; i < 4; i++){
              Point adj = new Point(p.x + directionX[i], p.y + directionY[i]);
              //四个方向任意一个方向发现了word就return true
              result = result || dfs(board, word, adj, index + 1);
          }
          //backtracking
          board[p.x][p.y] = word.charAt(index);
          return result;
      }
      
      public boolean inBound(char[][] board, Point a){
          return a.x >= 0 && a.x < board.length && a.y >= 0 && a.y < board[0].length;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-02T23:40:29.386Z"
updatedAt: "2017-10-02T23:43:04.792Z"
