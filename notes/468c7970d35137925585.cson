type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Binary Tree Vertical Order Traversal"
content: '''
  # Binary Tree Vertical Order Traversal
  Given binary tree {3,9,20,#,#,15,7}
  
  	   3
  	  / \\
  	 9  20
  	    / \\
  	  15   7
    
  Return its vertical order traversal as:
  `[[9],[3,15],[20],[7]]`
  
  Given binary tree {3,9,8,4,0,1,7}
  
  	     3
  	    / \\
  	   9   8
  	  / \\ / \\
  	 4  0 1  7
  	 
  Return its vertical order traversal as:
  `[[4],[9],[3,0,1],[8],[7]]`
  
  ### Summary
  Assign a label to every node in the tree based on their relative horizontal position vs the root. The root is `0`, its left child is `-1`, its right child is `1`, etc.
  Level Order Traversal the Tree and put every node into a `HashMap` under the key of its label. The `HashMap` will be storing `<index, list of TreeNode value with the same index>`
  Sort the `HashMap` based on its key from small to large, then print
  ```java
  class type{
          int index;
          TreeNode node;
          type(int index, TreeNode node){
              this.index = index;
              this.node = node;
          }
      }
      public List<List<Integer>> verticalOrder(TreeNode root) {
          // write your code here
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          if(root == null){
              return results;
          }
          //<index, List of TreeNode of level order>
          Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
          Queue<type> queue = new LinkedList<type>();
          queue.offer(new type(0, root));
          while(!queue.isEmpty()){
              type head = queue.poll();
              if(!map.containsKey(head.index)){
                  map.put(head.index, new ArrayList<Integer>());
              }
              map.get(head.index).add(head.node.val);
              if(head.node.left != null){
                  queue.offer(new type(head.index - 1, head.node.left));
              }
              if(head.node.right != null){
                  queue.offer(new type(head.index + 1, head.node.right));
              }
          }
          for(int i = Collections.min(map.keySet()); i <= Collections.max(map.keySet()); i++){
              results.add(map.get(i));
          }
          return results;
      }
      ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-27T17:38:48.601Z"
updatedAt: "2017-12-11T04:33:16.336Z"
