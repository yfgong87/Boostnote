type: "MARKDOWN_NOTE"
folder: "c7615b6dcc7b2832aa16"
title: "Primitive Value & Object Classes"
content: '''
  # Primitive Value & Object Classes
  ### Compare primitive vs Compare object
  - To compare two primitive, use `==`;
  - To compare object, if use `==`, will compare their address. For `String`, use `.equal()` instead;
  ### radix
  - In the system with radix 13, for example, a string of digits such as 398 denotes the number 3 × 13<sup>2</sup> + 9 × 13<sup>1</sup> + 8 × 13<sup>0</sup>.
  ### primitive types
  ---
  - Primitive value does not have a refence variable, unlike objects, they cannot be shared.
  ---
  - `byte` data type is an 8-bit signed two's complement integer.
  - Minimum value is -128 (-2^7)
  - Maximum value is 127 (inclusive)(2^7 -1)
  - Default value is 0
  - Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an integer.
  - Example: byte a = 100, byte b = -50
  ---
  - `short` data type is a 16-bit signed two's complement integer
  - `int` data type is a 32-bit signed two's complement integer.
  - `long` data type is a 64-bit signed two's complement integer
  ---
  - `float` is represented in 32 bits, with 1 sign bit, 8 bits of exponent, and 23 bits of the significand (or what follows from a scientific-notation number: 2.33728*1012; 33728 is the significand).
  - `double` is represented in 64 bits, with 1 sign bit, 11 bits of exponent, and 52 bits of significand.
  ---
  - `boolean` data type represents one bit of information
  - Default value is false
  ---
  - `char` data type is a single 16-bit Unicode character
  ---
  ### wrapper
  - Converting primitive data types into object is called `boxing`, and this is taken care by the compiler. Therefore, while using a wrapper class you just need to pass the value of the primitive data type to the constructor of the Wrapper class.
  - And the Wrapper object will be converted back to a primitive data type, and this process is called `unboxing`. The `Number` class is part of the `java.lang package`.
  ### `Number` class
  - `Number`.`compareTo`(`argument`): Compares this `Number` object to the argument. If `Number` < `argument`, return `-1`. If `Number` = `argument`, return `0`. If `Number` > `argument`, return `1`.
  - `Number`.`equals`(`argument`): Return `true` if equal, `false` if not.
  - `Number`.`valueOf`(`primitive`)`: Return a Number object holding the value of the specified primitive value.
  ```java
  Integer x =Integer.valueOf(9);
  ```
  - `toString()`: Returns a `String` object representing the value of a specified `int` or `Integer`.
  ```java
  Integer x = 5;
  x.toString(); //return '5'
  Integer.toString(12); //return '12'
  ```
  - `parseInt`(`String`): Returns an `int` representing the value of a `String` containing primitive `int` value.
  - `parseDouble`(`String`): Returns an `double` representing the value of a `String` containing primitive `double` value.
  - `Math`.`abs`(`int`, `float`, `long`, `double`, `short`, `byte`): Returns the absolute value of the argument.
  - `Math`.`ceil`(`argument`): Returns the smallest `int` >= `argument` (Find the ceilling)
  ```java
  Math.ceil(125.9); //126.0
  ```
  - `Math`.`floor`(`argument`): Return the biggest `int` <= `argument` (Find the floor)
  ```java
  Math.ceil(125.9); //125
  ```
  ### `Character` class
  - Put quote inside quote
  ```java
  System.out.println("She said \\"Hello!\\" to me.");
  ```
  - `Character`.`isDigit`()
  - `Character`.`isLetter`()
  - `Character`.`isWhitespace`()
  - `Character`.`isLowerCase`()
  - `Character`.`isUpperCase`()
  - `Character`.`toUpperCase`()
  - `Character`.`toLowerCase`()
  - `Character`.`toString`()
  ### `String` class
  - `char` `String`.`charAt`(`int` `index`): Returns the character at the specified index.
  - `boolean` `String`.`equals`(`Object` `anObject`): Compares this string to the specified object.
  - `boolean` `String`.`equalsIgnoreCase`(`String` `anotherString`)
  - `int` `String`.`hashCode`(): Returns a hash code for this string.
  - `int` `String`.`length`(): Returns the length of this string.
  - `String` `concat`(`String` `str`): Concatenates the specified string to the end of this string.
  - `String` `substring`(`int` `beginIndex`): Returns a new string that is a substring of this string.
  - `String` `substring`(`int` `beginIndex`, `int` `endIndex`): Returns a new string that is a substring of this string. NOTE: substring is from `beginIndex` to `endIndex - 1`
  ### `Arrays` class
  - `Arrays` not Array!!!!
  - These methods are `overloading` for all primitive value. (`Overloading` allows a class to have two or more methods having same name).
  - public static `int` `Arrays`.`binarySearch`(`Object`[ ] `array`, `Object` `key`): Searches the specified array of Object ( Byte, Int , double, etc.) for the specified value using the binary search algorithm. The array must be sorted prior to making this call. This returns index of the search key, if it is contained in the list; otherwise, it returns ( – (insertion point + 1)).
  - public static `void` `Arrays`.`fill`(`int`[ ] `array`, `int` `val`): Fill `array` with `val`
  - public static `void` `Arrays`.`sort`(`Object`[ ] `array`): Sorts the specified array of objects into an ascending order
  - `foreach` loop:
  ```java
  public class TestArray {
  
     public static void main(String[] args) {
        double[] myList = {1.9, 2.9, 3.4, 3.5};
  
        // Print all the array elements
        for (double element: myList) {
           System.out.println(element);
        }
     }
  }
  ```
  - Array has fixed size
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-02T02:00:38.326Z"
updatedAt: "2017-08-04T15:51:33.897Z"
