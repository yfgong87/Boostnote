type: "MARKDOWN_NOTE"
folder: "c7615b6dcc7b2832aa16"
title: "Primitive Value & Object Classes"
content: '''
  # Primitive Value & Object Classes
  ### Initialize primitive value
  ```java
  int a; // WRONG!!!!!!
  int a = 0;
  int[] a; // WRONG!!!!!
  int[] a = new int[]; //WRONG!!!
  int[] a = new int[0]; //empty array
  int[] a = new int[5];
  ```
  ### Compare primitive vs Compare object
  - To compare two `primitive`, use `==`;
  - To compare `Object`, if use `==`, will ONLY compare their address, i.e. whether the two `Object` reference to the same address. For `String`, use `.equal()` instead;
  ### null Object
  - `Object` can be `null`. `Primitive` type CANNOT be `null`!!
  - A `null` `Object` is essentially a pointer that has not been assigned
  - `null` vs `empty` array
  ```java
  //This is a null array, where the object reference points to null
  int[] nullArray = null;
  //This is an empty array, where there is no element in it
  int[] emptyArray = new int[0];
  ```
  
  ### radix
  - In the system with radix 13, for example, a string of digits such as 398 denotes the number 3 × 13<sup>2</sup> + 9 × 13<sup>1</sup> + 8 × 13<sup>0</sup>.
  ### primitive types
  ---
  - Primitive value does not have a refence variable, unlike objects, they cannot be shared.
  ---
  - First bit represent sign, `0` is `positive` number, `1` is `negative` number
  - Two's Complement: `123` -> `1111011` -> `0000100` -`+1`> `0000101` -> `-123`
  - `Left` shift -> `Multiply by 2`; `Right` shift -> `Divide by 2`
  ---
  - `byte` data type is an 8-bit signed two's complement integer.
  - Minimum value is -128 (-2^7)
  - Maximum value is 127 (inclusive)(2^7 -1)
  - Default value is 0
  - Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an integer.
  - Example: byte a = 100, byte b = -50
  ---
  - `short` data type is a 16-bit signed two's complement integer
  - `int` data type is a 32-bit signed two's complement integer.
  - `Integer.MAX_VALUE`: 2<sup>31</sup>-1
  - `Integer.MIN_VALUE`: -2<sup>31</sup>
  - 注意：`Math.abs`(`Integer.MIN_VALUE`) 依然等于`Integer.MIN_VALUE`因为越界了，需要用`Math.abs`( (`long`)`Integer.MIN_VALUE`)
  ```java
  int max = Integer.MAX_VALUE;
  int min = Integer.MIN_VALUE;
  ```
  - `long` data type is a 64-bit signed two's complement integer
  ---
  - `float` is represented in `32` bits, with `1` sign bit, `8` bits of exponent, and `23` bits of the significand (or what follows from a scientific-notation number: 2.33728*10<sup>12</sup>; 33728 is the significand).
  - `double` is represented in `64` bits, with `1` sign bit, `11` bits of exponent, and `52` bits of significand.
  ---
  - `boolean` data type represents one bit of information
  - `boolean` 的 default 是 `false`
  - 注意：`Boolean` 的 default 是`null`
  ---
  - `char` data type is a single 16-bit Unicode character
  - `char` 是以其在ASCII中对应的`int`来存储的
  - `'0'` - `'0'` = `0`  (因为`'0'`对应的ASCII是48)
  - ((`'3'` - `'0'`) + (`'5'` - `'0'`) - (`'2'` - `'0'`)) + `'0'`) = `'6'` 
  - 上式左边等价于`3 + 5 - 2`
  - `char` - `'0'` 可以作为一个`char`到`int`的类型转换方法使用
  - 重要的ASCII: `'A'` = 65, `'a'` = 97;
  - 当一个`char[]`里只有`a`-`z`时可以新建一个数组`int[`26`]`,每个`char` - `'a'`就能得到一个`0`到`25`的`int`
  ---
  ### wrapper
  - Converting primitive data types into object is called `boxing`, and this is taken care by the compiler. Therefore, while using a wrapper class you just need to pass the value of the primitive data type to the constructor of the Wrapper class.
  - And the Wrapper object will be converted back to a primitive data type, and this process is called `unboxing`. The `Number` class is part of the `java.lang package`.
  ### `Number` class
  - `Number`.`compareTo`(`argument`): Compares this `Number` object to the argument. If `Number` < `argument`, return `-1`. If `Number` = `argument`, return `0`. If `Number` > `argument`, return `1`.
  - `Number`.`equals`(`argument`): Return `true` if equal, `false` if not.
  - `Number`.`valueOf`(`primitive`)`: Return a Number object holding the value of the specified primitive value.
  ```java
  Integer x =Integer.valueOf(9);
  ```
  - `toString()`: Returns a `String` object representing the value of a specified `int` or `Integer`.
  ```java
  Integer x = 5;
  x.toString(); //return '5'
  Integer.toString(12); //return '12'
  ```
  - `parseInt`(`String`): Returns an `int` representing the value of a `String` containing primitive `int` value.
  - `parseDouble`(`String`): Returns an `double` representing the value of a `String` containing primitive `double` value.
  - `Math`.`abs`(`int`, `float`, `long`, `double`, `short`, `byte`): Returns the absolute value of the argument.
  - `Math`.`ceil`(`argument`): Returns the smallest `int` >= `argument` (Find the ceilling)
  ```java
  Math.ceil(125.9); //126.0
  ```
  - `Math`.`floor`(`argument`): Return the biggest `int` <= `argument` (Find the floor)
  ```java
  Math.ceil(125.9); //125
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-02T02:00:38.326Z"
updatedAt: "2017-09-22T06:44:54.869Z"
