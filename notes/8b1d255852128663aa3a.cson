type: "MARKDOWN_NOTE"
folder: "ca7b6b3755f93c46a5f8"
title: "List"
content: '''
  # List
  ### When to use
  When to use `array`: 
  - Excessive read, as time complexity of read is always O(1) 
  - Random access to element using index
  
  When to use `ArrayList`:
  - Same as `array`, but `ArrayList` allocate memory as needed!
  
  When to use `LinkedList`:
  - Effective use of memory space as items get allocated as needed
  - Excessive Add/Remove of elements (It's better than `ArrayList`, because since array list items get stored in memory in adjacent place. when adding a new element in the middle of the array list, all  the items after the inserted one `HAVE to be shifted`, with Linked list the new item gets injected in the list without the need to shift the other items as they are `NOT adjacent in the memory`)
  ```java
  //List is abstract; CANNOT be instantiated
  List myList = new List(); //WRONG!
  List myList = new ArrayList(); //CORRECT
  ```
  ### Order of Element Add to List
  ```java
  import java.util.LinkedList;
  
  public class Main {
    public static void main(String[] args) {
      LinkedList<String> lList = new LinkedList<String>();
      lList.add("1");
      lList.add("2");
      lList.add("3");
      lList.add("4");
      lList.add("5");
  
      System.out.println(lList); //[1, 2, 3, 4, 5]
      lList.addFirst("0");
      System.out.println(lList);//[0, 1, 2, 3, 4, 5]
      lList.addLast("6");
      System.out.println(lList);//[0, 1, 2, 3, 4, 5, 6]
    }
  }
  ```
  ### Passing constructor to method
  ```java
  method (new ArrayList<Integer>() arrayList); //WRONG!!!!
  method (new ArrayList<Integer>());//CORRECT
  
  //CORRECT
  public ArrayList<Integer> method(int A){}
  ArrayList<Integer> list = method(A);
  ```
  ### Generic vs Non-generic type
  - `ArrayList<Integer>` is not a subtype of List
  ```java
  List<List<Integer>> results = new ArrayList<ArrayList<Integer>>();// WRONG!!!!!
  List<List<Integer>> list = new ArrayList<List<Integer>>(); //CORRECT
  List<List<Integer>> list = new ArrayList<>(); //CORRECT, NOT RECOMMENDED
  ```
  - `Box<Integer>` is not a subtype of `Box<Number>` even though `Integer` is a subtype of `Number`.
  ![generic](https://i.stack.imgur.com/IW0vU.gif)
  ```java
  //NON-generic Box Class
  public class Box {
      private Object object;
  
      public void set(Object object) { this.object = object; }
      public Object get() { return object; }
  }
  //GENERIC Box Class
  public class Box<Integer> {
      // T stands for "Type"
      private Integer a;
  
      public void set(Integer a) { this.a = a; }
      public Integer get() { return a; }
  }
  ```
  
  ### ArrayList
  - `java.util.ArrayList`
  - `ArrayList` automatically resize when adding or deleting elements in it.
  - Basic handling of `ArrayList`:
  ```java
  //Initiate an ArrayList that can only take String
  ArrayList<String> arrayList = new ArrayList<String>();
  
  //Add elements
  arrayList.add("FirstName LastName"); // add to the END of ArrayList
  arrayList.add(0, "newFirstElement"); //add to the FRONT of ArrayList
  
  //Insert vs Replace
  arrayList.add(2, "insertString"); //.add(index, value), this method INSERT the value, NOT REPLACING the original!
  arrayList.set(2, "replaceString"); //.set(index, value), this method REPLACE the value
  
  //Remove value from arrayList
  arrayList.remove(2); //REMOVE the value at index
  arrayList.removeRange(0,1);//remove range
  arrayList.remove(arrayList.size() - 1); //remove the last element
  
  //Check if element exist in ArrayList
  arrayList.contains("FirstName LastName"); //true
  
  //get size of ArrayList
  int size = arrayList.size();
  
  //get element by index
  arrayList.get(1);
  
  //Print ArrayList
  for(int i = 0; i < arrayList.size(); i++){
    System.out.println(arrayList.get(i));
  }
  //Print ArrayList
  for(String str : arrayList){
    System.out.println(str);
  }
  //Print ArrayList
  System.out.println(arrayList);
  ```
  - Using `Iterator` to handle `ArrayList`:
  ```java
  import java.util.Iterator;
  Iterator arrayListIterator = new arrayList.Iterator();
  while(arrayListIterator.hasNext()){
    System.out.println(arrayListIterator.next());
  }
  ```
  - Copy `ArrayList`
  ```java
  ArrayList newArrayList = new ArrayList();
  ArrayList arrayListToCopy = new ArrayList();
  newArrayList.addAll(arrayListToCopy);
  ```
  - Other methods:
  ```java
  //Empty ArrayList
  arrayList.clear();
  //Shallow Copy
  ArrayList arrayListClone = arrayList.clone();
  //Get index
  arrayList.indexOf("FirstName LastName"); // return -1 if no element in there
  //Check if empty
  arrayList.isEmpty(); //false
  //Turn ArrayList into Array
  String[] strArray = new String[3];
  strArray = arrayList.toArray();
  ```
  - `ArrayList`
  ```java
  Comparator<Integer> comparator = new Comparator<Integer>(){
      public int compare (int a, int b){
          return b - a;
      }
  };
  ArrayList<Integer> nums = new ArrayList<Integer>();
  //写法一
  Collections.sort(nums);
  
  //写法二，with Comparator
  Collections.sort(nums, comparator);
  
  //写法三
  nums.sort(comparator);
  
  ```
  
  ### LinkedList
  ```java
  //Initiate an ArrayList that can only take String
  LinkedList<String> linkedList = new LinkedList<String>();
  
  //Get first and last element
  linkedList.getFirst();
  linkedList.getLast();
  linkedList.subList(1, 2); //From index 1 to 2
  linkedList.indexOf("String");
  
  //Common methods
  linkedList.add("String");
  linkedList.add(1, "String");
  linkedList.addAll(new LinkedList<String>());
  linkedList.remove("String");
  linkedList.remove(1, "String");
  linkedList.removeAll(new LinkedList<String>());
  linkedList.set(1, "String");
  
  //Check element
  linkedList.contains();
  linkedList.isEmpty();
  linkedList.size();
  
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-03T02:58:27.081Z"
updatedAt: "2017-10-11T07:33:15.391Z"
