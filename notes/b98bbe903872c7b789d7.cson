createdAt: "2018-01-02T05:42:05.353Z"
updatedAt: "2018-01-22T03:35:37.148Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Can place flowers"
content: '''
  # Can place flowers
  Flowers cannot be planted in adjacent plots.
  (The input array won't violate no-adjacent-flowers rule)
  Input: flowerbed = `[1,0,0,0,1]`, `n` = `1`
  Output: `True`
  
  Solution: 
  - We need to plant as many flower as we can, which means whenever the rule is not violated we should plant a flower. 
  - We iterate the flowerbed. For each position, we check the position before and after the current position, only when both position are empty, we can place a flower in the current position. 
  - We change the value in current position to indicate we plant a flower here, and we increment our count. Eventually we check if the `count` is `>= n`.
  - The first and last position in the array are special cases. For the first position we only need to check the next position, and for the last position we only need to check the previous position. 
  
  Time: `O(n)`, Space: `O(1)`
  ```java
  class Solution {
      public boolean canPlaceFlowers(int[] flowerbed, int n) {
          int m = flowerbed.length;
          int count = 0;
  		// 这段最后加
          if(m == 1){
              count = flowerbed[0] == 0 ? 1 : 0;
              return count >= n;
          }
  		// 先写这一段
  		// flowerbed 至少得有 2 个数，不然 i + 1 直接越界了
          for(int i = 0; i < m; i++){
              if(flowerbed[i] == 1){
                  continue;
              }
              if(i == 0){
                  if(flowerbed[i + 1] == 0){
                      flowerbed[i] = 1;
                      count++;
                  }
              } else if(i == m - 1){
                  if(flowerbed[i - 1] == 0){
                      flowerbed[i] = 1;
                      count++;
                  }
              } else {
                  if(flowerbed[i - 1] == 0 && flowerbed[i + 1] == 0){
                      flowerbed[i] = 1;
                      count++;
                  }
              }
          }
          return count >= n;
          
      }
  }
  ```
  ```java
  class Solution {
      public boolean canPlaceFlowers(int[] flowerbed, int n) {
          int m = flowerbed.length;
          int count = 0;
          for(int i = 0; i < m; i++){
              if(flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == m - 1 || flowerbed[i + 1] == 0)){
                  flowerbed[i] = 1;
                  count++;
              }
              if(count >= n){
                  return true;
              }
          }
          return false;
      }
  }
  ```
'''
tags: [
  "Array"
  "Linkedin"
]
isStarred: false
isTrashed: false
