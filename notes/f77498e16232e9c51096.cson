type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Longest Substring without repeating character"
content: '''
  # Longest Substring without repeating character
  - 暴力枚举`O(n^3)`
  - Sliding window 解法。`i` 和 `j` 两个指针从左向右，`j` 不断向右直到遇到重复 `char`，每当 `j` 遇到重复 `char`，`i` 向右一格，并且 `i` 所在的元素从重复 `char` 中清除，这样最坏的情况(“aaaa”)下每个指针都走了 `n` 次，`O(2n)` -> `O(n)`
  ```java
  class Solution {
      public int lengthOfLongestSubstring(String s) {
          int[] map = new int[256];
          int i = 0;
          int j = 0;
          int max = 0;
          while(i < s.length() && j < s.length()){
              if(map[s.charAt(j)] == 0){
                  map[s.charAt(j)] = 1;
                  max = Math.max(max, j - i + 1);
                  j++;
              } else {
                  map[s.charAt(i)] = 0;
                  i++; //以 i 开头的最长 substring
              }
          }
          return max;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-11-03T23:38:44.423Z"
updatedAt: "2017-11-04T02:48:27.013Z"
