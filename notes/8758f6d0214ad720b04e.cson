type: "MARKDOWN_NOTE"
folder: "c7615b6dcc7b2832aa16"
title: "Java Basics"
content: '''
  # Java Basics
  ### Syntax
  - Class Names − For all class names the first letter should be in Upper Case. If several words are used to form a name of the class, each inner word's first letter should be in Upper Case. Example: `class MyFirstJavaClass`
  - Method Names − All method names should start with a Lower Case letter. If several words are used to form the name of the method, then each inner word's first letter should be in Upper Case. Example: `public void myMethodName()`
  - Program File Name − Name of the program file should exactly match the class name. Example: Assume '`MyFirstJavaProgram`' is the class name. Then the file should be saved as '`MyFirstJavaProgram.java`'
  ### Enums
  - Enums restrict a variable to have one of only a few predefined values. The values in this enumerated list are called enums.
  ### Comments
  ```java
  public class MyFirstJavaProgram {
     /* This is
      *   an example of 
      *     multi-line comments.
      */
     public static void main(String []args) {
        // This is an example of single line comment
        /* This is also an example of single line comment. */
        System.out.println("Hello World");
     }
  }
  ```
  ### Interface
  - An interface defines the methods, a deriving class (subclass) should use. But the implementation of the methods is totally up to the subclass.
  ### Class
  - There can be only one public class per source file.
  ### Create an object
  - Declaration + Instantiation + Initialization
  - A `Puppy` type is called a `Reference Datatypes`
  ```java
  public class Puppy {
     public Puppy(String name) {
        // This constructor has one parameter, name.
        System.out.println("Passed Name is :" + name );
     }
  
     public static void main(String []args) {
        // Following statement would create an object myPuppy
        // Declaration + Instantiation + Initialization
        Puppy myPuppy = new Puppy( "tommy" );
     }
  }
  ```
  ### Data Type
  - Default value for `boolean` is false
  ### Variable Types
  `Local Variables`
  - Local variables are declared in methods, constructors, or blocks.
  - Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor, or block.
  - Access modifiers cannot be used for local variables.
  - Local variables are visible only within the declared method, constructor, or block.
  - Local variables are implemented at stack level internally.
  - There is no default value for local variables, so local variables should be declared and an initial value should be assigned before the first use.
  ---
  `Instance variables`
  - These variables belong to the instance of a class, thus an object. And every instance of that class (object) has it's own copy of that variable. Changes made to the variable don't reflect in other instances of that class.
  ```java
  public class Product {
      public int Barcode;
  }
  ```
  - Access modifiers can be given for instance variables.
  - Instance variables can be accessed directly by calling the variable name inside the class. However, within static methods (when instance variables are given accessibility), they should be called using the fully qualified name: `ObjectReference.VariableName`.
  - Instance variables have default values.
  ---
  `Class variables`
  - These are also known as `static` member variables and there's only `ONE copy` of that variable that is `SHARED` with all instances of that class. If changes are made to that variable, all other instances will see the effect of the changes.
  ```java
  public class Product {
      public static int Barcode;
  }
  ```
  - Static variables are rarely used other than being declared as constants
  - Static variables can be accessed by calling with the class name: `ClassName.VariableName`.
  - When declaring class variables as public static final, then variable names (constants) are all in upper cas: 
  ```java
  // DEPARTMENT is a constant
     public static final String DEPARTMENT = "Development ";
  ```
  #### `Static` method CANNOT reference a `non-static` method or variable
  - `静态`在有些IDE中以`斜体`表示
  - 定义1：如果一个函数或变量为`静态`，则其被这个`类`的所有`对象`共享
  - 定义2：`静态`函数或变量只属于`类`，不属于`对象`
  - 何时用`静态`？当某个`类`只需要作为容器把一些相关的函数关联在一起时，并不需要建立`类`的`对象`，比如`Math`，`Math`的构造函数为`private`，并不允许建立`Math`类的对象
  - 调用`静态`对象时使用`类`名而不是`对象`名
  - `静态`函数不能访问`非静态`函数或变量，只能访问`静态`函数或变量，因为`静态`函数或变量被所有`对象`共享
  - 反之，`非静态`函数可以调用`静态`函数或变量
  - `Main`函数因为是程序的入口，所以是`静态`，由于`Main`是`静态`，`Main`中调用的所有方法都必须得定义为`静态`
  - `non-static` method or variables has to be called from an `instance` of class
  - You can't call something that doesn't exist. Since you haven't created an object, the `non-static` method doesn't exist yet. A `static` method (by definition) always exists.
  - `static`还有个用法就是用于记录某一个`对象`被创建了多少个，可以用一个`static`的变量来记录
  ```java
  private int a = 0;
  static void staticMethod(){
    nonStaticMethod();// WRONG!
    a += 1;//WRONG!
  }
  private void nonStaticMethod(){
  
  }
  ```
  ---
  ### Modifier
  `Access Control Modifiers`
  - Java provides a number of access modifiers to set access levels for classes, variables, methods and constructors. The four access levels are:
  - Visible to the package, the default. No modifiers are needed.
  - Visible to the class only (`private`).
  - Visible to the world (`public`).
  - Visible to the package and all subclasses (`protected`).
  ---
  `Non-Access Modifiers`
  - Java provides a number of non-access modifiers to achieve many other functionality.
  - The `static` modifier for creating class methods and variables.
  - The `final` modifier for finalizing the implementations of classes, methods, and variables. Once a `final` variable has been assigned, it always contains the same value. If a `final` variable holds a reference to an object, then the state of the object may be changed by operations on the object, but the variable will always refer to the same object (this property of final is called non-transitivity). 
  - The `abstract` modifier for creating abstract classes and methods.
  - The `synchronized` and `volatile` modifiers, which are used for threads.
  
  
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-02T03:12:28.527Z"
updatedAt: "2017-10-25T06:02:49.469Z"
