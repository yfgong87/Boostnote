createdAt: "2017-12-30T01:11:19.256Z"
updatedAt: "2018-01-04T20:15:52.811Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Iterator 题型"
content: '''
  # Iterator 题型
  ### Flatten Nested List Iterator
  以 `[1, [4, [6]]` 为例，使用一个 `Deque`，将所有数放进 `Deque` 中，每次从头部取出，如果是`int`，直接返回，如果不是`int`，取出整个`NestedInteger`, 从最后一个到第一个元素放回 Deque 的头部，然后递归调用`next()`，直到下次遇到一个`int`
  - `next()` -> 取出`1`，直接返回
  - `next()` -> 取出`[4, [6]]`，先将`[6]`放回头部，再将`4`放回头部, 递归调用`next()`，取出`4`，直接返回
  - `next()` -> 取出`6`，直接返回
  
  如果不优化，无法通过含有嵌套 `[]` 的 input
  优化方法是保证当 `Deque` 中只剩下`[]`时， `hasNext` 返回 `false`. 这是就需要在 `hasNext()` 内部调用`next()`，如果只剩下`[]`, `next()`会返回`null`, 这时`hasNext()`返回`false`. 然而当 `Deque`中仍然有 `int`时，`hasNext()`中调用`next()`会`return`掉一个`int`，这时要使用一个额外的 `stack` 存储取出来的那个`int`
  ```java
  import java.util.Iterator;
  
  public class NestedIterator implements Iterator<Integer> {
  
      //Stack<Integer> stack;
      Deque<NestedInteger> deque;
      public NestedIterator(List<NestedInteger> nestedList) {
          // Initialize your data structure here.
          deque = new ArrayDeque<>(nestedList);
          //stack = new stack<>();
      }
  
      // @return {int} the next element in the iteration
      @Override
      public Integer next() {
          // Write your code here
          // if (!stack.isEmpty()){
          //     return stack.pop();
          // }
          if (deque.isEmpty()){
              return null;
          }
          NestedInteger ni = deque.removeFirst();
          if (ni.isInteger()){
              return ni.getInteger();
          } else {
              List<NestedInteger> list = ni.getList();
              if(list != null){
                  for (int i = list.size() - 1; i >= 0; i--){
                      deque.addFirst(list.get(i));
                  }
              }
              return next();
          }
      }
  
      // @return {boolean} true if the iteration has more element or false
      @Override
      public boolean hasNext() {
          // // Write your code here
          // Integer ans = next();
          // if (ans == null){
          //     return false;
          // }
          // stack.push(ans);
          // return true;
          return !deque.isEmpty();
      }
  
      @Override
      public void remove() {}
  }
  ```
  ### Zigzag Iterator
  v1 = `[1, 2]`
  v2 = `[3, 4, 5, 6]`
  By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: `[1, 3, 2, 4, 5, 6]`.
  ```java
  public class ZigzagIterator {
      public Iterator<Integer> iterator_1;
      public Iterator<Integer> iterator_2;
      public boolean zigzag = false;
      /*
      * @param v1: A 1d vector
      * @param v2: A 1d vector
      */public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
          // do intialization if necessary
          iterator_1 = v1.iterator();
          iterator_2 = v2.iterator();
          zigzag = false;
      }
  
      /*
       * @return: An integer
       */
      public int next() {
          // write your code here
          if(iterator_1.hasNext() && iterator_2.hasNext()){
              if(!zigzag){
                  zigzag = !zigzag;
                  return iterator_1.next();
              } else {
                  zigzag = !zigzag;
                  return iterator_2.next();
              }
          } else if(iterator_1.hasNext()){
              return iterator_1.next();
          } else if(iterator_2.hasNext()){
              return iterator_2.next();
          } else {
              return -1;
          }
      }
  
      /*
       * @return: True if has next
       */
      public boolean hasNext() {
          // write your code here
          return iterator_1.hasNext() || iterator_2.hasNext();
      }
  }
  
  /**
   * Your ZigzagIterator object will be instantiated and called as such:
   * ZigzagIterator solution = new ZigzagIterator(v1, v2);
   * while (solution.hasNext()) result.add(solution.next());
   * Output result
   */
   ```
   ### Flatten 2D Vector (简单版 Zigzag Iterator II)
  `[
    [1,2],
    [3],
    [4,5,6]
  ]`
  
  By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: `[1,2,3,4,5,6]`
  ```java
  public class Vector2D implements Iterator<Integer> {
      List<Iterator<Integer>> its;
      public Vector2D(List<List<Integer>> vec2d) {
          // Initialize your data structure here
          its = new ArrayList<Iterator<Integer>>();
          for(List<Integer> vec : vec2d){
              if(vec.size() > 0){
                  its.add(vec.iterator());
              }
          }
      }
  
      @Override
      public Integer next() {
          // Write your code here
          int num = its.get(0).next();
          if(!its.get(0).hasNext()){
              its.remove(0);
          }
          return num;
      }
  
      @Override
      public boolean hasNext() {
          // Write your code here
          return its.size() > 0;
      }
  
      @Override
      public void remove() {
          
      }
  }
  
  /**
   * Your Vector2D object will be instantiated and called as such:
   * Vector2D i = new Vector2D(vec2d);
   * while (i.hasNext()) v[f()] = i.next();
   */
   ```
   ### Zigzag Iterator II
   Given k = `3` 1d vectors:
  
  `[1,2,3]`
  `[4,5,6,7]`
  `[8,9]`
  				size = 3, turn = 0
  0	`[2,3]`		size = 3, turn = (0 + 1) % 3 = 1
  1 	`[5,6,7]`	size = 3, turn = (1 + 1) % 3 = 2
  2 	`[9]`		size = 3, turn = (2 + 1) % 3 = 0
  
  0	`[3]`		size = 3, turn = (0 + 1) % 3 = 1
  1 	`[6,7]`		size = 3, turn = (1 + 1) % 3 = 2
  2 	`[]`		size = 2, turn = (2) % 2 = 0
  
  0	`[3]`		size = 2, turn = (0 + 1) % 2 = 1
  1 	`[6,7]`		size = 2, turn = (1 + 1) % 2 = 0
  
  0	`[]`		size = 1, turn = (0) % 1 = 0
  0 	`[7]`		
  
  Return `[1,4,8,2,5,9,3,6,7]`.
  ```java
  public class ZigzagIterator2 {
      public int turn;
      public List<Iterator<Integer>> its;
      /*
      * @param vecs: a list of 1d vectors
      */public ZigzagIterator2(List<List<Integer>> vecs) {
          // do intialization if necessary
          its = new ArrayList<Iterator<Integer>>();
          for(List<Integer> vec : vecs){
              if(vec.size() > 0){
                  its.add(vec.iterator());
              }
          }
          turn = 0;
      }
  
      /*
       * @return: An integer
       */
      public int next() {
          // write your code here
          int num = its.get(turn).next();
          if(its.get(turn).hasNext()){
              turn = (turn + 1) % its.size();
          } else {
              its.remove(turn);
              if(its.size() > 0){
                  turn = turn % its.size();
              }
          }
          return num;
      }
  
      /*
       * @return: True if has next
       */
      public boolean hasNext() {
          // write your code here
          return its.size() > 0;
      }
  }
  
  /**
   * Your ZigzagIterator2 object will be instantiated and called as such:
   * ZigzagIterator2 solution = new ZigzagIterator2(vecs);
   * while (solution.hasNext()) result.add(solution.next());
   * Output result
   */
  ```
  ### Binary Search Tree Iterator
  `next()` will return the next smallest value in BST
  因为 BST 按照 preOrder Traversal 可以不断打印 next smallest
  ```java
  public class BSTIterator {
      Stack<TreeNode> stack = new Stack<>();
      public BSTIterator(TreeNode root) {
          while(root != null){
              stack.push(root);
              root = root.left;
          }
      }
  
      /** @return whether we have a next smallest number */
      public boolean hasNext() {
          return !stack.isEmpty();
      }
  
      /** @return the next smallest number */
  	// 注意这里不需要 while(!stack.isEmpty()) 循环！因为每次只输出下一个数
      public int next() {
          TreeNode head = stack.pop();
          int next = head.val;
          head = head.right;
          while(head != null){
              stack.push(head);
              head = head.left;
          }
          return next;
      }
  }
  ```
  
'''
tags: []
isStarred: false
isTrashed: false
