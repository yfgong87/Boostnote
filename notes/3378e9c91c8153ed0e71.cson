type: "MARKDOWN_NOTE"
folder: "0ef4dc321cdc22cb8b00"
title: "位运算题"
content: '''
  # 位运算题
  ### 1. Swap Bits
  `0xaaaaaaaa` represents binary with ALL `even` positions set as `1`
  `0x55555555` represents binary with ALL `odd` positions set as `1`
  - 1) Get all even bits of x by doing bitwise and of x with 0xAAAAAAAA. The number 0xAAAAAAAA is a 32 bit number with all even bits set as 1 and all odd bits as 0.
  - 2) Get all odd bits of x by doing bitwise and of x with 0x55555555. The number 0x55555555 is a 32 bit number with all odd bits set as 1 and all even bits as 0.
  - 3) Right shift all even bits.
  - 4) Left shift all odd bits.
  - 5) Combine new even and odd bits and return.
  ```java
  (x & 0xaaaaaaaa) >>> 1 //只保留所有偶数位的 1，其他归零，之后将所有偶数位向右挪一个挪到奇数位，注意使用逻辑右移
  (x & 0x55555555) << 1 //只保留所有奇数位的 1，其他归零，之后将所有奇数位向左挪一个挪到偶数位
  ((x & 0xaaaaaaaa) >>> 1) | ((x & 0x55555555) << 1) //合并奇偶位，使用 | 保留 1
  ```
  
  ### Update Bits
  - 给出两个32位的整数N和M，以及两个二进制位的位置i和j。写一个方法来使得N中的第i到j位等于M（M会是N中从第i为开始到第j位的子串)
  - 将n中第i位到第j位先置为0，然后，按位或上m << i即可
  - 
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-25T02:49:25.292Z"
updatedAt: "2017-10-25T16:11:43.292Z"
