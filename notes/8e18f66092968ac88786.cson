createdAt: "2018-01-19T20:41:02.858Z"
updatedAt: "2018-01-19T22:04:24.281Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Paint House"
content: '''
  ### Paint House
  每个house不能和前一个同色，一共三种颜色`0`,`1`,`2`，每个house刷每一种颜色的`cost`存在`costs`里，求刷完所有house的`最小cost`
  - `f[i][j]`: The min Cost to paint house `i` with color `j`
  - `f[i][j]` = `costs[i][j]` + min value of `f[i - 1][every color other than j]`
  - 需要初始化 `f[0][j]`
  - return min value of `f[n - 1][every color]`;
  
  Time: `O(9n)`, Space: `O(3n)`
  ```java
  //  costs[4][3]
  //	house1: 1 2 3
  //	house2: 1 2 3
  //	house3: 1 2 3
  //	house4: 1 2 3
  //	
  //	f[4][3]
  //	house1: 1 2 3
  //	house2: 3 3 4
  //	house3: 4 5 6
  //	house4: 6 6 7    return min(6,6,7) = 6
  //
  class Solution {
      public int minCost(int[][] costs) {
          if(costs == null || costs.length == 0 || costs[0].length == 0){
              return 0;
          }
          int n = costs.length;
          //每个house刷成某种颜色(保证满足不重色要求的前提下)的最小总cost
          int[][] f = new int[n][3];
          f[0][0] = costs[0][0];
          f[0][1] = costs[0][1];
          f[0][2] = costs[0][2];
          for(int i = 1; i < n; i++){
              //当前house刷成 0 的cost + 前一个house刷成 1 或者 2 的最小总cost
              f[i][0] = costs[i][0] + Math.min(f[i - 1][1], f[i - 1][2]);
              f[i][1] = costs[i][1] + Math.min(f[i - 1][0], f[i - 1][2]);
              f[i][2] = costs[i][2] + Math.min(f[i - 1][0], f[i - 1][1]);
          }
          //返回
          return Math.min(Math.min(f[n - 1][0], f[n - 1][1]), f[n - 1][2]);
      }
  }
  ```
  优化：Space from `O(n)` to `O(1)`
  We only need to memorize the costs for previous house, not all the houses before.
  ```java
  class Solution {
      public int minCost(int[][] costs) {
          if(costs == null || costs.length == 0 || costs[0].length == 0){
              return 0;
          }
          int n = costs.length;
          //每个house刷成某种颜色(保证满足不重色要求的前提下)的最小总cost
          int[] prev = costs[0];
  		
          for(int i = 1; i < n; i++){
  			int[] curr = new int[3];
              //当前house刷成 0 的cost + 前一个house刷成 1 或者 2 的最小总cost
  			for(int j = 0; j < 3; j++){
  				curr[j] = costs[i][j] + Math.min(prev[(j + 1) % 3], prev[(j + 2) % 3]);
  			}
  			prev = curr;
          }
          //返回
          return Math.min(Math.min(prev[0], prev[1]), prev[2]);
      }
  }
  ```
  ### Paint House II
  Now you have `K` colors
  Time: `O(nK^2)`, Space: `O(nK)`
  ```java
  public class Solution {
      /*
       * @param costs: n x k cost matrix
       * @return: an integer, the minimum cost to paint all houses
       */
      public int minCostII(int[][] costs) {
          // write your code here
          if(costs == null || costs.length == 0){
              return 0;
          }
          int n = costs.length;
          int K = costs[0].length;
          int[][] f = new int[n][K];
          for(int i = 0; i < K; i++){
              f[0][i] = costs[0][i];
          }
          for(int i = 1; i < n; i++){
              for(int j = 0; j < K; j++){
                  int min = Integer.MAX_VALUE;
                  for(int k = 0; k < K; k++){
                      if(k == j)continue;
                      min = Math.min(min, f[i - 1][k]);
                  }
                  f[i][j] = costs[i][j] + min;
              }
          }
          int res = Integer.MAX_VALUE;
          for(int i = 0; i < K; i++){
              res = Math.min(res, f[n - 1][i]);
          }
          return res;
      }
  }
  ```
  优化：`O(nK^2)` to `O(nK)`
  因为下一个屋子只要不跟下一个屋子用同一样的颜色就可以了，所以先找到这一屋子cost最小的颜色，如果和上个最小（这里的最小是指前面所有总和最小）的颜色不重合，那么就直接选用这个颜色，如果重合，则用这个颜色加上前面cost第二小的, 再和其他颜色cost和之前最小cost的和比较，所以要maintain两个最小的
  ```java
  public class Solution {
      /**
       * @param costs n x k cost matrix
       * @return an integer, the minimum cost to paint all houses
       */
      public int minCostII(int[][] costs) {
          int n = costs.length;
          if (n == 0) {
              return 0;
          }
          
          int K = costs[0].length;
          
          int[][] f = new int[2][K];
          int old, now = 0;
          int i, j, k;
          for (k = 0; k < K; ++k) {
              f[now][k] = 0;
          }
          
          for (i = 1; i <= n; ++i) {
              old = now;
              now = 1 - now;
              int min1 = Integer.MAX_VALUE;
              int min2 = Integer.MAX_VALUE;
              for (k = 0; k < K; ++k) {
                  if (f[old][k] < min1) {
                      min2 = min1;
                      min1 = f[old][k];
                  }
                  else {
                      if (f[old][k] < min2) {
                          min2 = f[old][k];
                      }
                  }
              }
              
              for (j = 0; j < K; ++j) {
                  if (min1 == f[old][j]) {
                      f[now][j] = min2 + costs[i-1][j];   
                  }
                  else {
                      f[now][j] = min1 + costs[i-1][j];
                  }
              }
          }
          
          int res = f[now][0];
          for (k = 0; k < K; ++k) {
              if (f[now][k] < res) {
                  res = f[now][k];
              }
          }
          
          return res;
      }
  }
  ```
'''
tags: [
  "Linkedin"
  "Dynamic_Programming"
]
isStarred: false
isTrashed: false
