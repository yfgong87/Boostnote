createdAt: "2018-01-21T02:37:21.924Z"
updatedAt: "2018-01-23T01:02:09.131Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Search for a Range"
content: '''
  # Search for a Range
  
  Solution: 
  
  Use Binary search to find the first occurrence of the target, then use a pointer, starting from the first target index, moving towards right, until the number it is pointing to is not target any more, then return the window between the first target and the last position of the pointer.
  
  Time complexity: `O(logn) + O(k)` where `k` is the number of occurrence of the target
  ```java
  public class Solution {
      /*
       * @param A: an integer sorted array
       * @param target: an integer to be inserted
       * @return: a list of length 2, [index1, index2]
       */
      public int[] searchRange(int[] A, int target) {
          // write your code here
          if(A == null || A.length == 0){
              return new int[]{-1, -1};
          }
          int start = 0;
          int end = A.length - 1;
          int mid = 0;
          while (start + 1 < end){
              mid = start + (end - start) / 2;
              if(A[mid] < target){
                  start = mid;
              } else {
                  end = mid; // 保证不漏掉第一个出现的 target
              }
          }
          int index = 0;
          if(A[start] == target){
              index = start; // 先 check start
          } else if(A[end] == target){
              index = end; // 再 check end
          } else {
              return new int[]{-1, -1}; // 找不到 target
          }
          int startIndex = index;
          int endIndex = index;
  		// 只需要往右找
          while(endIndex < A.length && A[endIndex] == target){
              endIndex++;
          }
  		// endIndex 退回一格
          endIndex--;
          return new int[]{startIndex, endIndex};
      }
  }
  ```
'''
tags: [
  "Binary_Search"
  "Linkedin"
]
isStarred: false
isTrashed: false
