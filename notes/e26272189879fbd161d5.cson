type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Text Justification"
content: '''
  # Text Justification
  
  Solution: 
  
  
  ```java
  public class Solution {
      public List<String> fullJustify(String[] words, int L) {
          List<String> lines = new ArrayList<String>();
  		// index 代表当前处理到第几个 word
          int index = 0;
  		//处理每一个word
          while (index < words.length) {
  			//这一行目前的长度，初始值为第一个 Word 的长度
              int lineLen = words[index].length();
  			StringBuilder sb = new StringBuilder(); //每一行都需要 new 一个 sb
              sb.append(words[index]); //因为 Word 的长度保证 < L，第一个 Word 可以直接加入 sb
  			//始终 Assume 当前处理 Word 的下一个为这一行的最后一个 Word
              int last = index + 1;
              while (last < words.length) {
  				//plus one for the space, if its a perfect fit it will fit，so use ">"
                  if (words[last].length() + lineLen + 1 > L) break;
                  lineLen += words[last].length() + 1;
                  last++;
              }
              int numWord = last - index;
  		   // left-justified
             // if "last" is the last word of the input 
  		   // if number of words in the line is 1 (极端情况一个 word 有 15 个 char)
              if (last == words.length || numWord == 1) {
  				//先把每一个 Word 加进 sb
                  for (int i = index + 1; i < last; i++) {
  					//先加空格
                      sb.append(" ");
  					//再加Word
                      sb.append(words[i]);
                  }
  				//再用 Space 填满这一行
                  for (int i = sb.length(); i < L; i++) {
                      sb.append(" ");
                  }
              } else {
                  // middle justified，L - lineLen 剩下的空格要平均分
  				int numSlot = numWord - 1; // numWord > 1
                  int slotLen = (L - lineLen) / numSlot;
                  int remain = (L - lineLen) % numSlot;
                  for (int i = index + 1; i < last; i++) {
  					//先加空格
  					sb.append(" ");
  					//再加 SpaceLen
                      for(int j = 0; j < slotLen; j++) {
                          sb.append(" ");
                      }
  					//再加 remain，每个 slot 加一个 " "
  					//If the number of spaces on a line do not divide evenly between words
  					//The empty slots on the left will be assigned more " " than the slots on the right
                      if(remain > 0) {
                          sb.append(" ");
                          remain--;
                      }
  					//最后加每一个 Word
                      sb.append(words[i]);
                  }
              }
              lines.add(sb.toString()); //将这一行加入 Result
              index = last;
          }
          return lines;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-12-10T21:51:24.104Z"
updatedAt: "2018-01-04T07:39:34.809Z"
