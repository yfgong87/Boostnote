createdAt: "2018-01-21T00:41:46.870Z"
updatedAt: "2018-01-23T20:25:59.674Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Second / Kth smallest/largest element in BST"
content: '''
  # Second / Kth smallest/largest element in BST
  Brute Force: 
  Serialize the BST and then iterate `2` / `K` times from `left` / `right`. Time will be `O(n + k)`. But actually we do not need to traverse the entire tree.
  
  思路:
  - `second` largest: traverse the BST in the order of `right` -> `root` -> `left`, return the `2nd` element during traversal
  - `Kth` largest: traverse the BST in the order of `right` -> `root` -> `left`, return the `Kth` element during traversal
  - `second` smallest: traverse the BST in the order of `left` -> `root` -> `right`, return the `2nd` element during traversal
  - `Kth` smallest: traverse the BST in the order of `left` -> `root` -> `right`, return the `Kth` element during traversal
  
  Time: `O(h + 2)` / `O(h + K)`, Space: `O(h + 2)` / `O(h + K)`
  
  ### Kth Smallest Element in BST
  ```java
  class Solution {
      public int kthSmallest(TreeNode root, int k) {
          Stack<TreeNode> stack = new Stack<>();
          while(root != null){
              stack.push(root);
              root = root.left;
          }
          int count = 0;
          while(count < k - 1){
              count++;
              TreeNode top = stack.pop();
              top = top.right;
              while(top != null){
                  stack.push(top);
                  top = top.left;
              }
          }
          return stack.pop().val;
      }
  }
  ```
'''
tags: [
  "Linkedin"
  "Binary_Tree"
]
isStarred: false
isTrashed: false
