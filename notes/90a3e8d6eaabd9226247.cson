type: "MARKDOWN_NOTE"
folder: "c7615b6dcc7b2832aa16"
title: "Class, Methods, Polymorphism"
content: '''
  # Class, Methods, Polymorphism
  ### `this`
  - Differentiate the instance variables from local variables if they have same names, within a constructor or a method.
  ```java
  class Student {
     //instance variable age
     int age;   
     Student(int age) {
        //instance variable (this.age) = local variable (age)
        this.age = age;	
     }
  }
  ```
  - Call one type of constructor (parametrized constructor or default) from other in a class. It is known as explicit constructor invocation.
  ```java
  //Call parameterized constructor within default constructor
  class Student {
     int age
     Student() {
        //Explicit constructor invocation
        this(20);
     }
     
     Student(int age) {
        this.age = age;	
     }
  }
  //Call default constructor within parameterized constructor
  public class This_Example {
     // Instance variable num
     int num = 10;
  	
     This_Example() {
        System.out.println("This is an example program on keyword this");	
     }
  
     This_Example(int num) {
        // Invoking the default constructor
        this();
        
        // Assigning the local variable num to the instance variable num
        this.num = num;	   
     }
  ```
  ### Method `Overloading`
  When a class has two or more methods by the `same name` but `different parameters`, it is known as method `overloading`. It is different from overriding. In overriding, a method has the same method name, type, number of parameters, etc.
  ![overriding vs overload](https://www.programcreek.com/wp-content/uploads/2009/02/overloading-vs-overriding.png)
  
  ### `super` and `Overriding`
  - It is used to differentiate the members of superclass from the members of subclass, if they have same names.
  - It is used to `invoke` the `superclass constructor` from `subclass`.
  ```java
  //super class
  public class Animal{
    private String name;
    //generic constructor
    public Animal(){
      
    }
    //specific constructor
    public Animal(String name){
      this.name = name;
    }
    //original method
    public void walk(){
      System.out.println("walk");
    }
  }
  //subclass
  public Cat extends Animal{
    private String toy;
    public Cat(){
    
    }
    public Cat(String name, String toy){
      super(name); // Call constructor in super class
      this.toy = toy;
    }
    //overwritten method
    public void walk(){
      System.out.println("stalk");
    }
  }
  ```
  
  ### Polymorphism (`extends`) - `Overriding` + `Overloading`
  - Java is smart enough to call the `overided method` in `subclass`, rather than the original `method` in `superclass` when a `subclass` is defined this way:
  ```java
  Animal myCat = new Cat("Hermie", "mouse");
  public void walk (Animal animal){
    randomAnimal.walk();
  }
  walk(myCat);//will print "stalk"
  ```
  - However, if a `field` or `method` is `NOT` defined in `superclass`, but is defined `ONLY` in `subclass`, Java `CANNOT` figure it out.
  ```java
  Animal myCat = new Cat("Hermie", "mouse");
  public void play (Animal animal){
    System.out.println(animal.toy);
  }
  play(myCat); //Throw ERROR
  ```
  - // If you want access to `fields` or `methods` only found in the subclass you have to cast the object to that specific subclass first
  ```java
  //method 1
  Cat myCatCopy = (Cat) myCat;
  play(myCat);//will print "mouse"
  //method 2
  System.out.println(((Cat) myCat).toy);//will print "mouse"
  ```
  ### `Constructor` CAN ONLY BE `overloaded`
  - `constructor` cannot be inherited so it cannot be `overrided`, but can be `overloaded`
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-03T01:03:41.271Z"
updatedAt: "2017-08-26T06:40:01.816Z"
