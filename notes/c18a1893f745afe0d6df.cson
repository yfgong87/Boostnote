type: "MARKDOWN_NOTE"
folder: "0ef4dc321cdc22cb8b00"
title: "Minimum Spanning Tree"
content: '''
  # Minimum Spanning Tree
  ```java
  /**
   * Definition for a Connection.
   * public class Connection {
   *   public String city1, city2;
   *   public int cost;
   *   public Connection(String city1, String city2, int cost) {
   *       this.city1 = city1;
   *       this.city2 = city2;
   *       this.cost = cost;
   *   }
   * }
   */
  public class Solution {
      /**
       * @param connections given a list of connections include two cities and cost
       * @return a list of connections from results
       */
      int n = 0;
  
      public List<Connection> lowestCost(List<Connection> connections) {
          // Write your code here
          List<Connection> ans = new ArrayList<>();
          UFS ufs = new UFS(connections.size() * 2);
          
          //Kruskal算法第一步：从小到大排序
          Collections.sort(connections, new Comparator<Connection>() {
              public int compare(Connection a, Connection b) {
                  if (a.cost != b.cost) {
                      return a.cost - b.cost;
                  }
                  if (a.city1.equals(b.city1)) {
                      return a.city2.compareTo(b.city2);
                  }
                  return a.city1.compareTo(b.city1);
              }
          });
          
          //Kruskal算法第二步：如果两个点已经相连(已经存在于同一个并查集中)，则舍弃该Connection
          for (Connection item : connections) {
              int c1 = getID(item.city1);
              int c2 = getID(item.city2);
              //如果两点不存在于同一个并查集
              if (ufs.find(c1) != ufs.find(c2)) {
                  ans.add(item);
                  ufs.union(c1, c2);
              }
          }
          //如果边 = 点(n) - 1，才有可能成图
          if (ans.size() == n - 1) {
              return ans;
          } else {
              //不满足成图条件(无法找到连接所有点的路线)
              return new ArrayList<>();
          }
      }
  
      //每个城市名对应一个int
      Map<String, Integer> name2ID = new HashMap<>();
  
      public int getID(String name) {
          if (name2ID.containsKey(name)) {
              return name2ID.get(name);
          } else {
              name2ID.put(name, n);
              return n++; 
          }
      }
  
      public class UFS {
          int[] f;          // father
  
          public UFS(int n) {
              f = new int[n];
              //每个集合的起始元素数为一(-1)，代表为i
              for (int i = 0; i < n; i++) {
                  f[i] = -1;
              }
          }
  
          public void union(int a, int b) {
              a = find(a);
              b = find(b);
              //f[a],f[b]都是根，值都为负，值越小绝对值越大
              //值越小说明集合中包含元素越多
              //元素多的集合被选为合并集合的代表
              if (f[a] < f[b]) {
                  f[a] += f[b];
                  f[b] = a;
              } else {
                  f[b] += f[a];
                  f[a] = b;
              }
          }
          
          //找到包含x这个数的集合，返回该集合的代表
          public int find(int x) {
              //f[7] = -2: 一个以7为代表的集合里有两个元素(-2)
              //如果f[7]是负数，说明7这个数已经是这个集合的代表，直接返回
              if (f[x] < 0) {
                  return x;
              }
              //如果x不是集合的代表，向x的上一级(f[x])找，f[x]里存的是其father的值
              //这一步同时做了路径优化，因为x不是根，所以x指向该集合的根
              //递归最终会返回集合的根(f[x])
              f[x] = find(f[x]);
              return f[x];
          }
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-12T17:37:21.149Z"
updatedAt: "2017-09-12T18:32:33.426Z"
