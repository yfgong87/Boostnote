createdAt: "2017-12-27T01:24:57.507Z"
updatedAt: "2018-01-22T21:14:02.654Z"
type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Anagram 系列"
content: '''
  Anagram 系列
  ### Two Strings Are Anagrams
  时间复杂度：`O(n)` + `O(256)`
  空间复杂度：`O(256)`
  ```java
  public class Solution {
      /**
       * @param s: The first string
       * @param b: The second string
       * @return true or false
       */
      public boolean anagram(String s, String t) {
          // write your code here
          if(s.length() != t.length()){
              return false;
          }
          int[] map = new int[256];
          char[] sc = s.toCharArray();
          char[] tc = t.toCharArray();
          for(int i = 0; i < s.length(); i++){
              map[sc[i]]++;
              map[tc[i]]--;
          }
          for(int num : map){
  			if(num != 0){
  				return false;
  			}
  		}
          return true;
      }
  };
  ```
  ### Anagram / Group Anagram
  Given an array of strings, return all groups of strings that are anagrams.
  Given `["lint", "intl", "inlt", "code"]`, return `["lint", "inlt", "intl"]`.
  
  Given `["ab", "ba", "cd", "dc", "e"]`, return `["ab", "ba", "cd", "dc"]`.
  
  Summary:
  Go through all Strings and store <Representative, Array of Anagram Strings> in a HashMap.
  Go through the HashMap and if the size of the Array of Anagram String is >= 2, add it to result.
  For every group of Anagram, use the sorted version of the String as the representative of the group.
  时间复杂度：`O(n)` * `O(LlogL)` where `n = number of words in String[]`, `L = avg number of char in each word`
  空间复杂度：`O(number of anagram word)`
  ```java
  public class Solution {
      /*
       * @param strs: A list of strings
       * @return: A list of strings
       */
      public List<String> anagrams(String[] strs) {
          // write your code here
          List<String> results = new ArrayList<>();
          Map<String, ArrayList<String>> map = new HashMap<>();
          for(String str : strs){
              char[] sc = str.toCharArray();
              Arrays.sort(sc);
              String sortStr = String.valueOf(sc);
              if(!map.containsKey(sortStr)){
                  ArrayList<String> list = new ArrayList<>();
                  map.put(sortStr, list);
              } 
              map.get(sortStr).add(str);
          }
          for(Map.Entry<String, ArrayList<String>> entry : map.entrySet()){
              if(entry.getValue().size() > 1){
                  results.addAll(entry.getValue());
              }
  			// 如果需要将 Anagram 相同的词放在一组，则返回如下：
  			//for(Map.Entry<String, List<String>> entry : map.entrySet()){
              //	results.add(entry.getValue());
          	//}
          }
          return results;
      }
      
  }
  ```
  ### Subarray Anagram
  普通版
  首先先`小String`中的每个`Char`出现次数存在`HashMap`里
  然后枚举`大String`中长度等于`小String`的所有`SubString`，每个`SubString`中每个`Char`出现的次数也存在`HashMap`里
  然后比较两个`HashMap`是否相等。每次存`HashMap`理论需要`O(l)`其中`l`为`小String`的长度
  如果用一个大小为`256`的`Array`代替`HashMap`，并且用`Sliding Window`仅仅修改变动的那一个`Char`，则将`O(l)`简化为了`O(1)`
  `Arrays.equals()` 复杂度为 `O(n)`
  由于比较的是大小为`256`的两个`Array`，所以总复杂度为 `O(n * 256)`
  ```java
  public class Solution {
      /*
       * @param s: a string
       * @param p: a string
       * @return: a list of index
       */
  	// idx:  01234
  	//   s:  abcde
  	//  s':  abc
  	// s'':   bcd
  	//s\''':    cde
  	//   p:  acb
      public List<Integer> findAnagrams(String s, String p) {
          // write your code here
          List<Integer> result = new ArrayList<Integer>();
          if(s.length() < p.length()){
              return result;
          }
          int[] mapS = new int[256];
          int[] mapP = new int[256];
          char[] sc = s.toCharArray();
          char[] pc = p.toCharArray();
          for(int i = 0; i < p.length(); i++){
              mapS[sc[i]]++;
              mapP[pc[i]]++;
          }
          if(Arrays.equals(mapS, mapP)){
              result.add(0);
          }
  		// 0123456789
  		// cbaebabacd   s.length() = 10
          // cba			p.length() = 3
          //  bae
          //        acd   end index = 7 = 10 - 3
          for(int i = 1; i <= s.length() - p.length(); i++){
              mapS[sc[i - 1]]--;
              mapS[sc[i + p.length() - 1]]++;
              if(Arrays.equals(mapS, mapP)){
                  result.add(i);
              }
          }
          return result;
      }
  }
  ```
  `absSum`优化版
  ```java
  public class Solution {
      /*
       * @param s: a string
       * @param p: a string
       * @return: a list of index
       */
      public List<Integer> findAnagrams(String s, String p) {
          // write your code here
          List<Integer> result = new ArrayList<Integer>();
          if(s.length() < p.length()){
              return result;
          }
          int[] difMap = new int[256];
          char[] sc = s.toCharArray();
          char[] pc = p.toCharArray();
          for(int i = 0; i < p.length(); i++){
              difMap[sc[i]]++;
              difMap[pc[i]]--;
          }
          int absSum = 0;
          for(int i : difMap){
              absSum += Math.abs(i);
          }
          if(absSum == 0){
              result.add(0);
          }
          for(int i = 1; i <= s.length() - p.length(); i++){
              int left = sc[i - 1];
              int right = sc[i + p.length() - 1];
              absSum = absSum - Math.abs(difMap[left]) - Math.abs(difMap[right]);
              difMap[left]--;
              difMap[right]++;
              absSum = absSum + Math.abs(difMap[left]) + Math.abs(difMap[right]);
              if(absSum == 0){
                  result.add(i);
              }
          }
          return result;
      }
  }
  ```
'''
tags: [
  "HashMap"
  "String"
]
isStarred: false
isTrashed: false
