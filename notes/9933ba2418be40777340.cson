type: "MARKDOWN_NOTE"
folder: "ca7b6b3755f93c46a5f8"
title: "HashMap"
content: '''
  # HashMap
  ---
  - `HashSet` is a set, e.g. {1,2,3,4,5}
  - `HashMap` is a key -> value (key to value) map, e.g. {a -> 1, b -> 2, c -> 2, d -> 1}
  - Notice in my example above that in the `HashMap` there must not be duplicate keys, but it may have duplicate values.
  - In the `HashSet`, there must be no duplicate elements.
  ---
  ### Use `HashMap`.`entrySet`() + `Iterator` to get a pair of <Key, Value>
  ```java
  import java.util.HashMap;
  import java.util.Set;
  import java.util.Iterator;
  import java.util.Map;
  
  public class HashMapIteratorExample {
   
  public static void main(String[] args) {
   
      // Creating a HashMap of int keys and String values
      //Map<Integer, String> hashmap = new HashMap<Integer, String>();
      HashMap<Integer, String> hashmap = new HashMap<Integer, String>();
   
      // Adding Key and Value pairs to HashMap
      hashmap.put(11,"Value1");
      hashmap.put(22,"Value2");
      hashmap.put(33,"Value3");
      hashmap.put(44,"Value4");
      hashmap.put(55,"Value5");
   
      // Getting a Set of Key-value pairs
      Set entrySet = hashmap.entrySet();
   
      // Obtaining an iterator for the entry set
      Iterator it = entrySet.iterator();
   
      // Iterate through HashMap entries(Key-Value pairs)
      System.out.println("HashMap Key-Value Pairs : ");
      while(it.hasNext()){
         Map.Entry<Integer, String> me = (Map.Entry)it.next();
         System.out.println("Key is: "+me.getKey() + 
         " & " + 
         " value is: "+me.getValue());
     }
   }
  }
  Output:
  
  HashMap Key-Value Pairs : 
  Key is: 33 &  value is: Value3
  Key is: 55 &  value is: Value5
  Key is: 22 &  value is: Value2
  Key is: 11 &  value is: Value1
  Key is: 44 &  value is: Value4
  ```
  ### HashMap Functions
  #### Check value:
  - `boolean` `HashMap`.`containsKey` (`Object` `Key`): Returns `true` if this map contains a mapping for the specified key.
  - `boolean` `HashMap`.`containsValue` (`Object` `value`): Returns `true` if this map maps one or more keys to the specified value.
  - `boolean` `HashMap`.`isEmpty`()
  - `int` `HashMap`.`size`()
  #### Add
  - `Object` `HashMap`.`put`(`Object` `key`, `Object` `value`)
  ```java
  //Update value giving key
  map.put(key, map.get(key) + 1);
  //HashMap will OVERWRITE the value when giving the same key
  map.put("1","1111");
  map.put("1","2222");//only this entry will be saved
  ```
  - `HashMap`.`putAll`(`Map` `m`): Copies all of the mappings from the specified map to this map. 
  #### Remove
  - `Object` `HashMap`.`remove`(`Object` `key`)
  - `void` `HashMap`.`clear`(): Removes all mappings from this map.
  #### Get
  - `Set` `HashMap`.`entrySet`(): Returns a collection view of the mappings contained in this map.
  - Object `HashMap`.`get`(`Object` `key`): Returns the value to which the specified key is mapped in this identity hash map, or null if the map contains no mapping for this key.
  - `Object` `HashMap`.`clone`(): Returns a shallow copy of this HashMap instance: the keys and values themselves are not cloned.
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-01T03:44:25.824Z"
updatedAt: "2017-08-20T19:23:02.695Z"
