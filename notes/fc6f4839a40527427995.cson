type: "MARKDOWN_NOTE"
folder: "c7615b6dcc7b2832aa16"
title: "Java对象的大小"
content: '''
  # Java对象的大小
  基本数据的类型的大小是固定的，对于非基本类型的Java对象，其大小就值得商榷。
  在Java中，一个`空Object`对象的大小是`8byte`，这个大小只是保存堆中一个没有任何属性的对象的大小。看下面语句：
  ```java
  Object ob = new Object();
  ```
  这样在程序中完成了一个Java对象的生命，但是它所占的空间为：`4byte` + `8byte`
  - `4byte`，是上面部分所说的Java栈中保存引用的所需要的空间。
  - `8byte`，是Java堆中对象的信息。因为所有的Java非基本类型的对象都需要默认继承Object对象，因此不论什么样的Java对象，其大小都必须是大于8byte。
  有了Object对象的大小，我们就可以计算其他对象的大小了。
  ```java
  Class NewObject {
         int count;
         boolean flag;
         Object obj;
  }
  ```
  其大小为：`空对象大小(8byte)` + `int大小(4byte)` + `Boolean大小(1byte)` + `空Object引用的大小(4byte)` = `17byte`。但是因为`Java在给对象内存分配时都是以8的整数倍来分`，因此大于17byte的最接近8的整数倍的是24，因此此对象的大小为`24byte`。
  
  这里需要注意一下：基本类型的包装类型的大小，因为这种包装类型已经成为对象了，因此需要把他们作为对象来看待。包装类型的大小至少是12byte（声明一个空Object至少需要的空间），而且12byte没有包含任何有效信息，同时，因为Java对象大小是8的整数倍，因此一个`基本类型包装类的大小至少是16byte`。这个内存占用是很恐怖的，它是使用基本类型的N倍（N>2），有些类型的内存占用更是夸张（随便想下就知道了）。因此，可能的话应尽量少使用包装类。在JDK5.0以后，因为加入了自动类型装换，因此，Java虚拟机会在存储方面进行相应的优化。
  
  ### 实例
  在堆中，每个对象由四个域构成（A、B、C 和 D），下面我们逐个解释一下：
  - A:`对象头`，占用很少的字节，表述Object当前状态的信息
  - B:`基本类型`域占用的空间(原生域指 int、boolean、short等)
  - C:`引用类型`域占用的空间(引用类型域指 其他对象的引用，每个引用占用4个字节)
  - D:`填充物`占用的空间(后面说明什么是填充物)
  
  下面我们对A、B、C 和 D 逐一解释:
  
  A：`对象头`
  内存中，每个对象占用的总空间不仅包含对象内声明的变量所需要的空间，还包括一些额外信息，比如：`对象头` 和 `填充物`。“对象头”的作用是用来记录一个对象的实例名字、ID 和 实例状态（例如，当前实例是否“可到达”，或者当前锁的状态等等）。
  在当前的JVM版本中（Hotspot），“对象头”占用的字节数如下：
  - 一个`普通对象`，占用`8 bytes`
  - `数组`，占用 `12 bytes`，包含普通对象的 `8 bytes` + `4 bytes（数组长度`
  
  B：`基本类型`
  `boolean`、`byte` 占用 `1 byte`，`char`、`short` 占用 `2 bytes`，`int`、`float` 占用 `4 bytes`，`long`、`double` 占用 `8 bytes`
  
  C：`引用类型`
  每个引用类型占用 `4 bytes`
  
  D：`填充物`
  在Hotspot中，每个对象占用的总空间是以`8的倍数`计算的，对象占用总空间(对象头+声明变量)不足8的倍数时候，`自动补齐`。而，这些被填充的空间，我们可以称它为“填充物”。我们看下具体实例： 
  - 一个`空对象`（没有声明任何变量）占用 `8 bytes` -- > `对象头` 占用 8 bytes
  - 只声明了一个`boolean`类型变量的类，占用 `16 bytes` --> `对象头(8 bytes)` + `boolean (1 bytes)` + `填充物（7 bytes）`
  - 声明了`8个boolean`类型变量的类，占用 `16 bytes` --> `对象头(8 bytes)` + `boolean (1 bytes)` * `8`
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-28T18:33:43.632Z"
updatedAt: "2017-08-28T18:46:27.719Z"
