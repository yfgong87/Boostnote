type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Is Symmetric Tree"
content: '''
  # Is Symmetric Tree
  Therefore, the question is: when are two trees a mirror reflection of each other?
  
  Two trees are a mirror reflection of each other if:
  - Their two roots have the same value.
  - The right subtree of each tree is a mirror reflection of the left subtree of the other tree.
  
  Time `O(n)`, Space `O(height of tree)`
  ```java
  class Solution {
      public boolean isSymmetric(TreeNode root) {
          return isSymmetric(root, root);
      }
      
      public boolean isSymmetric(TreeNode node1, TreeNode node2){
          if(node1 == null && node2 == null){
              return true;
          }
          if(node1 == null || node2 == null){
              return false;
          }
          if(node1.val != node2.val){
              return false;
          }
          return isSymmetric(node1.left, node2.right) && isSymmetric(node1.right, node2.left);
      }
  }
  ```
  解法二，BFS
  
  Instead of recursion, we can also use iteration with the aid of a queue. Each two consecutive nodes in the queue should be equal, and their subtrees a mirror of each other. Initially, the queue contains root and root. Then the algorithm works similarly to BFS, with some key differences. Each time, two nodes are extracted and their values compared. Then, the right and left children of the two nodes are inserted in the queue in opposite order. The algorithm is done when either the queue is empty, or we detect that the tree is not symmetric (i.e. we pull out two consecutive nodes from the queue that are unequal).
  
  
  ```java
  public boolean isSymmetric(TreeNode root) {
      Queue<TreeNode> q = new LinkedList<>();
      q.add(root);
      q.add(root);
      while (!q.isEmpty()) {
          TreeNode t1 = q.poll();
          TreeNode t2 = q.poll();
          if (t1 == null && t2 == null) continue;
          if (t1 == null || t2 == null) return false;
          if (t1.val != t2.val) return false;
          q.add(t1.left);
          q.add(t2.right);
          q.add(t1.right);
          q.add(t2.left);
      }
      return true;
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-12-10T17:39:03.321Z"
updatedAt: "2017-12-10T17:49:43.085Z"
