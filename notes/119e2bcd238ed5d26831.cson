type: "MARKDOWN_NOTE"
folder: "ca7b6b3755f93c46a5f8"
title: "Queue"
content: '''
  # Queue
  - The java.util.Queue is a subtype of `java.util.Collection` interface. It is an ordered list of objects with its use limited to `inserting` elements at the `end` of list and `deleting` elements from the `start` of list i.e. it follows `FIFO` principle.
  - Since it is an interface, we need a concrete class during its declaration. There are many ways to initialize a Queue object, most common being 1) As a `Priority Queue`, 2) As a `LinkedList`
  ```java
  Queue<TreeNode> queue = new LinkedList<TreeNode>();
  ```
  - Please note that both the implementations are not thread safe. `PriorityBlockingQueue` is one alternative implementation if you need a thread safe implementation.
  
  ### Operations on Queue :
  - Since it is a subtype of Collections class, it inherits all the methods of it namely `size`(), `isEmpty`(), `contains`() etc.
  #### These three methods throw exception
  - `add`(): Adds an element at the tail of queue. More specifically, at the last of linkedlist if it is used, or according to the priority in case of priority queue implementation.
  - `remove`(): Removes and returns the head of the queue. Throws NoSuchElementException when queue is empty.
  - `element`(): Similar to peek(). Throws NoSuchElementException if queue is empty.
  #### These three methods return specific value
  - `offer`(): Inserts an element if possible, otherwise returning `false`.
  - `poll`(): Removes and returns the head of the queue. Returns `null` if queue is empty.
  - `peek`(): To view the head of queue without removing it. Returns `null` if queue is empty.
  #### Inherit from `Collection`
  `addAll`, `clear`, `contains`, `containsAll`, `equals`, `hashCode`, `isEmpty`, `iterator`, `remove`, `removeAll`, `retainAll`, `size`, `toArray`, `toArray`
  
  
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-12T14:54:35.945Z"
updatedAt: "2017-09-05T04:05:06.028Z"
