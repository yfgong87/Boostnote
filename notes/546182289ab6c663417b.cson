type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Merge Two Binary Tree"
content: '''
  # Merge Two Binary Tree
  - We can traverse both the given trees in a `preorder` fashion. 
  - At every step, we check if the current node exists for both the trees. 
  - If at any step, one of the two TreeNode happens to be null, we return the other TreeNode.
  - If both tree node is not null, we add the values in the current nodes of both the trees and update the value in the current node of the first tree. 
  - At every step, we also call the original function mergeTrees() with the left children and then with the right children of the current nodes of the two trees. 
  - At the end, the first tree will represent the required resultant merged binary tree.
  ```java
  public class Solution {
      public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
          if(t1 == null){
              return t2;
          }
          if(t2 == null){
              return t1;
          }
          t1.val += t2.val; //这里用preOrder，postOrder或者InOrder都可以
          t1.left = mergeTrees(t1.left, t2.left);
          t1.right = mergeTrees(t1.right, t2.right);
          return t1;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-01T02:02:31.746Z"
updatedAt: "2018-01-08T01:35:22.281Z"
