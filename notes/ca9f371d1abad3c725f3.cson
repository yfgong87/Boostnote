type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Swap Nodes"
content: '''
  # Swap Nodes
  ### Swap nodes in pairs
  Given `1->2->3->4`, you should return the list as `2->1->4->3`
  ```java
  class Solution {
      public ListNode swapPairs(ListNode head) {
          // curr -> n1 -> n2 -> temp ... -> null
          // curr -> n1 <- n2    temp ... -> null
          // curr -> n2 -> n1 -> temp ... -> null
          ListNode dummy = new ListNode(0), curr = dummy;
          dummy.next = head;
          while(curr.next != null && curr.next.next != null){
              ListNode n1 = curr.next;
              ListNode n2 = curr.next.next;
              
              ListNode temp = n2.next;
              n2.next = n1;
              n1.next = temp;
              curr.next = n2;
              curr = n1;
          }
          return dummy.next;
      }
  }
  ```
  ### Swap Two nodes in LinkedList
  ```java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  
  
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  
  public class Solution {
      /*
       * @param head: a ListNode
       * @param v1: An integer
       * @param v2: An integer
       * @return: a new head of singly-linked list
       */
      public ListNode swapNodes(ListNode head, int v1, int v2) {
          // write your code here
          ListNode dummy = new ListNode(0), curr = dummy;
          dummy.next = head;
          ListNode prev1 = null, prev2 = null;
          //找到 prev1 和 prev2
          while(curr.next != null){
              if(curr.next.val == v1){
                  prev1 = curr;
              }
              if(curr.next.val == v2){
                  prev2 = curr;
              }
              curr = curr.next;
          }
          //排除 node1 == node2
  		//	  node2Prev -> node2/node1	
  		//排除 node1Prev -> node2/node1
          if(prev1 == prev2 || prev1 == null || prev2 == null){
              return dummy.next;
          }
          //保证 node1 一定在 node2 前面
  		//prev2 -> prev1 -> node1
          if(prev2.next == prev1){
              ListNode temp = prev2;
              prev2 = prev1;
              prev1 = temp;
          }
          
          ListNode node1 = prev1.next;
          ListNode node2 = prev2.next;
          //				   node1
          //特殊情况：prev1 -> prev2 -> node2 -> temp
          if (prev1.next == prev2) {
              ListNode temp = node2.next;
  			node2.next = node1;
  			node1.next = temp;
  			prev1.next = node2;
          } else { //普通情况 //prev1 -> node1 -> node1.next -> prev2 -> node2 -> temp
              ListNode temp = node2.next;
  			node2.next = node1.next;
  			node1.next = temp;
  			prev2.next = node1;
  			prev1.next = node2;
          }
  
          return dummy.next;
      }
  }
  ```
'''
tags: [
  "LinkedList"
]
isStarred: false
isTrashed: false
createdAt: "2017-12-20T01:05:32.929Z"
updatedAt: "2018-01-02T03:00:39.760Z"
