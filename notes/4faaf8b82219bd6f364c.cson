type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Binary Tree Iterator"
content: '''
  # Binary Tree Iterator
  Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.
  
  Calling `next()` will return the next smallest number in the BST.
  
  Note: `next()` and `hasNext()` should run in average `O(1)` time and uses `O(h)` memory, where `h` is the height of the tree.
  
  If the returned TreeNode doesn't have a right branch, it is O(1). If it has a right branch, it will traversal until its right child's left-most TreeNode. Now, considering the code under "// traversal right branch". After I use next() to go through the entire tree once, this part of code will traversal each node with a right child once. The total run time of this part is O(n). And since I go through the entire tree, the `average` `next()` run time is `O(n) / n = O(1)`
  ```java
  public class BSTIterator {
      Stack<TreeNode> stack = new Stack<>();
      public BSTIterator(TreeNode root) {
          while(root != null){
              stack.push(root);
              root = root.left;
          }
      }
  
      /** @return whether we have a next smallest number */
      public boolean hasNext() {
          return !stack.isEmpty();
      }
  
      /** @return the next smallest number */
      public int next() {
          TreeNode head = stack.pop();
          int smallest = head.val;
          head = head.right;
          while(head != null){
              stack.push(head);
              head = head.left;
          }
          return smallest;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-12-13T09:18:01.059Z"
updatedAt: "2017-12-13T09:19:16.499Z"
