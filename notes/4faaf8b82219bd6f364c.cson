type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Binary Search Tree Iterator"
content: '''
  # Binary Search Tree Iterator
  Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.
  
  Calling `next()` will return the next smallest number in the BST.
  
  ### Solution: 
  Since BST keeps an acending array when you traverse it in preOrder, we will implement a preOrder traversal of the BST
  
  ### Time Complexity: 
  - `hasNext`: `O(1)`.
  - `BSTIterator` constructor + `next()` together should run in average `O(1)` time. If the returned TreeNode doesn't have a right branch, it is `O(1)`. If it has a right branch, it will traversal until its right child's left-most TreeNode. If I eventually traverse through the entire tree, the `average` `next()` run time will be `O(n) / n = O(1)`
  
  ### Space: 
  Worst case we use `O(h)` memory, where `h` is the height of the tree.
  ```java
  public class BSTIterator {
      Stack<TreeNode> stack = new Stack<>();
      public BSTIterator(TreeNode root) {
          while(root != null){
              stack.push(root);
              root = root.left;
          }
      }
  
      /** @return whether we have a next smallest number */
      public boolean hasNext() {
          return !stack.isEmpty();
      }
  
      /** @return the next smallest number */
      public int next() {
          TreeNode head = stack.pop();
          int smallest = head.val;
          head = head.right;
          while(head != null){
              stack.push(head);
              head = head.left;
          }
          return smallest;
      }
  }
  ```
'''
tags: [
  "Linkedin"
  "Binary_Tree"
]
isStarred: false
isTrashed: false
createdAt: "2017-12-13T09:18:01.059Z"
updatedAt: "2018-01-23T05:07:19.319Z"
