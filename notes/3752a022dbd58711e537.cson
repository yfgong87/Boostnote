type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Binary Tree Flipping / Upside down"
content: '''
  # Binary Tree Flipping / Upside down
  Given a binary tree where all the right nodes are either `leaf` nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.
  右节点一定是leaf node，这个条件很重要
  
          1                 1
         / \\               / 
        2   3             2 - 3
       / \\               /
      4   5             4 - 5
  
  Time Complexity: `O(height of tree)`
  
  Non-Recursion Solution:
  Starting from the bottom left node, Traverse the tree in the order of `left -> root`. 
  - First going down towards the bottom left side, store all node in a `stack`. Then poll each node out in order. 
  - If the node is the bottom left most node, we set this node as our new Root, then do nothing and go to its parent node. 
  - In the parent node, we rearrange the pointer of the nodes. Parents' right child now need to be the left child of the Parents' left child. And the Parents' left child's right child has to be the Parent node. 
  - We also need to set the Parents' left and right child to `null`, because if we don't do that there will be reciprocal link between parents and child, this will lead to problem when printing the tree
  ```java
  public class Solution {
      /*
       * @param root: the root of binary tree
       * @return: new root
       */
      public TreeNode upsideDownBinaryTree(TreeNode root) {
          // write your code here
          Stack<TreeNode> stack = new Stack<>();
          TreeNode newRoot = null;
          while(root != null){
              stack.push(root);
              root = root.left;
          }
          while(!stack.isEmpty()){
              TreeNode head = stack.pop();
              if(head.left == null){
                  newRoot = head;
                  continue;
              }
              head.left.right = head;
              head.left.left = head.right;
              head.right = null;
              head.left = null;
          }
          return newRoot;
      }
  }
  ```
  Recursion：递归到左下的点时将其作为`newRoot`返回，每一层做完操作后都把`newRoot`传回上一层
  ```java
  public class Solution {
      /*
       * @param root: the root of binary tree
       * @return: new root
       */
      public TreeNode upsideDownBinaryTree(TreeNode root) {
          // Write your code here     
          if (root == null || root.left == null) {
              return root;
          }
          TreeNode new_root = upsideDownBinaryTree(root.left);
          root.left.left = root.right;
          root.left.right = root;
          root.right = null;
          root.left = null;
          return new_root;
      }
  }
  ```
  类似的递归：Reverse LinkedList 的递归写法
  ```java
  public class Solution {
      /*
       * @param head: n
       * @return: The new head of reversed linked list.
       */
      public ListNode reverse(ListNode head) {
          // write your code here
          if(head == null || head.next == null){
              return head;
          }
          ListNode newHead = reverse(head.next);
          head.next.next = head;
          head.next = null;
          return newHead;
          
      }
  }
  ```
'''
tags: [
  "Binary_Tree"
  "Linkedin"
]
isStarred: false
isTrashed: false
createdAt: "2017-10-09T18:19:00.092Z"
updatedAt: "2018-01-20T02:03:38.982Z"
