type: "MARKDOWN_NOTE"
folder: "0ef4dc321cdc22cb8b00"
title: "Maximum Width of Binary Tree"
content: '''
  # Maximum Width of Binary Tree
  Input: 
  
             1
           /   \\
          3     2
         / \\     \\  
        5   3     9 
  	  
  Output: 4
  Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
  
  Input: 
  
            1
           /  
          3    
         / \\       
        5   3     
  
  Output: 2
  Explanation: The maximum width existing in the third level with the length 2 (5,3).
  
  Input: 
  
            1
           / \\
          3   2 
         /        
        5      
  
  Output: 2
  Explanation: The maximum width existing in the second level with the length 2 (3,2).
  
  Input: 
  
            1
           / \\
          3   2
         /     \\  
        5       9 
       /         \\
      6           7
  Output: 8
  Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).
  
  ### Summary:
  Assigning a label for each node in the tree based on their relative horizontal location vs the root. The root will be 0. Its left child will be -1, right child will be 1, etc.
  Level Order Traversal the tree, get the left and right most node, calculate the difference of their label, then compare with a running max value
  ```java
  class Solution {
      class returnType{
          int label;
          TreeNode node;
          returnType(int label, TreeNode node){
              this.label = label;
              this.node = node;
          }
      }
      public int widthOfBinaryTree(TreeNode root) {
          if(root == null){
              return 0;
          }
          Queue<returnType> queue = new LinkedList<>();
          queue.offer(new returnType(0, root));  //root的index为0
          //注意max最少为1(leaf node)
          int max = 1;
          while(!queue.isEmpty()){
              int size = queue.size();
              int left = 0;
              int right = 0;
              for(int i = 0; i < size; i++){
                  returnType head = queue.poll();
                  if(i == 0){
                      left = head.label;
                  }
                  if(i == size - 1){
                      right = head.label;
                  }
                  if(head.node.left != null){
                      queue.offer(new returnType(2 * head.label + 1, head.node.left));
                  }
                  if(head.node.right != null){
                      queue.offer(new returnType(2 * head.label + 2, head.node.right));
                  }
                  max = Math.max(max, right - left + 1);
              }
          }
          return max;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-30T03:04:02.281Z"
updatedAt: "2017-12-11T04:24:06.104Z"
