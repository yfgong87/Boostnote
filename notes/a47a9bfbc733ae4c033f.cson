type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "System Longest File Path"
content: '''
  # System Longest File Path
  The string `"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext"` represents:
  ```java
  dir
  	subdir1
    	subdir2
  		file.ext
  ```	
  Longest File Path is `dir/subdir1/file.ext`
  
  Solution:
  - Seperate input by `'\\n'`
  - Count how many `'\\t'` in the head of each String to calculate which level the directory is
  - Use a prefixSum array to keep track of the maximum file length up to each level. For example, `sum[i]` will be the max sum at level i. 
  - For each level we add the maximum level length to the last element in prefixSum array, so the prefixSum array starts from 1.
  - Whenever we don't see a `'.'`, meaning we are not at the bottom level, we need to append a forward slash `'/'` after the directory name
  ```java
  public class Solution {
      /*
       * @param input: an abstract file system
       * @return: return the length of the longest absolute path to file
       */
      public int lengthLongestPath(String input) {
          // write your code here
          if(input.length() == 0){
              return 0;
          }
          String[] strArray = input.split("\\n");
          int maxSum = 0;
          int[] sums = new int[strArray.length + 1];
          for(String str : strArray){
              //'\\t'是一个字符
              //+2 是为了留出 sums[0] 方便后面当 level = 1 时执行 sums[level - 1]
              //顶层 str.lastIndexOf('\\t')返回 -1, -1 + 2 = 1
              int level = str.lastIndexOf('\\t') + 2;
              int len = str.length() - (level - 1); // 每一层有 level - 1 个 '\\t'
              if(str.contains(".")){
                  //最后一层不用加'/'
                  maxSum = Math.max(maxSum, sums[level - 1] + len);
              } else {
                  //每层结束后要加一个'/'
                  sums[level] = sums[level - 1] + len + 1;
              }
          }
          return maxSum;
      }
  }
  ```
'''
tags: [
  "prefixSum"
  "String"
]
isStarred: false
isTrashed: false
createdAt: "2017-09-20T20:04:52.104Z"
updatedAt: "2018-01-22T19:42:20.143Z"
