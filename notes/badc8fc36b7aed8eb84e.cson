type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "3Sum & 4Sum"
content: '''
  # 3Sum & 4Sum
  ### 3Sum
  数组排序 -> 枚举第一个数 -> 在第一个数往后的`subArray`中用`Two sum`找第二和第三个数
  注意去重
  ```java
  public class Solution {
      /*
       * @param numbers: Give an array numbers of n integer
       * @return: Find all unique triplets in the array which gives the sum of zero.
       */
      public List<List<Integer>> threeSum(int[] numbers) {
          // write your code here
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          if(numbers == null || numbers.length < 3){
              return results;
          }
          Arrays.sort(numbers);
          int target = 0;
          int left = 0;
          int right = 0;
          //优化：最后两个数不用看(循环到numbers.length - 2即可)
          for(int i = 0; i < numbers.length - 2 ; i++){
              //第一个数去重
              if(i > 0 && numbers[i] == numbers[i - 1]){
                  continue;
              }
              target = -numbers[i];
              left = i + 1;
              right = numbers.length - 1;
              helper(results, left, right, target, numbers);
          }
          return results;
      }
      private void helper(List<List<Integer>> results,
                          int left,
                          int right,
                          int target,
                          int[] numbers){
          while(left < right){
              if(numbers[left] + numbers[right] < target){
                  left++;
              } else if (numbers[left] + numbers[right] > target){
                  right--;
              } else {
                  //Deep Copy
                  ArrayList<Integer> result = new ArrayList<Integer>();
                  result.add(-target);
                  result.add(numbers[left]);
                  result.add(numbers[right]);
                  results.add(result);
                  left++;
                  right--;
                  //第二个数去重
                  while(left < right && numbers[left] == numbers[left - 1]){
                      left++;
                  }
                  //第三个数去重
                  while(left < right && numbers[right] == numbers[right + 1]){
                      right--;
                  }
              }
          }
      }
  }
  ```
  ### 3Sum Closest
  ```java
  public class Solution {
      /*
       * @param numbers: Give an array numbers of n integer
       * @param target: An integer
       * @return: return the sum of the three integers, the sum closest target.
       */
      int min = Integer.MAX_VALUE;
      int sum = 0;
      public int threeSumClosest(int[] numbers, int target) {
          // write your code here
          Arrays.sort(numbers);
          for(int i = 0; i < numbers.length; i++){
              int complement = target - numbers[i];
              int left = i + 1;
              int right = numbers.length - 1;
              helper(numbers, left, right, complement, numbers[i]);
          }
          return sum;
      }
      
      public void helper(int[] numbers, int left, int right, int complement, int num){
          while(left < right){
              int dif = numbers[left] + numbers[right] - complement;
              if(Math.abs(dif) < min){
                  min = Math.abs(dif);
                  sum = numbers[left] + numbers[right] + num;
              }
              if(dif < 0){
                  left++;
              } else{
                  right--;
              }
          }
      }
  }
  ```
  ### 3Sum Smaller
  ```java
  class Solution {
      int count = 0;
      public int threeSumSmaller(int[] nums, int target) {
          if(nums == null || nums.length < 3){
              return count;
          }
          Arrays.sort(nums);
          for(int i = 0; i < nums.length; i++){
              int left = i + 1;
              int right = nums.length - 1;
              int complement = target - nums[i];
              helper(nums, left, right, complement);
          }
          return count;
      }
      
      public void helper(int[] nums, int left, int right, int complement){
          while(left < right){
              int dif = nums[left] + nums[right] - complement;
              if(dif < 0){
                  count += right - left;
                  left++;
              } else {
                  right--;
              }
          }
      }
  }
  ```
  ### 4Sum
  ```java
  public class Solution {
      /*
       * @param numbers: Give an array
       * @param target: An integer
       * @return: Find all unique quadruplets in the array which gives the sum of zero
       */
      public List<List<Integer>> fourSum(int[] numbers, int target) {
          // write your code here
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          if(numbers == null || numbers.length < 4){
              return results;
          }
          Arrays.sort(numbers);
          for(int i = 0; i < numbers.length; i++){
              //第一个数去重
              if(i > 0 && numbers[i] == numbers[i - 1]){
                  continue;
              }
              for(int j = i + 1; j < numbers.length; j++){
                  //第二个数去重
                  if(j > i + 1 && numbers[j] == numbers[j - 1]){
                      continue;
                  }
                  int complement = target - numbers[i] - numbers[j];
                  int left = j + 1;
                  int right = numbers.length - 1;
                  helper(results, numbers, left, right, complement, i, j);
              }
          }
          return results;
      }
      private void helper (List<List<Integer>> results,
                           int[] numbers,
                           int left,
                           int right,
                           int target,
                           int i,
                           int j){
          while(left < right) {
              if(numbers[left] + numbers[right] > target){
                  right--;
              } else if (numbers[left] + numbers[right] < target){
                  left++;
              } else {
                  List<Integer> solution = new ArrayList<Integer>();
                  solution.add(numbers[i]);
                  solution.add(numbers[j]);
                  solution.add(numbers[left]);
                  solution.add(numbers[right]);
                  results.add(solution);
                  left++;
                  right--;
                  //第三个数去重
                  while(left < right && numbers[left] == numbers[left - 1]){
                      left++;
                  }
                  //第四个数去重
                  while(left < right && numbers[right] == numbers[right + 1]){
                      right--;
                  }
              }
          }
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-08T19:24:18.564Z"
updatedAt: "2017-12-29T02:16:41.534Z"
