createdAt: "2018-03-25T18:09:22.108Z"
updatedAt: "2018-03-26T20:00:53.623Z"
type: "MARKDOWN_NOTE"
folder: "826d661fa478dc56691c"
title: "Build ContentProivder"
content: '''
  # Build ContentProivder
  ### Flow of Data
  `UI` -> `Resolver(URI)` -> `Provider` -> `URIMatcher` -> `SQL code` -> `Database` -> `UI`
  ### Steps
  1. Create a class that extends from the cotent provider and implement the `onCreate()` function
  	- `TaskContentProvider` extends `ContentProvider`
  	- All Overrided Methods are required in this class
  ```java
  public class TaskContentProvider extends ContentProvider {
  
      private TaskDbHelper mTaskDbHelper;
  
      /* onCreate() is where you should initialize anything you’ll need to setup
      your underlying data source.
      In this case, you’re working with a SQLite database, so you’ll need to
      initialize a DbHelper to gain access to it.
       */
      @Override
      public boolean onCreate() {
          // Complete onCreate() and initialize a TaskDbhelper on startup
          // [Hint] Declare the DbHelper as a global variable
          Context context = getContext();
          mTaskDbHelper = new TaskDbHelper(context);
          return true;
      }
  	
  	// Return a newly created Uri for the location of new data
      @Override
      public Uri insert(@NonNull Uri uri, ContentValues values) {
          throw new UnsupportedOperationException("Not yet implemented");
      }
  	
  	// Return a cursor containing row or rows of data
      @Override
      public Cursor query(@NonNull Uri uri, String[] projection, String selection,
                          String[] selectionArgs, String sortOrder) {
          throw new UnsupportedOperationException("Not yet implemented");
      }
  
  	// Return how many rows are affected
      @Override
      public int delete(@NonNull Uri uri, String selection, String[] selectionArgs) {
          throw new UnsupportedOperationException("Not yet implemented");
      }
  	
  	// Return how many rows are affected 
      @Override
      public int update(@NonNull Uri uri, ContentValues values, String selection,
                        String[] selectionArgs) {
          throw new UnsupportedOperationException("Not yet implemented");
      }
  	
  	// Return a MIME type of the content being returned
      @Override
      public String getType(@NonNull Uri uri) {
          throw new UnsupportedOperationException("Not yet implemented");
      }
  
  }
  ```
  2. Register the content provider in the `Manifest`
  ```xml
  <?xml version="1.0" encoding="utf-8"?>
  <manifest>
      <application>
          <!-- Register the TaskContentProvider -->
          <!-- Set name, authorities, and exported attributes -->
          <!-- exported = false limits access to this ContentProvider to only this app -->
          <provider
              android:name="com.example.android.todolist.data.TaskContentProvider"
              android:authorities="com.example.android.todolist"
              android:exported="false"/>
  
      </application>
  </manifest>
  ```
  3. Define URIs that identify the `Task Content Provider` and the different data types it can return
  	- `<scheme>//<authority>/<path>`
  		- Task table 的 priority column: `content://com.android.example.todolist/tasks/priority`
  		- Task table 的 id 为 2 的 item (row): `content://com.android.example.todolist/tasks/2`
  4. Add these URIs to the `Contract` class
  	- URI that are commonly used should be stored in the `Contrast` class as constants (`static final`)
  		- `Scheme` = `content://`
  		- `AUTHORITY` = reference to the provider (com.example.android.todolist)
  		- `BASE_CONTENT_URI` = `Scheme` + `AUTHORITY`
  		- `PATH_TODATA` = to specific data
  		- `CONTENT_URI` = `BASE_CONTENT_URI` + `PATH_TODATA`
  	```java
  	public class TaskContract {
  
      /* COMPLETED (1) Add content provider constants to the Contract
       Clients need to know how to access the task data, and it's your job to provide
       these content URI's for the path to that data:
          1) Content authority,
          2) Base content URI,
          3) Path(s) to the tasks directory
          4) Content URI for data in the TaskEntry class
        */
  
      // The authority, which is how your code knows which Content Provider to access
      public static final String AUTHORITY = "com.example.android.todolist";
  
      // The base content URI = "content://" + <authority>
      public static final Uri BASE_CONTENT_URI = Uri.parse("content://" + AUTHORITY);
  
      // Define the possible paths for accessing data in this contract
      // This is the path for the "tasks" directory
      public static final String PATH_TASKS = "tasks";
  
      /* TaskEntry is an inner class that defines the contents of the task table */
      public static final class TaskEntry implements BaseColumns {
  
          // TaskEntry content URI = base content URI + path
          public static final Uri CONTENT_URI =
                  BASE_CONTENT_URI.buildUpon().appendPath(PATH_TASKS).build();
  
  
          // Task table and column names
          public static final String TABLE_NAME = "tasks";
  
          // Since TaskEntry implements the interface "BaseColumns", it has an automatically produced
          // "_ID" column in addition to the two below
          public static final String COLUMN_DESCRIPTION = "description";
          public static final String COLUMN_PRIORITY = "priority";
  
  
          /*
          The above table structure looks something like the sample table below.
          With the name of the table and columns on top, and potential contents in rows
  
          Note: Because this implements BaseColumns, the _id column is generated automatically
  
          tasks
           - - - - - - - - - - - - - - - - - - - - - -
          | _id  |    description     |    priority   |
           - - - - - - - - - - - - - - - - - - - - - -
          |  1   |  Complete lesson   |       1       |
           - - - - - - - - - - - - - - - - - - - - - -
          |  2   |    Go shopping     |       3       |
           - - - - - - - - - - - - - - - - - - - - - -
          .
          .
          .
           - - - - - - - - - - - - - - - - - - - - - -
          | 43   |   Learn guitar     |       2       |
           - - - - - - - - - - - - - - - - - - - - - -
  
           */
  
      	}
  	}
  	```
  5. Build a `URIMatcher` to match URI patterns to integers
  	- Wildcard symbols:
  		- `path` - match `path` exactly
  		- `path/#` - match `path` followed by a `number`, `#` matches a string of numeric characters
  		- `path/*` - match `path` followed by a `string`, `*` matches a string of any length
  		- `path/*/others/#` - match `path` followed by a `string` followed by `'other'` followed by a `number`
  ```java
  public class TaskContentProvider extends ContentProvider {
  
      // COMPLETED (1) Define final integer constants for the directory of tasks and a single item.
      // It's convention to use 100, 200, 300, etc for directories,
      // and related ints (101, 102, ..) for items in that directory.
      public static final int TASKS = 100;
      public static final int TASK_WITH_ID = 101;
  
      // COMPLETED (3) Declare a static variable for the Uri matcher that you construct
      private static final UriMatcher sUriMatcher = buildUriMatcher();
  
      // COMPLETED (2) Define a static buildUriMatcher method that associates URI's with their int match
      /**
       Initialize a new matcher object without any matches,
       then use .addURI(String authority, String path, int match) to add matches
       */
      public static UriMatcher buildUriMatcher() {
  
          // Initialize a UriMatcher with no matches by passing in NO_MATCH to the constructor
          UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
  
          /*
            All paths added to the UriMatcher have a corresponding int.
            For each kind of uri you may want to access, add the corresponding match with addURI.
            The two calls below add matches for the task directory and a single item by ID.
           */
  		// UriMatcher.addURI(String Authority, String path, int code)
  		
  		// match the entire table
          uriMatcher.addURI(TaskContract.AUTHORITY, TaskContract.PATH_TASKS, TASKS);
  		// match a single item
          uriMatcher.addURI(TaskContract.AUTHORITY, TaskContract.PATH_TASKS + "/#", TASK_WITH_ID);
  
          return uriMatcher;
      }
  }
  ```
  6. In the `Task Content Provider` class, implement the required CRUD methods
  #### Insert:
  - In `data/TaskContentProvider.java`
  ```java
  	// Implement insert to handle requests to insert a single new row of data
      @Override
      public Uri insert(@NonNull Uri uri, ContentValues values) {
          // COMPLETED (1) Get access to the task database (to write new data to)
          final SQLiteDatabase db = mTaskDbHelper.getWritableDatabase();
  
          // COMPLETED (2) Write URI matching code to identify the match for the tasks directory
          int match = sUriMatcher.match(uri);
          Uri returnUri; // URI to be returned
  
          switch (match) {
              case TASKS:
                  // COMPLETED (3) Insert new values into the database
                  // Inserting values into tasks table
                  long id = db.insert(TABLE_NAME, null, values);
                  if ( id > 0 ) {
                      returnUri = ContentUris.withAppendedId(TaskContract.TaskEntry.CONTENT_URI, id);
                  } else {
                      throw new android.database.SQLException("Failed to insert row into " + uri);
                  }
                  break;
              // COMPLETED (4) Set the value for the returnedUri and write the default case for unknown URI's
              // Default case throws an UnsupportedOperationException
              default:
                  throw new UnsupportedOperationException("Unknown uri: " + uri);
          }
  
          // COMPLETED (5) Notify the resolver if the uri has been changed, and return the newly inserted URI
          getContext().getContentResolver().notifyChange(uri, null);
  
          // Return constructed uri (this points to the newly inserted row of data)
          return returnUri;
      }
  ```	
  - In `AddTaskActivity.java`: how to use `ContentResolver.insert()`
  ```java
  // Create new empty ContentValues object
  ContentValues contentValues = new ContentValues();
  // Put the task description and selected mPriority into the ContentValues
  contentValues.put(TaskContract.TaskEntry.COLUMN_DESCRIPTION, input);
  contentValues.put(TaskContract.TaskEntry.COLUMN_PRIORITY, mPriority);
  // Insert the content values via a ContentResolver
  Uri uri = getContentResolver().insert(TaskContract.TaskEntry.CONTENT_URI, contentValues);
  ```
  #### Query:
  - In `data/TaskContentProvider.java`
  ```java
  	// Implement query to handle requests for data by URI
  	// projection = "SELECT columns"; selection = "WHERE column = ?";
      @Override
      public Cursor query(@NonNull Uri uri, String[] projection, String selection,
                          String[] selectionArgs, String sortOrder) {
  
          // COMPLETED (1) Get access to underlying database (read-only for query)
          final SQLiteDatabase db = mTaskDbHelper.getReadableDatabase();
  
          // COMPLETED (2) Write URI match code and set a variable to return a Cursor
  		// UriMatcher.match() returns the code for the matched node (added using addURI), or -1 if there is no matched node.
          int match = sUriMatcher.match(uri);
          Cursor retCursor;
  
          // COMPLETED (3) Query for the tasks directory and write a default case
          switch (match) {
              // Query for the tasks directory
              case TASKS:
                  retCursor =  db.query(TABLE_NAME,
                          projection,
                          selection,
                          selectionArgs,
                          null,
                          null,
                          sortOrder);
                  break;
  				
  			// Add a case to query for a single row of data by ID
              // Use selections and selectionArgs to filter for that ID
              case TASK_WITH_ID:
                  // Get the id from the URI
  				// content://<authority>/tasks/#
                  String id = uri.getPathSegments().get(1); // get(0) will be the tasks portion of URI
  
                  // Selection is the _ID column = ?, and the Selection args = the row ID from the URI
                  String mSelection = "_id=?";
                  String[] mSelectionArgs = new String[]{id}; // This has to be an array even if there is only 1 element
  
                  // Construct a query as you would normally, passing in the selection/args
                  retCursor =  db.query(TABLE_NAME,
                          projection,
                          mSelection,
                          mSelectionArgs,
                          null,
                          null,
                          sortOrder);
                  break;
  				
              // Default exception
              default:
                  throw new UnsupportedOperationException("Unknown uri: " + uri);
          }
  
          // COMPLETED (4) Set a notification URI on the Cursor and return that Cursor
          retCursor.setNotificationUri(getContext().getContentResolver(), uri);
  
          // Return the desired Cursor
          return retCursor;
      }
  ```
  - In `MainActivity.java`: how to use `ContentResolver.query()`
  ```java
  public class MainActivity extends AppCompatActivity implements
          LoaderManager.LoaderCallbacks<Cursor> {
  
      /**
       * Instantiates and returns a new AsyncTaskLoader with the given ID.
       * This loader will return task data as a Cursor or null if an error occurs.
       *
       * Implements the required callbacks to take care of loading data at all stages of loading.
       */
      @Override
      public Loader<Cursor> onCreateLoader(int id, final Bundle loaderArgs) {
          return new AsyncTaskLoader<Cursor>(this) {
  
              // loadInBackground() performs asynchronous loading of data
              @Override
              public Cursor loadInBackground() {
                  // Will implement to load data
  
                  // Query and load all task data in the background; sort by priority
                  // [Hint] use a try/catch block to catch any errors in loading data
  
                  try {
                      return getContentResolver().query(TaskContract.TaskEntry.CONTENT_URI,
                              null,
                              null,
                              null,
                              TaskContract.TaskEntry.COLUMN_PRIORITY);
  
                  } catch (Exception e) {
                      Log.e(TAG, "Failed to asynchronously load data.");
                      e.printStackTrace();
                      return null;
                  }
              }  
          };
      }
  }
  ```
  ### Delete:
  - In `data/TaskContentProvider.java`
  ```java
  	// Implement delete to delete a single row of data
      @Override
      public int delete(@NonNull Uri uri, String selection, String[] selectionArgs) {
  
          // COMPLETED (1) Get access to the database and write URI matching code to recognize a single item
          final SQLiteDatabase db = mTaskDbHelper.getWritableDatabase();
  
          int match = sUriMatcher.match(uri);
          // Keep track of the number of deleted tasks
          int tasksDeleted; // starts as 0
  
          // COMPLETED (2) Write the code to delete a single row of data
          // [Hint] Use selections to delete an item by its row ID
          switch (match) {
              // Handle the single item case, recognized by the ID included in the URI path
              case TASK_WITH_ID:
                  // Get the task ID from the URI path
                  String id = uri.getPathSegments().get(1);
                  // Use selections/selectionArgs to filter for this ID
                  tasksDeleted = db.delete(TABLE_NAME, "_id=?", new String[]{id});
                  break;
              default:
                  throw new UnsupportedOperationException("Unknown uri: " + uri);
          }
  
          // COMPLETED (3) Notify the resolver of a change and return the number of items deleted
          if (tasksDeleted != 0) {
              // A task was deleted, set notification
              getContext().getContentResolver().notifyChange(uri, null);
          }
  
          // Return the number of tasks deleted
          return tasksDeleted;
      }
  ```
  - In `MainActivity.java`: how to use `ContentResolver.delete()`
  ```java
  public class MainActivity extends AppCompatActivity implements
          LoaderManager.LoaderCallbacks<Cursor> {
  
      @Override
      protected void onCreate(Bundle savedInstanceState) {
  
          /*
           Add a touch helper to the RecyclerView to recognize when a user swipes to delete an item.
           An ItemTouchHelper enables touch behavior (like swipe and move) on each ViewHolder,
           and uses callbacks to signal when a user is performing these actions.
           */
          new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {
              @Override
              public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {
                  return false;
              }
  
              // Called when a user swipes left or right on a ViewHolder
              @Override
              public void onSwiped(RecyclerView.ViewHolder viewHolder, int swipeDir) {
                  // Here is where you'll implement swipe to delete
  
                  // COMPLETED (1) Construct the URI for the item to delete
                  //[Hint] Use getTag (from the adapter code) to get the id of the swiped item
                  // Retrieve the id of the task to delete
                  int id = (int) viewHolder.itemView.getTag();
  
                  // Build appropriate uri with String row id appended
                  String stringId = Integer.toString(id);
                  Uri uri = TaskContract.TaskEntry.CONTENT_URI;
                  uri = uri.buildUpon().appendPath(stringId).build();
  
                  // COMPLETED (2) Delete a single row of data using a ContentResolver
                  getContentResolver().delete(uri, null, null);
  
                  // COMPLETED (3) Restart the loader to re-query for all tasks after a deletion
                  getSupportLoaderManager().restartLoader(TASK_LOADER_ID, null, MainActivity.this);
  
              }
          }).attachToRecyclerView(mRecyclerView);
  
      }
  }
  
  ```
  ### update:
  ```java
      // Update won't be used in the final ToDoList app but is implemented here for completeness
      // This updates a single item (by it's ID) in the tasks directory
      @Override
      public int update(@NonNull Uri uri, ContentValues values, String selection,
                        String[] selectionArgs) {
  
          //Keep track of if an update occurs
          int tasksUpdated;
  
          // match code
          int match = sUriMatcher.match(uri);
  
          switch (match) {
              case TASK_WITH_ID:
                  //update a single task by getting the id
                  String id = uri.getPathSegments().get(1);
                  //using selections
                  tasksUpdated = mTaskDbHelper.getWritableDatabase().update(TABLE_NAME, values, "_id=?", new String[]{id});
                  break;
              default:
                  throw new UnsupportedOperationException("Unknown uri: " + uri);
          }
  
          if (tasksUpdated != 0) {
              //set notifications if a task was updated
              getContext().getContentResolver().notifyChange(uri, null);
          }
  
          // return number of tasks updated
          return tasksUpdated;
      }
  ```
  ### getType:
  ```java
  /* getType() handles requests for the MIME type of data
  We are working with two types of data:
  1) a directory and 2) a single row of data.
  This method will not be used in our app, but gives a way to standardize the data formats
  that your provider accesses, and this can be useful for data organization.
  For now, this method will not be used but will be provided for completeness.
   */
  @Override
  public String getType(@NonNull Uri uri) {
      int match = sUriMatcher.match(uri);
  
      switch (match) {
          case TASKS:
              // directory
              return "vnd.android.cursor.dir" + "/" + TaskContract.AUTHORITY + "/" + TaskContract.PATH_TASKS;
          case TASK_WITH_ID:
              // single item type
              return "vnd.android.cursor.item" + "/" + TaskContract.AUTHORITY + "/" + TaskContract.PATH_TASKS;
          default:
              throw new UnsupportedOperationException("Unknown uri: " + uri);
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
