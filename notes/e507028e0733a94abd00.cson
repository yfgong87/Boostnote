type: "MARKDOWN_NOTE"
folder: "0ef4dc321cdc22cb8b00"
title: "prefixSum"
content: '''
  # prefixSum
  令 `PrefixSum[i]` = `A[0]` + `A[1]` + … `A[i - 1]`, `PrefixSum[0]` = `0`
  易知构造 `PrefixSum` 耗费 `O(n)` 时间和 `O(n)` 空间
  如需计算子数组从下标i到下标j之间的所有数之和
  则有 `Sum(i~j)` = `PrefixSum[j + 1]` - `PrefixSum[i]`
  一个 `n` 个数的数组， 变成了 `prefix Sum` 数组之后，会多一个数出来，且`sum`数组的`index`相对`num`数组的`index`左移一位
  
  ### Subarray Sum
  Given an integer array, find a subarray where the sum of numbers is `0`. Your code should return the index of the first number and the index of the last number.
  ```java
  public ArrayList<Integer> subarraySum(int[] nums) {
          // write your code here
          HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
          ArrayList<Integer> result = new ArrayList<Integer>();
          int sum = 0;
          map.put(0, 0);
          //如果循环的是 sum 数组一定要注意以下几点：
          //首先在循环外面要初始化 sum[0]
          //循环的范围从 1 开始, 到 n(包括n) 结束
          //循环中使用公式 sum[i] = sum[i - 1] + num[i - 1]
          for(int i = 1; i <= nums.length; i++){
              sum += nums[i - 1];
              if(map.containsKey(sum)){
                  //返回的是数组的index，所以要 -1
                  //idx:     0 1 2  3  4          
                  //num[]:   1 2 3 -2 -3
                  //sum[]: 0 1 3 6  4  1
                  //idx:   0 1 2 3  4  5
                  //          |2 3 -2 -3|
                  result.add(map.get(sum) + 1 - 1);
                  result.add(i - 1); //
                  return result;
              } else {
                  map.put(sum, i); //将 sum[i] 放入map
              }
          }
          return result;
      }
  ```
  ### Maximum Subarray IV
  - Find a contiguous subarray which has the largest sum
  - Subarray length `>=` `k`
  ```java
  public int maxSubarray4(int[] nums, int k) {
          // Write your code here
          int n = nums.length;
          if (n < k)
              return 0;
  
          int max = 0;
          for (int i = 0; i < k; i++)
              max += nums[i];
  
          int[] sum = new int[n + 1];
          sum[0] = 0;
          
          //sum(i ~ j)要最大，sum[j + 1] - sum[i] 要最大
          //sum[i]一定要越小越好，而因为 j + 1 - i >= k，i 一定 <= j + 1 - k
          //所以要在 0 到 j + 1 - k 的范围内寻找最小的sum (j 为当前循环sum数组的index)
          int min = 0;
          //如果循环的是 sum 数组一定要注意以下几点：
          //首先在循环外面要初始化 sum[0]
          //循环的范围从 1 开始, 到 n(包括n) 结束
          //循环中使用公式 sum[i] = sum[i - 1] + num[i - 1]
          for (int i = 1; i <= n; i++) {
              sum[i] = sum[i - 1] + nums[i - 1];
              if (i >= k) {
                  if(sum[i] - min > max){
                      max = sum[i] - min;
                  }
                  //min 记录的是从 0 到 i - k 的最小 sum
                  min = Math.min(min, sum[i + 1 - k]);
              }
          }
          return max;
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-24T19:58:31.726Z"
updatedAt: "2018-01-23T02:52:23.462Z"
