type: "MARKDOWN_NOTE"
folder: "0ef4dc321cdc22cb8b00"
title: "Elementary Sorting"
content: '''
  # Elementary Sorting
  [Cheat Sheet](http://bigocheatsheet.com/)
  ### Selection Sort
  | Best TC | Average TC | Worst TC | Space C |
  | ------- | ---------  | -------- | ------- |
  | `O(n^2)`	| `O(n^2)` | 	`O(n^2)` | `O(1)` |
  ![](https://upload.wikimedia.org/wikipedia/commons/9/94/Selection-Sort-Animation.gif)
  ```java
      void selectionSort(int arr[])
      {
          int n = arr.length;
          // One by one move boundary of unsorted subarray
          for (int i = 0; i < n - 1; i++)
          {
              // Find the minimum element in unsorted array
              int minIndex = i;
              for (int j = i + 1; j < n; j++)
                  if (arr[j] < arr[minIndex])
                      minIndex = j;
   
              // Swap the found minimum element with the first element
              int temp = arr[minIndex];
              arr[minIndex] = arr[i];
              arr[i] = temp;
          }
      }
  ```
  ### Bubble Sort
  | Best TC | Average TC | Worst TC | Space C |
  | ------- | ---------  | -------- | ------- |
  | `O(n)`	| `O(n^2)` | 	`O(n^2)` | `O(1)` |
  ![](https://upload.wikimedia.org/wikipedia/commons/c/c8/Bubble-sort-example-300px.gif)
  ```java
  public void bubbleSort(int[] A) {
          // right pointer
          for(int i = A.length - 1; i > 0; i--){
              //left pointer
              for(int j = 0; j < i; j++){
                  //不断把最大数挪到数组最右边
                  //ascending, keep pushing the largest number to the right
                  if(A[j] > A[j + 1]){
                      //swap
                      int temp = A[j];
                      A[j] = A[j + 1];
                      A[j + 1] = temp;
                  }
              }
          }
      }
  ```
  ### Insertion Sort
  | Best TC | Average TC | Worst TC | Space C |
  | ------- | ---------  | -------- | ------- |
  | `O(n)`	| `O(n^2)` | 	`O(n^2)` | `O(1)` |
  ![](http://www.geeksforgeeks.org/wp-content/uploads/gq/2013/03/Insertion-Sort.jpg)
  ![](https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif)
  ```java
  public static int[] insertionSort(int[] array){
          //1 2 3  5    4
          //      j-1  i/j
          for (int i = 1; i < array.length; i++) {
              for(int j = i ; j > 0 ; j--){
                  //如果后一个数小于前一个数，swap
                  //不断把最小数挪到数组最左边
                  if(array[j] < array[j - 1]){
                      //swap
                      int temp = array[j];
                      array[j] = array[j - 1];
                      array[j - 1] = temp;
                  }
              }
          }
          return input;
      }
      
  //Insertion Sort a LinkedList
  //新建一个链表，把旧链表的 head 不断向新链表插入 node
  //每次插入时都跟新链表的所有 node 比较直到找到最后一个比 head.val 小的 node，再插入
  //head
  //  5 -> 2 -> 3 -> 4 -> 1 -> null
  //  ins
  // dummy -> null
  //
  //      head
  //        2 -> 3 -> 4 -> 1 -> null
  //  ins
  // dummy -> 5 -> null
  //
  //                     temp
  //            head   head.next
  //              3   ->   4   ->   1  ->  null
  //          ins
  //  dummy -> 2 -> 5 -> null
  
  public class Solution {
      /*
       * @param head: The first node of linked list.
       * @return: The head of linked list.
       */
      public ListNode insertionSortList(ListNode head) {
          // write your code here
          //dummy 指向新链表的第一个节点
          ListNode dummy = new ListNode(0);
          while(head != null){
              //每次都从新链表的第一个节点往后找
              ListNode ins = dummy;
              //找到比 head 小的最后一个节点，设为 curr
              while(ins.next != null && ins.next.val < head.val){
                  ins = ins.next;
              }
              // ins -> head -> ins.next
              ListNode temp = head.next;
              head.next = ins.next;
              ins.next = head;
              head = temp;
          }
          return dummy.next;
      }
  }
  ```
  
'''
tags: [
  "LinkedList"
]
isStarred: false
isTrashed: false
createdAt: "2017-10-11T03:23:12.937Z"
updatedAt: "2018-01-09T23:44:02.381Z"
