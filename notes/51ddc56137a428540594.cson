type: "MARKDOWN_NOTE"
folder: "54936dfc46477b1f2e19"
title: "Consistent Hashing II"
content: '''
  # Consistent Hashing II
  在 Consistent Hashing I 中我们介绍了一个比较简单的一致性哈希算法，这个简单的版本有两个缺陷：
  
  增加一台机器之后，数据全部从其中一台机器过来，这一台机器的读负载过大，对正常的服务会造成影响。
  当增加到3台机器的时候，每台服务器的负载量不均衡，为1:1:2。
  为了解决这个问题，引入了 micro-shards 的概念，一个更好的算法是这样：
  
  将 360° 的区间分得更细。从 0~359 变为一个 0 ~ n-1 的区间，将这个区间首尾相接，连成一个圆。
  当加入一台新的机器的时候，随机选择在圆周中撒 k 个点，代表这台机器的 k 个 micro-shards。
  每个数据在圆周上也对应一个点，这个点通过一个 hash function 来计算。
  一个数据该属于那台机器负责管理，是按照该数据对应的圆周上的点在圆上顺时针碰到的第一个 micro-shard 点所属的机器来决定。
  n 和 k在真实的 NoSQL 数据库中一般是 2^64 和 1000。
  
  请实现这种引入了 micro-shard 的 consistent hashing 的方法。主要实现如下的三个函数：
  
  create(int n, int k)
  addMachine(int machine_id) // add a new machine, return a list of shard ids.
  getMachineIdByHashCode(int hashcode) // return machine id
  
  当 n 为 2^64 时，在这个区间内随机基本不会出现重复。
  但是为了方便测试您程序的正确性，n 在数据中可能会比较小，所以你必须保证你生成的 k 个随机数不会出现重复。
  实际情况中可以使用一个 hash 函数对 machine_id 加上 k 个不同后缀求 micro-shards，也可以使用 k 个 hash 函数对同一个machine_id 求 micro-shards
  ```java
  public class Solution {
      /*
       * @param n: a positive integer
       * @param k: a positive integer
       * @return: a Solution object
       */
      int n, k; //n = BASE for mod; k = 每个机器的分身数目(micro shards)
      NavigableSet<Integer> set; //micro shards
      Map<Integer, List<Integer>> machines; //每个机器的<id, micro shards>
      
      public static Solution create(int n, int k) {
          // Write your code here
          Solution solution = new Solution();
          solution.n = n;
          solution.k = k;
          solution.set = new TreeSet<Integer>();
          solution.machines = new HashMap<Integer, List<Integer>>();
          return solution;
      }
  
      /*
       * @param machine_id: An integer
       * @return: a list of shard ids
       */
      public List<Integer> addMachine(int machine_id) {
          // write your code here
          List<Integer> micro_shards = new ArrayList<Integer>();
          Random random = new Random();
          //生成 k 个随机的 micro_shards
          for(int i = 0; i < k; i++){
              int micro_shard = random.nextInt(n);
              //不断生成随机数直到没有重复
              //实际可以用hash函数(machine_id_1 % n)来实现这一步
              while(set.contains(micro_shard)){
                  micro_shard = random.nextInt(n);
              }
              set.add(micro_shard);
              micro_shards.add(micro_shard);
          }
          machines.put(machine_id, micro_shards);
          return micro_shards;
      }
  
      /*
       * @param hashcode: An integer
       * @return: A machine id
       */
      public int getMachineIdByHashCode(int hashcode) {
          // write your code here
          //找到顺时针方向最接近的 micro_shard
          int micro_shard = 0;
          if(set.ceiling(hashcode) == null){
              //如果没有比 hashcode 更大的
              //说明在 hashcode 到 n 之间没有micro_shard存在，这时从 0 开始顺时针找
              micro_shard = set.ceiling(0);
          } else {
              micro_shard = set.ceiling(hashcode);
          }
          
          //找到 micro_shard 所属的 machine_id
          int machine_id = 0;
          for(Map.Entry<Integer, List<Integer>> entry : machines.entrySet()){
              List<Integer> micro_shards = entry.getValue();
              if(micro_shards.contains(micro_shard)){
                  machine_id = entry.getKey();
                  break;
              }
          }
          return machine_id;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-11-02T05:19:01.414Z"
updatedAt: "2017-11-02T15:23:48.410Z"
