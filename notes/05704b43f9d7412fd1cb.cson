createdAt: "2018-02-08T04:21:33.132Z"
updatedAt: "2018-02-08T04:25:55.970Z"
type: "MARKDOWN_NOTE"
folder: "826d661fa478dc56691c"
title: "ScrollView"
content: '''
  # ScrollView
  To make any content vertically scrollable, simply wrap that content in a `ScrollView`:
  ```xml
  <ScrollView
    android:layout_width="match_parent"
    android:layout_height="match_parent">
      <LinearLayout
          android:layout_width="match_parent"
          android:layout_height="wrap_content"
          android:orientation="vertical" >   
          
            <TextView
                android:id="@+id/tv_long"
                android:layout_width="wrap_content"
                android:layout_height="match_parent"
                android:text="@string/really_long_string" >
            </TextView>
    
            <Button
                android:id="@+id/btn_act"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="View" >
            </Button>
      </LinearLayout>
  </ScrollView>
  ```
  - `NOTE` that a ScrollView can only contain a `single child element` so if you need multiple things to be scrollable, you need to wrap that content into a layout as shown above.
  - In certain situations, you want to position content beneath the end of the scrollable content area. For example for a "terms of service" where you can only accept once you've scrolled through all the content. In this case, you might need to apply the android:fillViewport property to "true".
  
  ### Scrollable TextView
  Note that a `TextView` doesn't require a `ScrollView` and if you just need a scrolling `TextView` simply set the scrollbars property and apply the correct MovementMethod:
  ```xml
  <TextView
      android:id="@+id/tv_long"
      android:layout_width="wrap_content"
      android:layout_height="match_parent"
      android:scrollbars = "vertical"
      android:text="@string/really_long_string" >
  </TextView>
  ```
  and then in the activity:
  ```java
  TextView tv = (TextView) findViewById(R.id.tv_long);
  tv.setMovementMethod(new ScrollingMovementMethod());
  ```
  Now the `TextView` will automatically scroll vertically.
  
  ### Horizontally Scrolling
  In other cases, we want content to horizontally scroll in which case we need to use the HorizontalScrollView instead like this:
  ```xml
  <HorizontalScrollView
    android:layout_width="match_parent"
    android:layout_height="match_parent">
      <LinearLayout
          android:layout_width="match_parent"
          android:layout_height="wrap_content"
          android:orientation="horizontal" >   
          <!-- child views in here -->
      </LinearLayout>
  </HorizontalScrollView>
  ```
  and now you have a horizontally scrolling view.
  
  ### Nested ScrollViews
  Adding a ScrollView within another ScrollView can be difficult. Most of the times it wonâ€™t end well. You will end up adding few workarounds. Instead, use the `NestedScrollView` as outlined [here](http://ivankocijan.xyz/android-nestedscrollview/).
  
'''
tags: []
isStarred: false
isTrashed: false
