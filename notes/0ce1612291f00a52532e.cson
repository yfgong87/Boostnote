type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Convert Binary Search Tree into DoublyLinkedList"
content: '''
  # Convert Binary Search Tree into DoublyLinkedList
  ```java
  /**
   * Definition of TreeNode:
   * public class TreeNode {
   *     public int val;
   *     public TreeNode left, right;
   *     public TreeNode(int val) {
   *         this.val = val;
   *         this.left = this.right = null;
   *     }
   * }
   * Definition for Doubly-ListNode.
   * public class DoublyListNode {
   *     int val;
   *     DoublyListNode next, prev;
   *     DoublyListNode(int val) {
   *         this.val = val;
   *         this.next = this.prev = null;
   *     }
   * }
   */
  class ReturnType{
      DoublyListNode head;
      DoublyListNode tail;
      ReturnType(DoublyListNode head, DoublyListNode tail){
          this.head = head;
          this.tail = tail;
      }
  }
  
  public class Solution {
      /*
       * @param root: The root of tree
       * @return: the head of doubly list node
       */
      public DoublyListNode bstToDoublyList(TreeNode root) {
          // write your code here
          if(root == null){
              return null;
          }
          return helper(root).head;
      }
      
      public ReturnType helper (TreeNode root){
          if(root == null){
              return null;
          }
  		// 当root为leaf node时默认其head和tail都是自己
          DoublyListNode newNode = new DoublyListNode(root.val);
          ReturnType result = new ReturnType(newNode, newNode); 
  		//Divide and Conquer / Postorder Traversal 
          ReturnType left = helper(root.left);
          ReturnType right = helper(root.right);
  		//判断有无左右儿子链表
          if(left != null){
              left.tail.next = newNode; //root的左边与左儿子链表的tail相连
              newNode.prev = left.tail;
              result.head = left.head; // root所在链表的的head为左儿子链表的head
          }
          if(right != null){
              right.head.prev = newNode; //root的右边与右儿子链表的head相连
              newNode.next = right.head;
              result.tail = right.tail;// root所在链表的的tail为右儿子链表的tail
          }
          return result;
      }
      
  }
  ```
'''
tags: [
  "LinkedList"
]
isStarred: false
isTrashed: false
createdAt: "2017-12-07T18:14:54.433Z"
updatedAt: "2018-01-09T23:46:20.666Z"
