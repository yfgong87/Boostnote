createdAt: "2017-08-21T13:19:26.494Z"
updatedAt: "2018-01-22T16:52:12.997Z"
type: "MARKDOWN_NOTE"
folder: "c7615b6dcc7b2832aa16"
title: "Quick Sort"
content: '''
  # Quick Sort
  ### Quick Sort
  | Best TC | Average TC | Worst TC | Space C |
  | ------- | ---------  | -------- | ------- |
  | `O(nlogn)`	| `O(nlogn)` | 	`O(n^2)` | `O(logn)` |
  - `logn` space complexity because of stack use in recursion
  ![](https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif)
  
  #### 快排复杂度分析
  快排的时间复杂度是：`T(n)` = `2T(n/2)` + `O(n)`
  极端情况：`T[n]` = `T[n-1]` + `T[1]` + `O(n)`，这一次的划分白玩了，划分之后一边是一个，一边是n-1个，这种极端情况的时间复杂度就是`O(n^2)`.
  
  #### 快排九章模板
  - 为什么要用`left<=right`? (`注意`: 所有partition类问题都适用)
  因为我们不希望等于的时候停下来，而是partition成两份，正在意义上分开，所以用了`left <= right` 使得结束的时候`right`一定小于`left`
  - 为什么这里是`A[left] < pivot` 而不是 `A[left] <= pivot` ?
  因为如果pivot刚好是最大值，那么我们对n个元素进行partition就会出现左边得到n个，右边得到0个元素的情况，这样左边继续递归下去有可能始终都是n（每次取出pivot都是最大值），那么会出现无限递归。
  - 为什么这里是`A[right] > pivot` 而不是 `A[right] >= pivot` ?
  同理，因为如果pivot刚好是最小值，那么我们对n个元素进行partition就会出现左边得到0个，右边得到n个元素的情况，这样右边继续递归下去有可能始终都是n（每次取出pivot都是最小值），那么会出现无限递归。
  - 为什么在while内部还要检测`left <= right`?
  防止`A[left] < pivot` 或者 `A[right] > pivot` 越界
  - 一遍 Partition 过后，`pivot`可能在左侧，也可能在右侧
  ```java
  private void quickSort(int[] A, int start, int end) {
          if (start >= end) {
              return;
          }
          
          int left = start, right = end;
          // key point 1: pivot is the value, not the index
          int pivot = A[(start + end) / 2];
  
          // key point 2: every time you compare left & right, it should be left <= right not left < right 
          while (left <= right) {
  			//A[left] < pivot，不能 <=，因为如果pivot刚好是最大值
  			//left 在向右前进时会跳过pivot直接到达array的末端
  			//导致partition产生了一个和原来同样的数组和一个空数组
  			//此时如果继续quickSort就会导致左边无限循环因为每一次的pivot都正好是最大值)
              // key point 3: A[left] < pivot not A[left] <= pivot
              while (left <= right && A[left] < pivot) {
                  left++;
              }
              // key point 3: A[right] > pivot not A[right] >= pivot
              while (left <= right && A[right] > pivot) {
                  right--;
              }
              if (left <= right) {
                  int temp = A[left];
                  A[left] = A[right];
                  A[right] = temp;
                  
                  left++;
                  right--;
              }
          }
          //最后一次循环后left已经在right的右边了
          quickSort(A, start, right);
          quickSort(A, left, end);
      }
  ```
  ### List 的 QuickSort
  - We need a utility method to find the mid point as the pivot
  - We need to partition the list into three part: left, mid and right, then we recursively sort the left and right segments, then we concatenate left, mid and right
  
  ```java
  public class Solution {
      /*
       * @param head: The head of linked list.
       * @return: You should return the head of the sorted linked list, using constant space complexity.
       */
      public ListNode sortList(ListNode head) {
          // write your code here
          if(head == null || head.next == null){
              return head;
          }
          
          ListNode dummyLeft = new ListNode(0), currLeft = dummyLeft;
          ListNode dummyMid = new ListNode(0), currMid = dummyMid;
          ListNode dummyRight = new ListNode(0), currRight = dummyRight;
          
          ListNode mid = getMid(head);
          
          while(head != null){
              if(head.val < mid.val){
                  currLeft.next = head;
                  currLeft = currLeft.next;
              } else if(head.val > mid.val){
                  currRight.next = head;
                  currRight = currRight.next;
              } else {
                  currMid.next = head;
                  currMid = currMid.next;
              }
              head = head.next;
          }
          
  		// 彻底 Partition 三部分
          currLeft.next = null;
          currMid.next = null;
          currRight.next = null;
          
          ListNode left = sortList(dummyLeft.next);
          ListNode right = sortList(dummyRight.next);
          
          return concat(left, dummyMid.next, right);
      }
      
      public ListNode getMid(ListNode head){
          ListNode slow = head;
          ListNode fast = head.next;
          while(fast != null && fast.next != null){
              slow = slow.next;
              fast = fast.next.next;
          }
          return slow;
      }
      
      public ListNode concat(ListNode left, ListNode mid, ListNode right){
          ListNode dummy = new ListNode(0), tail = dummy;
  		//tail.next = left; tail = getTail(left);
          //tail.next = mid; tail = getTail(mid);
  		//上面的写法错误，因为left有可能为null，如果left==null，那么tail=getTail(left)后tail也就等于了null，再之后的tail.next = middle，就会出现NULL POINT EXCEPTION
          tail.next = left; tail = getTail(tail);
          tail.next = mid; tail = getTail(tail);
          tail.next = right;
          return dummy.next;
      }
      
      public ListNode getTail(ListNode head){
          if(head == null){
              return head;
          }
          while(head.next != null){
              head = head.next;
          }
          return head;
      }
  }
  ```
'''
tags: [
  "PocketGem"
  "LinkedList"
]
isStarred: false
isTrashed: false
