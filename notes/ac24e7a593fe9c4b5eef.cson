createdAt: "2017-08-21T13:19:26.494Z"
updatedAt: "2018-01-06T19:28:13.337Z"
type: "MARKDOWN_NOTE"
folder: "c7615b6dcc7b2832aa16"
title: "Quick Sort"
content: '''
  # Quick Sort
  ### Quick Sort
  | Best TC | Average TC | Worst TC | Space C |
  | ------- | ---------  | -------- | ------- |
  | `O(nlogn)`	| `O(nlogn)` | 	`O(n^2)` | `O(logn)` |
  - `logn` space complexity because of stack use in recursion
  ![](https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif)
  
  #### 快排复杂度分析
  快排的时间复杂度是：`T(n)` = `2T(n/2)` + `O(n)`
  极端情况：`T[n]` = `T[n-1]` + `T[1]` + `O(n)`，这一次的划分白玩了，划分之后一边是一个，一边是n-1个，这种极端情况的时间复杂度就是`O(n^2)`.
  
  #### 快排九章模板
  - 为什么要用`left<=right`? (`注意`: 所有partition类问题都适用)
  因为我们不希望等于的时候停下来，而是partition成两份，正在意义上分开，所以用了`left <= right` 使得结束的时候`right`一定小于`left`
  - 为什么这里是`A[left] < pivot` 而不是 `A[left] <= pivot` ?
  因为如果pivot刚好是最大值，那么我们对n个元素进行partition就会出现左边得到n个，右边得到0个元素的情况，这样左边继续递归下去有可能始终都是n（每次取出pivot都是最大值），那么会出现无限递归。
  - 为什么这里是`A[right] > pivot` 而不是 `A[right] >= pivot` ?
  同理，因为如果pivot刚好是最小值，那么我们对n个元素进行partition就会出现左边得到0个，右边得到n个元素的情况，这样右边继续递归下去有可能始终都是n（每次取出pivot都是最小值），那么会出现无限递归。
  - 为什么在while内部还要检测`left <= right`?
  防止`A[left] < pivot` 或者 `A[right] > pivot` 越界
  - 一遍 Partition 过后，`pivot`可能在左侧，也可能在右侧
  ```java
  private void quickSort(int[] A, int start, int end) {
          if (start >= end) {
              return;
          }
          
          int left = start, right = end;
          // key point 1: pivot is the value, not the index
          int pivot = A[(start + end) / 2];
  
          // key point 2: every time you compare left & right, it should be left <= right not left < right 
          while (left <= right) {
  			//A[left] < pivot，不能 <=，因为如果pivot刚好是最大值
  			//left 在向右前进时会跳过pivot直接到达array的末端
  			//导致partition产生了一个和原来同样的数组和一个空数组
  			//此时如果继续quickSort就会导致左边无限循环因为每一次的pivot都正好是最大值)
              // key point 3: A[left] < pivot not A[left] <= pivot
              while (left <= right && A[left] < pivot) {
                  left++;
              }
              // key point 3: A[right] > pivot not A[right] >= pivot
              while (left <= right && A[right] > pivot) {
                  right--;
              }
              if (left <= right) {
                  int temp = A[left];
                  A[left] = A[right];
                  A[right] = temp;
                  
                  left++;
                  right--;
              }
          }
          //最后一次循环后left已经在right的右边了
          quickSort(A, start, right);
          quickSort(A, left, end);
      }
  ```
  ### List 的 QuickSort
  ```java
  /**
   * Definition for ListNode.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int val) {
   *         this.val = val;
   *         this.next = null;
   *     }
   * }
   */
  
  
  public class Solution {
      /*
       * @param head: The head of linked list.
       * @return: You should return the head of the sorted linked list, using constant space complexity.
       */
      public ListNode sortList(ListNode head) {
          // write your code here
          if(head == null || head.next == null){
              return head;
          }
          
          ListNode dummyLeft = new ListNode(0), currLeft = dummyLeft;
          ListNode dummyMid = new ListNode(0), currMid = dummyMid;
          ListNode dummyRight = new ListNode(0), currRight = dummyRight;
          
          ListNode mid = getMid(head);
          
          while(head != null){
              if(head.val < mid.val){
                  currLeft.next = head;
                  currLeft = currLeft.next;
              } else if(head.val > mid.val){
                  currRight.next = head;
                  currRight = currRight.next;
              } else {
                  currMid.next = head;
                  currMid = currMid.next;
              }
              head = head.next;
          }
          
  		// 彻底 Partition 三部分
          currLeft.next = null;
          currMid.next = null;
          currRight.next = null;
          
          ListNode left = sortList(dummyLeft.next);
          ListNode right = sortList(dummyRight.next);
          
          return concat(left, dummyMid.next, right);
      }
      
      public ListNode getMid(ListNode head){
          ListNode slow = head;
          ListNode fast = head.next;
          while(fast != null && fast.next != null){
              slow = slow.next;
              fast = fast.next.next;
          }
          return slow;
      }
      
      public ListNode concat(ListNode left, ListNode mid, ListNode right){
          ListNode dummy = new ListNode(0), tail = dummy;
  		//tail.next = left; tail = getTail(left);
          //tail.next = mid; tail = getTail(mid);
  		//上面的写法错误，因为left有可能为null，如果left==null，那么tail=getTail(left)后tail也就等于了null，再之后的tail.next = middle，就会出现NULL POINT EXCEPTION
          tail.next = left; tail = getTail(tail);
          tail.next = mid; tail = getTail(tail);
          tail.next = right;
          return dummy.next;
      }
      
      public ListNode getTail(ListNode head){
          if(head == null){
              return head;
          }
          while(head.next != null){
              head = head.next;
          }
          return head;
      }
  }
  ```
  ### 彩虹排序🌈
  待确认：时间复杂度为 `O(nlogk)`, `k`为 `color`的数目
  
  Non-randomly Picking the `Pivot`
  这里 `while (l <= r && colors[l] <= colorMid)`
  对于这个while循环为什么是<= 不是 < , 它为什么和快排不一样呢 ？
  首先由如下几个地方大家需要注意：
  因为rainbowSort的递归里 (..., colorMid + 1, colorTo)，所以colorMid的值不能混到右边去，因为右边值的区间是`[colorMid + 1, colorTo]`, 左边的值是`[colorFrom, colorMid]`。所以我们需要把等于colorMid的值放在partition的左侧。而不是像快排一样，等于pivot的值的元素放在左侧或者右侧是无所谓的。所以这里我们应该分别使用`colors[l] <= colorMid` 和 `color[r] > colorMid`
  因为`colorFrom >= colorTo`的时候我们已经return了，所以求colorMid的时候，colorFrom一定不等于colorTo。又因为`colorMid = （colorFrom + colorTo） / 2`, 所以colorMid一定不会等于最大值colorTo，也就避免了我们所说的因为pivot是最大值而导致无限递归的问题，所以我们可以放心的使用<=。
  ```java
  private void rainbowSort(int[] colors,
                        int start,
                        int end,
                        int colorFrom, 
                        int colorTo){
          if(start >= end){
              return;
          }           
          if(colorFrom >= colorTo){
              return;
          }
          int left = start;
          int right = end;
          int colorMid = (colorFrom + colorTo) / 2;
          while(left <= right){
              //注意这里是colors[left] <= colorMid,因为在递归时colorMid只能去左边
              while(left <= right && colors[left] <= colorMid){
                  left++;
              }
              while(left <= right && colors[right] > colorMid){
                  right--;
              }
              if(left <= right){
                  int temp = colors[left];
                  colors[left] = colors[right];
                  colors[right] = temp;
                  left++;
                  right--;
              }
          }
          rainbowSort(colors, start, right, colorFrom, colorMid);
          rainbowSort(colors, left, end, colorMid + 1, colorTo);
      }
  ```
  ### Counting Sort
  🌈彩虹排序的`HashMap`做法(`O(k)` extra memory)， `O(n)`时间复杂度 
  ```java
  class Solution {
      /**
       * @param colors: A list of integer
       * @param k: An integer
       * @return: nothing
       */
      public void sortColors2(int[] colors, int k) {
          // write your code here
          if(colors == null || colors.length == 0){
              return;
          }
          Map<Integer, Integer> map = new HashMap<Integer, Integer>();
          for(int color : colors){
              if(!map.containsKey(color)){
                  map.put(color, 1);
              } else {
                  map.put(color, map.get(color) + 1);
              }
          }
          int index = 0;
          for(int color = 1; color <= k; color++){
              if(!map.containsKey(color)){
                  continue;
              }
              for(int i = 0; i < map.get(color); i++){
                  colors[index] = color;
                  index++;
              }
          }
      }
  
  }
  ```
  
  ### Heap Sort
  工业界不用 Heap Sort 的原因是因为每次找到最大（小）值后要和数组的头（尾）互换，两个地址可能隔得很远
  
  | Best TC | Average TC | Worst TC | Space C |
  | ------- | ---------  | -------- | ------- |
  | `O(nlogn)`	| `O(nlogn)` | 	`O(nlogn)` | `O(1)` |
  ![](https://upload.wikimedia.org/wikipedia/commons/1/1b/Sorting_heapsort_anim.gif)
  ```java      
  public void sort(int arr[])
      {
          int n = arr.length;
   
          // Build heap (rearrange array)
          for (int i = n / 2 - 1; i >= 0; i--)
              heapify(arr, n, i);
   
          // One by one extract an element from heap
          for (int i=n-1; i>=0; i--)
          {
              // Move current root (arr[0]) to end
              int temp = arr[0];
              arr[0] = arr[i];
              arr[i] = temp;
   
              // call max heapify on the reduced heap
              heapify(arr, i, 0);
          }
      }
      /*
      Does this satisfy the head-order property?
  
                      20
              5              10
          12    15        8      2
        6   2  9
  
  
      Note that this can also be written an array format as:
          20 5 10 12 15 8 2 6 2 9
  
      No, but   12      15    are heaps.
               6  2    9
      */
      // To heapify a subtree rooted with node i which is
      // an index in arr[]. n is size of heap
      void heapify(int arr[], int n, int i)
      {
          int largest = i;  // Initialize largest as root
          int l = 2*i + 1;  // left = 2*i + 1
          int r = 2*i + 2;  // right = 2*i + 2
   
          // If left child is larger than root
          if (l < n && arr[l] > arr[largest])
              largest = l;
   
          // If right child is larger than largest so far
          if (r < n && arr[r] > arr[largest])
              largest = r;
   
          // If largest is not root
          if (largest != i)
          {
              int swap = arr[i];
              arr[i] = arr[largest];
              arr[largest] = swap;
   
              // Recursively heapify the affected sub-tree
              heapify(arr, n, largest);
          }
      }
  ```
  `Non-recursive` version
  Actually, building a heap with repeated calls of `siftDown` has a complexity of `O(n)` whereas building it with repeated calls of `siftUp` has a complexity of `O(nlogn)`.
  
  This is due to the fact that when you use `siftDown`, the time taken by each call `decreases` with the depth of the node because these nodes are closer to the leaves. When you use `siftUp`, the number of swaps `increases` with the depth of the node because if you are at full depth, you may have to swap all the way to the root. As the number of nodes grows exponentially with the depth of the tree, using siftUp gives a more expensive algorithm.
  ```java
  void siftdown(int arr[], int n, int i)
      {
          //i 是当前子树的根
          while(i < n){
            int largest = i;  // Initialize largest as root
            int l = 2*i + 1;  // left = 2*i + 1
            int r = 2*i + 2;  // right = 2*i + 2
   
            // If left child is larger than root
            if (l < n && arr[l] > arr[largest])
                largest = l;
   
            // If right child is larger than largest so far
            if (r < n && arr[r] > arr[largest])
                largest = r;
   
            // If largest is root, break
            if (largest == i) break;
            // If largest is not root, swap
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;
            // 继续检验换过去的root是不是该subtree里的最大
            i = largest;
          }
      }
      
  public void heapify(int[] A) {
        int n = A.length;
        //这里没有 -1 也能过，但是 n / 2 是没有叶子节点的，所以没有必要进入循环，n / 2 - 1 更好
        for (int i = n / 2 - 1; i >= 0; i--) {
            siftdown(A, n, i);
        } 
    }
  ```
'''
tags: [
  "PocketGem"
]
isStarred: false
isTrashed: false
