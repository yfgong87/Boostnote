createdAt: "2018-01-21T02:56:41.542Z"
updatedAt: "2018-01-21T03:24:01.182Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Binary Tree Zigzag Level Order Traversal"
content: '''
  # Binary Tree Zigzag Level Order Traversal
           3
          / \\
         9  20
       /  \\
      15   7
  
  `[
    [3],
    [20,9],
    [15,7]
  ]`
  ```java
  class Solution {
      public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          if(root == null){
              return results;
          }
          Queue<TreeNode> queue = new LinkedList<TreeNode>();
          queue.offer(root);
          boolean addToRight = true;
          while(!queue.isEmpty()){
              int size = queue.size();
              List<Integer> level = new ArrayList<Integer>();
              for(int i = 0; i < size; i++){
                  TreeNode head = queue.poll();
                  if(addToRight){
                      level.add(head.val);
                  } else {
                      level.add(0, head.val);
                  }
                  if(head.left != null){
                      queue.offer(head.left);
                  }
                  if(head.right != null){
                      queue.offer(head.right);
                  }
              }
              results.add(level);
              addToRight = !addToRight;
          }
          return results;
      }
  }
  ```
  使用 `Deque`
  ```java
  public class Solution {
      /*
       * @param root: A Tree
       * @return: A list of lists of integer include the zigzag level order traversal of its nodes' values.
       */
      public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
          // write your code here
          List<List<Integer>> result = new ArrayList<>();
          
          if (root == null){
              return result;
          }
          
          Deque<TreeNode> queue = new ArrayDeque<>();
          queue.offer(root);
          boolean pollFromLeft = true;
          while(!queue.isEmpty()){
              int size = queue.size();
              List<Integer> list = new ArrayList<>();
              for(int i = 0; i < size; i++){
                  TreeNode node;
                  if (pollFromLeft){
                      node = queue.removeFirst();
                  }else{
                      node = queue.removeLast();
                  }
                  list.add(node.val);
                  
                  if (pollFromLeft){
                      if (node.left != null){
                         queue.offerLast(node.left);
                      }
                      if (node.right != null){
                          queue.offerLast(node.right);
                      }
                  }else{
                      if (node.right != null){
                         queue.offerFirst(node.right);
                      }
                      if (node.left != null){
                          queue.offerFirst(node.left);
                      }
                  }
              }
              result.add(list);
  			pollFromLeft = !pollFromLeft;
          }
          
          return result;
      }
  }
  ```
'''
tags: [
  "Binary_Tree"
  "BFS"
  "Linkedin"
  "Deque"
]
isStarred: false
isTrashed: false
