type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Maximum Subarray"
content: '''
  # Maximum Subarray
  ### Maximum Subarray I
  Find a `contiguous` subarray which has the largest sum.
  ```java
  public int maxSubArray(int[] nums) {
          // write your code here
          int sum = 0;
          int min = 0; //这里min初始值必须是0，因为 max = sum - min
          int max = Integer.MIN_VALUE; // 如果定义为0，试试 [-1] 
          for(int i = 0; i < nums.length; i++){
              sum += nums[i];
              max = Math.max(max, sum - min);
              min = Math.min(sum, min);
          }
          return max;
      }
  ```
  ### (变化) Best time to sell a stock
  ```java
  class Solution {
      public int maxProfit(int[] prices) {
          if(prices == null || prices.length == 0){
              return 0;
          }
          int maxProfit = Integer.MIN_VALUE;
          int minPrice = prices[0];
          for(int i = 0; i < prices.length; i++){
  
              if(prices[i] - minPrice > maxProfit){
                  maxProfit = prices[i] - minPrice;
              }
              if(prices[i] < minPrice){
                  minPrice = prices[i];
              }
          }
          return maxProfit;
      }
  }
  ```
  
  ### (变化) Best time to sell a stock II
  可以多次买卖，但是必须全卖掉才能再买
  ```java
  class Solution {
      public int maxProfit(int[] prices) {
          int maxProfit = 0;
          for(int i = 0; i < prices.length - 1; i++){
  			int diff = prices[i + 1] - prices[i];
  			if(diff > 0){
  				maxProfit += diff;
  			}
          }
          return maxProfit;
      }
  }
  ```
  ### (变化) Minimum Subarray I
  ```java
  public int minSubArray(int[] nums) {
          // write your code here
          int sum = 0;
          int max = 0;  // max 必须为 0 因为 sum - max 初始值必须为 0 而不是 Interger.MAX_VALUE
          int min = Integer.MAX_VALUE;
          for(int i = 0; i < nums.length; i++){
              sum += nums[i];
              min = Math.min(min, sum - max);
              max = Math.max(sum, max);
          }
          return min;
      }
  ```
  
  ### Maximum Subarray II
  Find `two` `non-overlapping` subarrays which have the largest sum.
  ```java
  public int maxTwoSubArrays(List<Integer> nums) {
          // write your code here
          int size = nums.size();
          //算出从左往右的Maximum SubArray
          int sum = 0;
          int minSum = 0;
          int max = Integer.MIN_VALUE;
          int[] left = new int[size];
          for(int i = 0; i < size; i++){
              sum += nums.get(i);
              max = Math.max(max, sum - minSum);
              minSum = Math.min(sum, minSum);
              left[i] = max; // left[i] 为从 0 开始，从左往右截至 i 为止的所有 subArray 中的 Maximum SubArray
          }
          
          //算出从右往左的Maximum SubArray
          sum = 0;
          minSum = 0;
          max = Integer.MIN_VALUE;
          int[] right = new int[size];
          for(int i = size - 1; i >= 0; i--){
              sum += nums.get(i);
              max = Math.max(max, sum - minSum);
              minSum = Math.min(sum, minSum);
              right[i] = max; // right[i + 1] 为从 i + 1 位开始，从左往右截至 size - 1 为止的所有 subArray 中的 Maximum SubArray
          }
          
          //枚举左subArray和右subArray的分割线位置 i
          max = Integer.MIN_VALUE;
          //因为每个subArray必须至少有一个元素，所以 i < size - 1 保证右边subArray至少有一个元素
          for(int i = 0; i < size - 1; i++){
              max = Math.max(max, left[i] + right[i + 1]);
          }
          return max;
      }
  ```
  
  ### Maximum Subarray IV
  - Find a contiguous subarray which has the largest sum
  - Subarray length `>=` `k`
  ```java
  public int maxSubarray4(int[] nums, int k) {
          // Write your code here
          int n = nums.length;
          if (n < k)
              return 0;
  
          int result = 0;
          for (int i = 0; i < k; i++)
              result += nums[i];
  
          int[] sum = new int[n + 1];
          sum[0] = 0;
          
  		//0...i - k...(k个数)...i
          //sum[j - i]要最大，s[j]一定要越小越好，而因为i - j >= k，j 一定 <= i - k
          //所以要在 0 到 i - k 的范围内寻找最小的sum
          int prefixMin = 0;
          //如果循环的是 sum 数组一定要注意以下几点：
          //首先在循环外面要初始化 sum[0]
          //循环的范围从 1 开始, 到 n(包括n) 结束
          //循环中使用公式 sum[i] = sum[i - 1] + num[i - 1]
          for (int i = 1; i <= n; i++) {
              sum[i] = sum[i - 1] + nums[i - 1];
              if (i >= k && sum[i] - prefixMin > result) {
                  result = sum[i] - prefixMin;
              }
              if (i >= k) {
                  //prefixMin记录的是从 0 到 i - k 的最小prefixSum
                  prefixMin = Math.min(prefixMin, sum[i - k + 1]);
              }
          }
          return result;
  ```
  
  ### Maximum Product Subarray
  ```java
  public int maxProduct(int[] nums) {
          // write your code here
          if(nums == null || nums.length == 0){
              return 0;
          }
          int oldMin = nums[0];
          int oldMax = nums[0];
          int min = nums[0];
          int max = nums[0];
          int result = nums[0];
  		// 注意从 1 开始循环
          for(int i = 1; i < nums.length; i++){
              //要和 oldMin 和 oldMax 分别乘
              //因为当 nums[i] 和 oldMin 都为负时， oldMin * nums[i] 可能为最大乘积
  			//同理当 nums[i] 和 oldMax 一正一负时，oldMax * nums[i] 可能为最小值
              //一定记得跟自己(nums[i])比, 因为 oldMin/oldMax 可能为 0，或 -1
              min = Math.min(nums[i], Math.min(nums[i] * oldMin, nums[i] * oldMax));
              max = Math.max(nums[i], Math.max(nums[i] * oldMin, nums[i] * oldMax));
              result = Math.max(result, max);
              oldMin = min;
              oldMax = max;
          }
          return result;
      }
  ```
'''
tags: [
  "Sliding_Window"
  "Array"
]
isStarred: false
isTrashed: false
createdAt: "2017-09-21T23:21:52.628Z"
updatedAt: "2018-01-02T02:59:57.667Z"
