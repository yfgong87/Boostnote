type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "LRU Cache"
content: '''
  # LRU Cache
  - 使用`HashMap`(用于迅速找到`key`)和 `Doubly LinkedList`(用于迅速移动和删除)
  - `update`和`add`操作都会导致被操作节点挪到`tail`，`delete`操作总是删除`head`(里面是`LRU`)
  ```java
  public class LRUCache {
      class Node{
          int val;
          int key;
          Node prev;
          Node next;
          Node(int val, int key){
              this.val = val;
              this.key = key;
              this.prev = null;
              this.next = null;
          }
      }
      
      int capacity = 0;
      HashMap<Integer, Node> map = new HashMap<Integer, Node>();
      Node head = new Node(-1, -1);
      Node tail = new Node(-1, -1);
      
      // @param capacity, an integer
      public LRUCache(int capacity) {
          // write your code here
          this.capacity = capacity;
          head.next = tail;
          tail.prev = head;
      }
  
      // @return an integer
      public int get(int key) {
          // write your code here
          //若节点不存在
          if(!map.containsKey(key)){
              return -1;
          }
          //删除节点
          Node curr = map.get(key);
          curr.prev.next = curr.next;
          curr.next.prev = curr.prev;
          
          //将节点移至tail
          toTail(curr);
          
          return curr.val;
      }
  
      // @param key, an integer
      // @param value, an integer
      // @return nothing
      public void set(int key, int value) {
          // write your code here
          //先调用一下get(), 成功 update 的同时也把此节点挪到了 tail
          if(get(key) != -1){
              map.get(key).val = value;
              return;
          }
          
          //如果找不到这个节点，则将其加入List
          
          //如果List满了，则删除 head 的后一个
          if(map.size() == capacity){
              //删除head
              map.remove(head.next.key);
              head.next = head.next.next;
              head.next.prev = head;
          }
          
          //总是将新 node 放入 tail 的前一个
          Node newNode = new Node(key, value);
          map.put(key, newNode);
          toTail(newNode);
      }
      
      private void toTail(Node node){
          node.prev = tail.prev;
          tail.prev.next = node;
          node.next = tail;
          tail.prev = node;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-07T17:10:33.257Z"
updatedAt: "2017-10-08T05:50:14.554Z"
