type: "MARKDOWN_NOTE"
folder: "6e2623e3aff765e4a79c"
title: "Anagram"
content: '''
  # Anagram
  Given an array of strings, return all groups of strings that are anagrams.
  Given `["lint", "intl", "inlt", "code"]`, return `["lint", "inlt", "intl"]`.
  
  Given `["ab", "ba", "cd", "dc", "e"]`, return `["ab", "ba", "cd", "dc"]`.
  
  Summary:
  Go through all Strings and store <Representative, Array of Anagram Strings> in a HashMap.
  Go through the HashMap and if the size of the Array of Anagram String is >= 2, add it to result.
  For every group of Anagram, use the sorted version of the String as the representative of the group.
  ```java
  public class Solution {
      /*
       * @param strs: A list of strings
       * @return: A list of strings
       */
      public List<String> anagrams(String[] strs) {
          // write your code here
          List<String> results = new ArrayList<>();
          Map<String, ArrayList<String>> map = new HashMap<>();
          for(String str : strs){
              char[] sc = str.toCharArray();
              Arrays.sort(sc);
              String sortStr = String.valueOf(sc);
              if(!map.containsKey(sortStr)){
                  ArrayList<String> list = new ArrayList<>();
                  map.put(sortStr, list);
              } 
              map.get(sortStr).add(str);
          }
          for(Map.Entry<String, ArrayList<String>> entry : map.entrySet()){
              if(entry.getValue().size() > 1){
                  results.addAll(entry.getValue());
              }
          }
          return results;
      }
      
  }
  ```
'''
tags: []
isStarred: false
isTrashed: true
createdAt: "2017-12-11T04:02:48.107Z"
updatedAt: "2017-12-27T01:32:45.132Z"
