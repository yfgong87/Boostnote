type: "MARKDOWN_NOTE"
folder: "c7615b6dcc7b2832aa16"
title: "Java Operater Precedence"
content: '''
  # Java Operater Precedence
  | Category | Operator | Associativity|
  | ------   | ------   | ------       |
  | Postfix	| `()` `[]` `.`(dot operator) | 	Left to right| 
  | Unary	pre|  `++` `--`| N/A | 
  | Unary	post|  `++` `--` `+` `-` `!` `~`| Right to left| 
  | Cast/new| `()` `new` | Right to left|
  | Multiplicative	|`*` `/` `%`	|  Left to right| 
  | Additive	| `+` `-`	| Left to right| 
  | Shift	| `>>` `>>>` `<<`	| Left to right| 
  | Relational	| `>` `>=` `<` `<=` `instanceof`	| Left to right| 
  | Equality	| `==` `!=`	| Left to right| 
  | Bitwise AND	| `&`	| Left to right| 
  | Bitwise XOR	| `^`	| Left to right| 
  | Bitwise OR	| `|`	| Left to right| 
  | Logical AND |	`&&`| 	Left to right| 
  | Logical OR	| `||`	| Left to right| 
  | Ternary Conditional	| `?:`	| Right to left| 
  | Assignment	| `=` `+=` `-=` `*=` `/=` `%=` `>>=` `<<=` `&=` `^=` `|=`	| Right to left| 
  
  ### Unary
  - Increment: `++x`, `x++`
  - Decrement: `−−x`, `x−−`
  - Positive: `+x`
  - Negative: `−x`
  - Ones' complement: `~x`
  - Logical negation: `!x`
  - Cast: (type-name) cast-expression
  
  ### Associativity
  When an expression has two operators with the same precedence, the expression is evaluated according to its associativity. For example `x` = `y` = `z` = `17` is treated as `x` = (`y` = (`z` = `17`))
  
  ### `&`和`&&`的区别？
  
  - 答：&运算符有两种用法：(1)按位与；(2)逻辑与。`&&`运算符是`短路与`运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true整个表达式的值才是true。&&之所以称为短路运算是因为，`如果&&左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算`。很多时候我们可能都需要用&&而不是&，例如在验证用户登录时判定用户名不是null而且不是空字符串，应当写为：username != null &&!username.equals("")，二者的顺序不能交换，更不能用&运算符，因为第一个条件如果不成立，根本不能进行字符串的equals比较，否则会产生NullPointerException异常。注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。
  - `Short circuiting`. When using the conditional and and or operators (`&&` and `||`), Java `DOES NOT evaluate the second operand unless it is necessary` to resolve the result. This allows statements like `if (s != null && s.length() < 10)` to work reliably. Programmers rarely use the non short-circuiting versions (`&` and `|`) with boolean expressions.
  
  ### Tricks
  - `&&` then `||`
  - `a` `>>` `1` is equal to `a / 2`
  - `a` `<<` `1` is equal to `a * 2`
  - `a` `<<` `n` is equal to `a * 2`<sup>`n`</sup>
  ### Modulo
  - The range of numbers for an integer modulo of n is 0 to n − 1. i.e. M % N = (0, N-1)
  
  ### Bitwise operator
  ```java
  public class Test {
  
     public static void main(String args[]) {
        int a = 60;	/* 60 = 0011 1100 */
        int b = 13;	/* 13 = 0000 1101 */
        int c = 0;
  
        c = a & b;        /* 12 = 0000 1100 */
  
        c = a | b;        /* 61 = 0011 1101 */
  
        c = a ^ b;        /* 49 = 0011 0001 */
  
        c = ~a;           /*-61 = 1100 0011 */
  
        c = a << 2;       /* 240 = 1111 0000 */
  
        c = a >> 2;       /* 15 = 1111 */
  
        c = a >>> 2;      /* 15 = 0000 1111 */
     }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-02T21:48:20.922Z"
updatedAt: "2017-09-01T15:45:33.376Z"
