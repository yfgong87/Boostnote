type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Subsets"
content: '''
  # Subsets
  ```java
  class Solution {
      // {1,2,3}
      //                  []
      //         [1]      [2]       [3]
      //     [1,2][1,3]  [2,3]
      //    [1,2,3]
      
      public List<List<Integer>> subsets(int[] nums) {
          List<List<Integer>> results = new ArrayList<>();
          List<Integer> solution = new ArrayList<>();
          dfs(results, solution, nums, 0);
          return results;
      }
      
      public void dfs(List<List<Integer>> results,
                      List<Integer> solution,
                      int[] nums,
                      int startIndex){
          results.add(new ArrayList<Integer>(solution));
          for(int i = startIndex; i < nums.length; i++){
              solution.add(nums[i]);
              dfs(results, solution, nums, i + 1);
              solution.remove(solution.size() - 1);
          }
      }
  }
  ```
  ```java
  class Solution {
      /**
       * @param S: A set of numbers.
       * @return: A list of lists. All valid subsets.
       */
      public ArrayList<ArrayList<Integer>> subsets(int[] nums) {
          // write your code here
          //ArrayList of Integer ArrayList that store all subset
          ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
          //Handling null input
          if(nums == null){
              return result;
          }
          List<Integer> subset = new ArrayList<Integer>();
          //KEY1: Handling empty input
          if(nums.length == 0){
              result.add(subset);
              return result;
          }
          //KEY2: Sort array to make answers in ascending order, not necessary
          //Arrays.sort(nums);
          //Call recursion methods
          addSubset(result, subset, 0, nums);
          //return
          return result;
      }
          
      // recursion methods
      public void addSubset(ArrayList<ArrayList<Integer>> result, 
                            ArrayList<Integer> subset, 
                            int index, 
                            int[] nums){
          //KEY3: DEEP COPY - add subset to result
  		//如果不用 Deep Copy, 则并不是加入一个新的subset，是加入了subset的引用
  		//后续对subset的改变，就会引起results中subset的改变
          result.add(new ArrayList<Integer>(subset));
          //KEY4: use startindex
          for(int i = index; i < nums.length; i++){
              //add next number in array to subset
              subset.add(nums[i]);
              //KEY5: i + 1 to remove duplicate with diff order
              addSubset(result, subset, i + 1, nums);
              //backtracking
              subset.remove(subset.size()-1);
          }
      }
  }
  ```
'''
tags: [
  "Backtracking"
  "DFS"
]
isStarred: false
isTrashed: false
createdAt: "2017-08-30T14:47:38.610Z"
updatedAt: "2018-01-23T02:22:30.027Z"
