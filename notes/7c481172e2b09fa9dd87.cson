createdAt: "2018-01-03T16:34:20.975Z"
updatedAt: "2018-01-18T06:28:28.638Z"
type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Max Point on a line"
content: '''
  # Max Point on a line
  Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.
  
  Solution:
  - General idea is to calculate the slope between every pair of points, and count the maximum number of points that has the same slope
  - To do the count we can use a HashMap to store each slope and its frequency
  - For each point, we calculate the slope between it and every other point, then pick the most frequent value among these slopes.
  
  优化：
  - Since slope is a double, we can use something else as the key of the HashMap
  - We need to consider overlapping points as they might have different slope while actually on the same line
  
  Time: `O(n^2)`， Space: `O(n^2)`
  ```java
  /*
          遍历每个点，看它和后面的每个点构成的直线上有多少个点
          对每个点建立map，斜率是key
          斜率要用分数的形式，不要用double的形式存
          计算分数时先求分子分母的最大公约数gcd，再都除以gcd
          重合的点特殊处理
          */
  class Solution {
      public int maxPoints(Point[] points) {
          if(points == null){
              return 0;
          }
          int n = points.length;
          if(n <= 2){
              return n;
          }
          int res = 0;
          for(int i = 0; i < n; i++){
              int max = 0;
              int overlap = 0;
              Map<String, Integer> map = new HashMap<>();
              for(int j = i + 1; j < n; j++){
                  int dy = points[j].y - points[i].y;
                  int dx = points[j].x - points[i].x;
  				
  				// 重合的点需要单独考虑，eg. [0,0][1,1][0,0]
  				// [0,0] 和 [0,0] 的 slope 是 00
  				// [0,0] 和 [1,1] 的 slope 是 11
  				// 虽然两个 slope 并不一样，但这三个点都在一条直线上，少算了一个点
                  if(dy == 0 && dx == 0){
                      overlap++;
                      continue;
                  }
  				// 之所不直接使用 dy/dx 代表斜率是因为 double 作为 hash key 是 unpredictable的
  				// 并且需要考虑 dx == 0 的情况
                  int gcd = getGCD(dx, dy);
                  dy = dy / gcd;
                  dx = dx / gcd;
  				
  				// 用string来存储斜率
                  String slope = String.valueOf(dx) + String.valueOf(dy);
                  if(!map.containsKey(slope)){
                      map.put(slope, 1);
                  } else {
                      map.put(slope, map.get(slope) + 1);
                  }
                  max = Math.max(max, map.get(slope));
               }
  			 // 与 i 有相同斜率的点最多有多少个 + 与 i 重合的点 + Point i 自己
               res = Math.max(res, max + overlap + 1);
          }
          return res;
      }
      
      static int getGCD(int a, int b)
      {
          while(a != 0 && b != 0){
          int temp = b;
          b = a % b;
          a = temp;
          }
          // either one is 0, so return the non-zero value
          return a + b; 
      }
  }
  ```
'''
tags: [
  "Linkedin"
  "Math"
  "HashMap"
]
isStarred: false
isTrashed: false
