type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Longest Palindromic Substring"
content: '''
  # Longest Palindromic Substring
  ### Brute Force, `O(n^3)`
  ```java
  public class Solution {
      /*
       * @param s: input string
       * @return: the longest palindromic substring
       */
      public String longestPalindrome(String s) {
          // write your code here
          if(s.length() == 0 || s.length() == 1){
              return s;
          }
          int max = Integer.MIN_VALUE;
          String result = "";
          for(int i = s.length() - 1; i >= 0; i--){
              for(int j = 0; j <= i; j++){
                  if(isValid(s.substring(j, i + 1))){
                      if(i - j + 1 > max){
                          max = i - j + 1;
                          result = s.substring(j, i + 1);
                      }
                  }
              }
          }
          return result;
      }
      private boolean isValid(String s){
          int left = 0;
          int right = s.length() - 1;
          while(left < right){
              if(s.charAt(left) != s.charAt(right)){
                  return false;
              }
              left++;
              right--;
          }
          return true;
      }
  }
  ```
  ### Expanding, `O(n^2)`
  ```java
  public String longestPalindrome(String s) {
          // write your code here
          String result = "";
          if(s == null || s.length() == 0){
              return result;
          }
          int start = 0, end = 0;
          for(int i = 0; i < s.length(); i++){
              int lengthA = expand(s, i, i);  //"bab"的情况
              int lengthB = expand(s, i, i + 1);  //"baab"的情况
              int length = Math.max(lengthA, lengthB);
              if(length > end - start + 1){
                  start = i - (length - 1) / 2; //最左边有可能越界
                  end = i + length / 2;
              }
          }
          return s.substring(start, end + 1); //右边不包含
      }
  	
  	public int expand (String s, int start, int end){
          while(start >= 0 && end <= s.length() - 1){
              if(s.charAt(start) != s.charAt(end)){
                  break;
              } else {
                  start--;
                  end++;
              }
          }
  		//各倒退一格
  		start++;
  		end--;
          return end - start + 1;
      }
  ```
  ### Related: Count how many palindromic substring
  ```java
  class Solution {
      int count = 0;
      public int countSubstrings(String s) {
          for(int i = 0; i < s.length(); i++){
              expand (s, i, i);
              expand (s, i, i + 1);
          }
          return count;
      }
      
      public void expand (String s, int i, int j){
          while(i >= 0 && j <= s.length() - 1){
              if(s.charAt(i) != s.charAt(j)){
                  break;
              } else {
                  count++;
                  i--;
                  j++;
              }
          }
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-10T23:36:01.852Z"
updatedAt: "2018-01-03T00:49:36.566Z"
