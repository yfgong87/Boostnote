type: "MARKDOWN_NOTE"
folder: "0ef4dc321cdc22cb8b00"
title: "位运算基础"
content: '''
  # 位运算基础
  ```java
  int a = 10; //00001010
  int b = 38; //00100110
  ```
  ### 二目运算
  
  #### 与运算 `&`
  ```java
  1 & 1 = 1
  1 & 0 = 0
  0 & 1 = 0
  0 & 0 = 0
  a & b = 00000010 = 2
  ```
  
  #### 或运算 `|`
  ```java
  1 | 1 = 1
  1 | 0 = 1
  0 | 1 = 1
  0 | 0 = 0
  a | b = 00101110 = 46
  ```
  
  #### 异或运算 `^` 不一样为1, 不进位加法！！ (XOR, exclusive-or / ex-or)
  ```java
  1 ^ 1 = 0
  1 ^ 0 = 1
  0 ^ 1 = 1
  0 ^ 0 = 0
  a ^ b = 00101100 = 44
  ```
  
  ### 单目运算
  
  #### 非运算(取反)运算 `~`
  ```java
  ~10 = -11
  ~-10 = 9
  ```
  
  #### 左乘右除
  #### 左移 `<<`
  - 将 A 的二进制表示的整体向左移 B 位，左边超出 32 位的截掉（如果是 int 的话），右边不足的位补 0
  ```java
  a << 1;
  00001010 << 1 = 00010100 = 20
  
  a << 2;
  00001010 << 2 = 00101000 = 40
  ```
  
  #### 右移 `>>`
  ```java
  a >> 1;
  00001010 >> 1 = 00000101 = 5
  
  a >> 2;
  00001010 >> 2 = 00000010 = 2
  ```
  
  #### 逻辑右移(Java 和 Python有，C++没有) `>>>`
  - 只有Java里面有特殊的`>>>`符号，对于C++或者C的一些语言标准中指出，无符号数执行的所有移位操作都是逻辑的，而对于有符号数，采用哪种方式取决于编译器。算术左移和逻辑左移是相同的，而算术右移和逻辑右移，取决于符号位
  - `负数`最高位是`1`
  - 左边不足的位补符号位的数（比如负数符号位是`1`则补充`1`，正数符号位是`0`则补充`0`）
  - 对于算术右移，原来是负数的，结果还是负数，原来是正数的结果还是正数
  ```java
  11100011 11100011 11100011 11100011 >> 1 = 111100011 11100011 11100011 1110001
  ```
  - 左边不足的一律用 `0` 补上
  - 所以对于逻辑右移，结果必将会是一个正数
  ```java
  11100011 11100011 11100011 11100011 >>> 1 = 011100011 11100011 11100011 1110001
  ```
  
  ### 位运算技巧
  
  #### 巧用`-1`
  - 32位全是`1`的二进制对应整数`-1`
  
  #### 消去二进制中最后出现的`1`
  ```java
  x           = 1100
  x - 1       = 1011
  x & (x - 1) = 1000
  ```
  ##### 1. 用 `O(1)` 时间检测整数 `n` 是否是 `2` 的幂次
  N如果是2的幂次，则N满足两个条件。
  - N > 0
  - N的二进制表示中只有一个1, 注意只能有1个。
  因为N的二进制表示中只有一个1，所以使用 N & (N - 1) 将N唯一的一个1消去，应该返回0。
  ```java
  boolean checkPowerOf2(int n) {
      // write your code here
      return n > 0 && (n & (n - 1)) == 0;
  }
  ```
  ##### 2. 计算在一个 `32` 位的整数的二进制表式中有多少个 `1`
  由x & (x - 1)消去x最后一位的1可知。不断使用 x & (x - 1) 消去x最后一位的1，计算总共消去了多少次即可
  ```java
  public class Solution {
      /**
       * @param num: an integer
       * @return: an integer, the number of ones in num
       */
      public int countOnes(int num) {
          int count = 0;
          while (num != 0) {
              num = num & (num - 1);
              count++;
          }
          return count;
      }
  };
  ```
  ##### 3. 如果要将整数A转换为B，需要改变多少个bit位
  思考将整数A转换为B，如果A和B在第i（0 <= i < 32）个位上相等，则不需要改变这个BIT位，如果在第i位上不相等，则需要改变这个BIT位
  所以问题转化为了A和B有多少个BIT位不相同！
  联想到位运算有一个异或操作，相同为0，相异为1，所以问题转变成了计算A异或B之后这个数中1的个数!
  ```java
  class Solution {
      /**
       *@param a, b: Two integer
       *return: An integer
       */
      public int countOnes(int num) {
          int count = 0;
          while (num != 0) {
              num = num & (num - 1);
              count++;
          }
          return count;
      }
  
      public int bitSwapRequired(int a, int b) {
          // write your code here
          return countOnes(a ^ b);
      }
  };
  ```
  #### 巧用异或运算
  ```java
  a ^ b ^ b = a // 对一个数异或两次等价于没有任何操作！
  ```
  ##### 1.数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数
  ```java
  public class Solution {
      public int singleNumber(int[] nums) {
          int result = 0, n = nums.length;
          for (int i = 0; i < n; i++)
          {
              result ^= nums[i];
          }
          return result;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-25T00:00:22.388Z"
updatedAt: "2018-01-09T16:59:27.420Z"
