type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Pow(x, n)"
content: '''
  # Pow(x, n)
  Brute Force is to multiply `x` for `n` times which will cost `O(n)`
  基本思路，递归调用 myPow, 每次 `myPow(x, n)` = `myPow(x, n/2)` * `myPow(x, n/2)`，复杂度`logn`
  ```java
  public class Solution {
      /**
       * @param x the base number
       * @param n the power number
       * @return the result
       */
      public double myPow(double x, int n) {
          // Write your code here
          if(x == 0 || n == 1){
              return x;
          }
          if(x == 1 || n == 0){
              return 1;
          }        
          if(n < 0){
             n = -n;
             double res = myPow(x, n);
             return 1 / res;
          }
          
          double res = myPow(x, n / 2);
          res = res * res;
          
          if(n % 2 != 0){
              res = res * x;
          }
          return res;
      }
  }
  ```
  如何完美解决`Integer.MIN_VALUE`的overflow问题：
  We can create an overloading method that takes `long` instead of `int`, then call this overlading method from the original method
  注意这里两个函数名相同，利用了 Java 的 `PolyMorphyism`，`myPow()`被`overload`了
  ```java
  public class Solution {
      /**
       * @param x the base number
       * @param n the power number
       * @return the result
       */
      public double myPow(double x, int n){
          long nn = n;
          return myPow(x, nn);
      }
  	// overloading Method
      public double myPow(double x, long n) {
          // Write your code here
          if(x == 0 || n == 1){
              return x;
          }
          if(x == 1 || n == 0){
              return 1;
          }        
          if(n < 0){
             n = -n;
             double res = myPow(x, n);
             return 1 / res;
          }
          
          double res = myPow(x, n / 2);
          res = res * res;
          
          if(n % 2 != 0){
              res = res * x;
          }
          return res;
      }
  }
  ```
'''
tags: [
  "Recursion"
  "Linkedin"
  "Math"
]
isStarred: false
isTrashed: false
createdAt: "2017-10-04T20:11:50.313Z"
updatedAt: "2018-01-18T23:06:50.362Z"
