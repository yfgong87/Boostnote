type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Permutation II"
content: '''
  # Permutation II
  ```java
  class Solution {
      //{1(1), 1(2), 2}
      //                                         []
      //            [1(1)]                      [1(2)]                          [2]
      //    #[1(1),1(2)] [1(1),2]        [1(2),1(1)]  [1(2),2]             [2,1(1)] [2,1(2)]
      //               #[1(1),2,1(2)]  [1(2),1(1),2] [1(2),2,1(1)]  #[2,1(1),1(2)] [2,1(2),1(1)]                                   
  
      public List<List<Integer>> permuteUnique(int[] nums) {
          List<List<Integer>> results = new ArrayList<List<Integer>>();
          if(nums == null || nums.length == 0){
              return results;
          }
          Arrays.sort(nums);
          dfs(nums, results, new ArrayList<Integer>(), new boolean[nums.length]);
          return results;
      }
      
      public void dfs(int[] nums,
                      List<List<Integer>> results,
                      List<Integer> solution,
                      boolean[] visited){
          if(solution.size() == nums.length){
              results.add(new ArrayList<Integer>(solution));
              return;
          }
  		//无需startIndex，每次都从第一个数开始找
          for(int i = 0; i < nums.length; i++){
              if(visited[i]){
                  continue;
              }
  			// 选代表
  			// 写成 i > 0 && nums[i] == nums[i - 1] && !visited[i - 1] 则第一次出现的重复数会出现在集合前面
              if(i > 0 && nums[i] == nums[i - 1] && visited[i - 1]){
                  continue;
              }
              visited[i] = true;
              solution.add(nums[i]);
              dfs(nums, results, solution, visited);
              visited[i] = false;
              solution.remove(solution.size() - 1);
          }
      }
  }
  ```
'''
tags: [
  "DFS"
  "backtracking"
]
isStarred: false
isTrashed: false
createdAt: "2017-08-30T18:29:42.817Z"
updatedAt: "2018-01-02T02:58:01.356Z"
