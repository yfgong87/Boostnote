type: "MARKDOWN_NOTE"
folder: "ca7b6b3755f93c46a5f8"
title: "HashTable"
content: '''
  # HashTable
  ---
  - `HashTable` is inherited from `Map` interface, similar to `HashMap`
  - `HashTable` is synchronized, whereas `HashMap` is not. This makes `HashMap` better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones. (The synchronized keyword is all about different threads reading and writing to the same variables, objects and resources.)
  - `Hashtable` does not allow null keys or values.  `HashMap` allows one null key and any number of null values.
  - One of `HashMap`'s subclasses is `LinkedHashMap`, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the `HashMap` for a `LinkedHashMap`. This wouldn't be as easy if you were using `Hashtable`.
  ---
  ### Why `31`?
  - `31 * num` 等价于 `(num << 5) - num` (可以用移位和减法运算来代替乘法)
  - Primes are unique numbers. They are unique in that, the product of a prime with any other number has the best chance of being unique
  
  ### Get hashcode of a String
  - `char`[] `charArray`; 
  - `hashcode` = `charArray`[0] * 31<sup>`(n-1)`</sup> + `charArray`[1] * 31<sup>`(n-2)`</sup> + ... + `charArray`[n-1] * 31<sup>`0`</sup>
  ```java
  //loop through each char in String to add charValue to hashcode
  //这里用31是因为只有26个字母，magic number 要比 26 大
  String str;
  int hashcode = 0;
  for (int i = 0; i < str.length(); i++) {
      hashcode = hashcode * 31 + str.charAt(i);
  }
  return hashcode;
  
  //hashcode might getting too big for int type, 2 solutions in this case:
  long hashcode = 0; //Solution 1: use long type instead of int
  int HASH_SIZE = 1000000007;//Solution 2: set hash table size as a large prime number
  for(int i = 0; i < str.length(); i++){
      hashcode = (hashcode * 33 + (int)str.charAt(i)) % HASH_SIZE;//mod the large prime number base
  }
  return (int)hashcode;
  ```
  ### Implementing HashMap in Java
  ```java
  //用于存储key/value pair
  public class HashEntry {
        private int key;
        private int value;
   
        HashEntry(int key, int value) {
              this.key = key;
              this.value = value;
        }     
   
        public int getKey() {
              return key;
        }
   
        public int getValue() {
              return value;
        }
  }
  
  public class HashMap {
        private final static int MAP_SIZE = 128;
   
        HashEntry[] map;
   
        HashMap() {
              map = new map[MAP_SIZE];
              for (int i = 0; i < MAP_SIZE; i++)
                    //初始化为null
                    map[i] = null;
        }
        //用key找value
        public int get(int key) {
              //整数的 hashcode 直接取 %
              int hashcode = (key % MAP_SIZE);
              //当 hashcode 对应的位置不为空，且该位置存的 key 与当前 key 不相等
              //此时说明发生了collision，往下一个位置找
              while (map[hashcode] != null && map[hashcode].getKey() != key)
                    hashcode = (hashcode + 1) % MAP_SIZE;
              //没找到
              if (map[hashcode] == null)
                    return -1;
              //找到了
              else
                    return map[hashcode].getValue();
        }
   
        public void put(int key, int value) {
              int hashcode = (key % MAP_SIZE);
              //when collision，往下一个位置放
              while (map[hashcode] != null && map[hashcode].getKey() != key)
                    hashcode = (hashcode + 1) % MAP_SIZE;
              //如果对应位置为空，直接放
              //如果对应位置不为空，但有一个相同的key，那么直接更新value
              map[hashcode] = new HashEntry(key, value);
        }
  }
  ```
  ### Rehashing
  `Array` + `LinkedList` = `Open Hash`
  ```java
  public class Solution {
      /**
       * @param hashTable: A list of The first node of linked list
       * @return: A list of The first node of linked list which have twice size
       */    
      public ListNode[] rehashing(ListNode[] hashTable) {
          // write your code here
          if(hashTable.length == 0){
              return hashTable;
          }
          int newCapacity = hashTable.length * 2;
          ListNode[] newTable = new ListNode[newCapacity];
          for(int i = 0; i < hashTable.length; i++){
              ListNode head = hashTable[i];
              while(head != null){
                  //这样写是为了变成正数 (运算顺序是先 % 再 +/-)
                  //(-3 % 5 + 5) % 5 = 2
                  //-3 % 5 = -3
                  int newIndex =
                  (head.val % newCapacity + newCapacity) % newCapacity;
                  if(newTable[newIndex] == null){
                      newTable[newIndex] = new ListNode(head.val);
                  } else {
                      ListNode curr = newTable[newIndex];
                      while(curr.next != null){
                          curr = curr.next;
                      }
                      curr.next = new ListNode(head.val);
                  }
                  head = head.next;
              }
          }
          return newTable;
      }
  };
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-02T02:12:33.653Z"
updatedAt: "2017-10-10T20:43:32.375Z"
