type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Shortest Word Distance I, II，III"
content: '''
  # Shortest Word Distance I, II，III
  ### Short Word Distance I
  Given a list of words and two words `word1` and `word2`, return the shortest distance between these two words in the list. You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.
  
  For example,
  Assume that `words` = `["practice", "makes", "perfect", "coding", "makes"]`.
  
  Given `word1` = `“coding”`, `word2` = `“practice”`, return `3`.
  Given `word1` = `"makes"`, `word2` = `"coding"`, return `1`.
  #### 1.1 记录所有 index + Two Pointer 解法
  用两个 list 记录 word1 和 word2 出现的所有 Index, 同向双指针扫描两个 list, 更新 min Distance
  
  时间 `O(n)` + `O(x + y)` = `O(n)`，空间 `O(x + y)`
  ```java
  class Solution {
      public int shortestDistance(String[] words, String word1, String word2) {
          List<Integer> list1 = new ArrayList<>();
          List<Integer> list2 = new ArrayList<>();
          for(int i = 0; i < words.length; i++){
              if(words[i].equals(word1)){
                  list1.add(i);
              }
              if(words[i].equals(word2)){
                  list2.add(i);
              }
          }
          int i = 0;
          int j = 0;
          int min = Integer.MAX_VALUE;
          while(i < list1.size() && j < list2.size()){
              int index1 = list1.get(i);
              int index2 = list2.get(j);
              int distance = Math.abs(index1 - index2);
              if(distance < min){
                  min = distance;
              }
              if(index1 < index2){
                  i++;
              } else {
                  j++;
              }
          }
          return min;
      }
  }
  ```
  #### 1.2 遍历解法
  遍历 words, 用两个变量分别记录上一次出现的 word1 或 word2 的 index，更新 min Distance, min 只能出现在相邻的 index1/index2 之间
  
  Time Complexity `O(n)`, Space `O(1)`
  ```java
  class Solution {
      public int shortestDistance(String[] words, String word1, String word2) {
          int index1 = -1;
          int index2 = -1;
          int min = Integer.MAX_VALUE;
          for(int i = 0; i < words.length; i++){
              if(words[i].equals(word1)){
                  index1 = i;
              } 
              if(words[i].equals(word2)){
                  index2 = i;
              }
              if(index1 != -1 && index2 != -1){
                  min = Math.min(min, Math.abs(index1 - index2));
              }
          }
          return min;
      }
  }
  ```
  ### Short Word Distance III
  当`word1`可以等于`word2`时, You may assume word1 and word2 are both in the list.
  
  #### 3.1 HashMap + Two Pointer 解法
  `HashMap`<`word`, `List of index`> 记录每个 word 及其出现的所有 index，根据 input 得到两个 word 出现的所有 index，同向双指针不断更新 min Distance
  
  Time `O(n + x + y)`, Space `O(n + x + y)`，`x` 和 `y` 为 `word1` 和 `word2`出现的次数
  ```java
  class Solution {
      public int shortestWordDistance(String[] words, String word1, String word2) {
          Map<String, List<Integer>> map = new HashMap<>();
          for(int i = 0; i < words.length; i++){
              if(!map.containsKey(words[i])){
                  List<Integer> list = new ArrayList<>();
                  list.add(i);
                  map.put(words[i], list);
              } else {
                  map.get(words[i]).add(i);
              }
          }
          
          List<Integer> list1 = map.get(word1);
          List<Integer> list2 = map.get(word2);
          int size1 = list1.size();
          int size2 = list2.size();
          int i = 0;
          int j = 0;
          int min = Integer.MAX_VALUE;
          //由于index的list是按照从小到大的顺序加入到map中的，相当于已经排好序了
          //此时用一个类似mergeSort的算法花O(m + n)的时间遍历两个list并打擂台找最小差值
          while(i < size1 && j < size2){
              int index1 = list1.get(i);
              int index2 = list2.get(j);
              //注意这里要判断，当 index1 == index2 时需要跳过，因为是同一个数
              if(index1 != index2){
                  min = Math.min(min, Math.abs(index1 - index2));
              }
              if(index1 < index2){
                  i++;
              } else {
                  j++;
              }
          }
          return min;
      }
  }
  ```
  #### 3.2 遍历解法
  遍历 words, 用两个变量分别记录上一次出现的 word1 或 word2 的 index，更新 min Distance, min 只能出现在相邻的 index1/index2 之间，如果两个 word 相同，只需要用到 index1
  
  Time Complexity `O(n)`, Space `O(1)`
  ```java
  class Solution {
      public int shortestWordDistance(String[] words, String word1, String word2) {
          int index1 = -1;
          int index2 = -1;
          int min = Integer.MAX_VALUE;
          //增加一个判断，当word1等于word2时
          if(word1.equals(word2)){
              for(int i = 0; i < words.length; i++){
                  if(words[i].equals(word1)){
                      if(index1 == -1){
                          index1 = i;
                      } else {
                          //新找到的word总是跟上一个找到的比较
                          min = Math.min(min, Math.abs(index1 - i));
                          index1 = i;
                      }
                  }
              }
          } else {
              for(int i = 0; i < words.length; i++){
                  if(words[i].equals(word1)){
                      index1 = i;
                  } 
                  if(words[i].equals(word2)){
                      index2 = i;
                  }
                  if(index1 != -1 && index2 != -1){
                      min = Math.min(min, Math.abs(index1 - index2));
                  }
              }
          }
          return min;
      }
  }
  ```
  ### Short Word Distance II
  当函数需要被调用多次
  You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.
  
  #### 2.1 HashMap + Two Pointer 解法
  `HashMap`<`word`, `List of index`> 记录每个 word 及其出现的所有 index，根据 input 得到两个 word 出现的所有 index，同向双指针不断更新 min Distance. 如果不这么做而是每次都重新遍历整个 `words`，假设`words`中一共有`n`个`word`，`shortest`被反复调用了`m`次，时间复杂度为 `n * m`
  下面的方法为 `O(n) + O((x + y) * m)`，其中`x`和`y`为两个`word`在`words`中出现的次数。因为`x` << `n`且`y` << `n`, 第二种方法更优
  - Assuming there are `n` words in `words`, then since `shortest` is called `m` times, time complexity is `O(n * m)`. This HashMap + mergeSort method will have a time complexity of `O(n) + O((x + y) * m)`, while `x` and `y` are the occurrence of `word1` and `word2` in `words`. Since `x` << `n` and `y` << `n`, this is a better method
  - Time: `O(n) + O((x + y) * m)`, Space `O(n + x + y)`
  ```java
  /**
   * Your WordDistance object will be instantiated and called as such:
   * WordDistance obj = new WordDistance(words);
   * int param_1 = obj.shortest(word1,word2);
   */
  class WordDistance {
      //用一个map记录每个word的index，由于相同的word可能出现多次，index是一个ArrayList
      Map<String, List<Integer>> map;
      public WordDistance(String[] words) {
          map = new HashMap<>();
          for(int i = 0; i < words.length; i++){
              if(!map.containsKey(words[i])){
                  List<Integer> list = new ArrayList<>();
                  list.add(i);
                  map.put(words[i], list);
              } else {
                  map.get(words[i]).add(i);
              }
          }
      }
      
      public int shortest(String word1, String word2) {
          List<Integer> list1 = map.get(word1);
          List<Integer> list2 = map.get(word2);
          int size1 = list1.size();
          int size2 = list2.size();
          int i = 0;
          int j = 0;
          int min = Integer.MAX_VALUE;
          //由于index的list是按照从小到大的顺序加入到map中的，相当于已经排好序了
          //此时用一个Two Pointer的算法花O(m + n)的时间遍历两个list并打擂台找最小差值
  		//[1, 2, 4, 5]
  		//[3, 7, 9]
  		//1 和 3 比完之后，1 不需要再和任何比 3 大的数比了，因为两者差的绝对值一定更大，所以跳过 1
          while(i < size1 && j < size2){
              int index1 = list1.get(i);
              int index2 = list2.get(j);
              //差值永远由两个相邻的值算出
              min = Math.min(min, Math.abs(index1 - index2));
              if(index1 < index2){
                  i++;
              } else {
                  j++;
              }
          }
          return min;
      }
  }
  ```
  #### 2.2 遍历解法
  Time: `O(n * m)`, Space: `O(n)`
  ```java
  class WordDistance {
      ArrayList<String> words;
      public WordDistance(String[] wordsInput) {
          words = new ArrayList<>();
          for(int i = 0; i < wordsInput.length; i++){
              words.add(wordsInput[i]);
          }
      }
      
      public int shortest(String word1, String word2) {
          int index1 = -1;
          int index2 = -1;
          int min = Integer.MAX_VALUE;
          for(int i = 0; i < words.size(); i++){
              if(words.get(i).equals(word1)){
                  index1 = i;
              } 
              if(words.get(i).equals(word2)){
                  index2 = i;
              }
              if(index1 != -1 && index2 != -1){
                  min = Math.min(min, Math.abs(index1 - index2));
              }
          }
          return min;
      }
  }
  ```
'''
tags: [
  "Linkedin"
  "HashMap"
  "Two_Pointer"
]
isStarred: false
isTrashed: false
createdAt: "2017-10-25T19:33:54.599Z"
updatedAt: "2018-01-19T00:56:45.940Z"
