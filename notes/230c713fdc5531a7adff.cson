type: "MARKDOWN_NOTE"
folder: "df7fbd4f413bd7e56cde"
title: "Short Word Distance I, II， III"
content: '''
  # Short Word Distance I, II， III
  ### Short Word Distance I
  Given a list of words and two words `word1` and `word2`, return the shortest distance between these two words in the list.
  
  For example,
  Assume that `words` = `["practice", "makes", "perfect", "coding", "makes"]`.
  
  Given `word1` = `“coding”`, `word2` = `“practice”`, return `3`.
  Given `word1` = `"makes"`, `word2` = `"coding"`, return `1`.
  ```java
  class Solution {
      public int shortestDistance(String[] words, String word1, String word2) {
          int index1 = -1;
          int index2 = -1;
          int min = Integer.MAX_VALUE;
          for(int i = 0; i < words.length; i++){
              if(words[i].equals(word1)){
                  index1 = i;
              } 
              if(words[i].equals(word2)){
                  index2 = i;
              }
              if(index1 != -1 && index2 != -1){
                  min = Math.min(min, Math.abs(index1 - index2));
              }
          }
          return min;
      }
  }
  ```
  ### Short Word Distance III
  当`word1`可以等于`word2`时
  ```java
  class Solution {
      public int shortestWordDistance(String[] words, String word1, String word2) {
          int index1 = -1;
          int index2 = -1;
          int min = Integer.MAX_VALUE;
          //增加一个判断，当word1等于word2时
          if(word1.equals(word2)){
              for(int i = 0; i < words.length; i++){
                  if(words[i].equals(word1)){
                      if(index1 == -1){
                          index1 = i;
                      } else {
                          //和前一个记录下的index求short distance
                          min = Math.min(min, Math.abs(index1 - i));
                          index1 = i;
                      }
                  }
              }
          } else {
              for(int i = 0; i < words.length; i++){
                  if(words[i].equals(word1)){
                      index1 = i;
                  } 
                  if(words[i].equals(word2)){
                      index2 = i;
                  }
                  if(index1 != -1 && index2 != -1){
                      min = Math.min(min, Math.abs(index1 - index2));
                  }
              }
          }
          return min;
      }
  }
  ```
  ### Short Word Distance II
  当函数需要被调用多次
  ```java
  class WordDistance {
      //用一个map记录每个word的index，由于相同的word可能出现多次，index是一个ArrayList
      Map<String, List<Integer>> map;
      public WordDistance(String[] words) {
          map = new HashMap<>();
          for(int i = 0; i < words.length; i++){
              if(!mwordap.containsKey(words[i])){
                  List<Integer> list = new ArrayList<>();
                  list.add(i);
                  map.put(words[i], list);
              } else {
                  map.get(words[i]).add(i);
              }
          }
      }
      
      public int shortest(String word1, String word2) {
          List<Integer> list1 = map.get(word1);
          List<Integer> list2 = map.get(word2);
          int size1 = list1.size();
          int size2 = list2.size();
          int i = 0;
          int j = 0;
          int min = Integer.MAX_VALUE;
          //由于index的list是按照从小到大的顺序加入到map中的，相当于已经排好序了
          //此时用一个类似mergeSort的算法花O(m + n)的时间遍历两个list并打擂台找最小差值
          while(i < size1 && j < size2){
              int index1 = list1.get(i);
              int index2 = list2.get(j);
              //差值永远由两个相邻的值算出
              min = Math.min(min, Math.abs(index1 - index2));
              if(index1 < index2){
                  i++;
              } else {
                  j++;
              }
          }
          return min;
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-25T19:33:54.599Z"
updatedAt: "2017-10-25T21:13:55.435Z"
