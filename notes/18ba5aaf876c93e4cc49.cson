type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Copy List with Random Pointer"
content: '''
  # Copy List with Random Pointer
  ```java
  public class Solution {
      /**
       * @param head: The head of linked list with a random pointer.
       * @return: A new head of a deep copy of the list.
       */
      public RandomListNode copyRandomList(RandomListNode head) {
          // write your code here
          //map存的是<老node，新node>
          HashMap<RandomListNode, RandomListNode> map = new HashMap<RandomListNode,RandomListNode>();
          RandomListNode dummy = new RandomListNode(0), curr = dummy;
          RandomListNode newNode;
          while(head != null){
              if(map.containsKey(head)){
                  newNode = map.get(head);
              } else {
                  newNode = new RandomListNode(head.label);
                  map.put(head, newNode);
              }
              curr.next = newNode;
              
              if(head.random != null){
                  if(map.containsKey(head.random)){
                      newNode.random = map.get(head.random);
                  } else {
                      newNode.random = new RandomListNode(head.random.label);
                      map.put(head.random, newNode.random);
                  }
              }
              
              curr = curr.next;
              head = head.next;
          }
          return dummy.next;
      }
  }
  ```
  ### O(1)空间复杂度做法
  ```java
  /*第一遍扫的时候巧妙运用next指针
  开始数组是1->2->3->4, 
  扫描第一遍过程中先建立copy节点 1->1`->2->2`->3->3`->4->4`
  然后第二遍copy的时候去建立边的copy
  最后第三遍拆分节点, 一边扫描一边拆成两个链表
  这里用到两个dummy node。第一个链表变回  1->2->3 , 然后第二变成 1`->2`->3`  */
  //No HashMap version
  public class Solution {
      private void copyNext(RandomListNode head) {
          while (head != null) {
              RandomListNode newNode = new RandomListNode(head.label);
              newNode.random = head.random;
              newNode.next = head.next;
              head.next = newNode;
              head = head.next.next;
          }
      }
  
      private void copyRandom(RandomListNode head) {
          while (head != null) {
              if (head.next.random != null) {
                  head.next.random = head.random.next;
              }
              head = head.next.next;
          }
      }
  
      private RandomListNode splitList(RandomListNode head) {
          RandomListNode newHead = head.next;
          while (head != null) {
              RandomListNode temp = head.next;
              head.next = temp.next;
              head = head.next;
              if (temp.next != null) {
                  temp.next = temp.next.next;
              }
          }
          return newHead;
      }
  
      public RandomListNode copyRandomList(RandomListNode head) {
          if (head == null) {
              return null;
          }
          copyNext(head);
          copyRandom(head);
          return splitList(head);
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-10T22:06:15.629Z"
updatedAt: "2017-12-08T04:09:39.321Z"
