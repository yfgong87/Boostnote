type: "MARKDOWN_NOTE"
folder: "8d19d56ee029f3fa592b"
title: "Search 2D Matrix"
content: '''
  # Search 2D Matrix
  [
      `[1, 3, 5, 7]`,
      `[10, 11, 16, 20]`,
      `[23, 30, 34, 50]`
  ]
  前一行的所有数都比下一行小，所以可以展开成为一行数
  Integers in each row are sorted from left to right.
  The first integer of each row is greater than the last integer of the previous row.
  ```java
    public class Solution {
      /*
       * @param matrix: matrix, a list of lists of integers
       * @param target: An integer
       * @return: a boolean, indicate whether matrix contains target
       */
      public boolean searchMatrix(int[][] matrix, int target) {
          // write your code here
          if(matrix.length == 0 || matrix[0].length == 0){
              return false;
          }
          int row = matrix.length;
          int col = matrix[0].length;
          int start = 0;
          int end = row * col - 1;
          int mid = 0;
          while(start + 1 < end){
              mid = start + (end - start) / 2;
              if(matrix[mid / col][mid % col] < target){
                  start = mid;
              } else {
                  end = mid;
              }
          }
          if(matrix[start / col][start % col] == target ||
             matrix[end / col][end % col] == target){
              return true;
          }
          return false;
      }
  }
  ```
  # Search 2D Matrix II
  [
    `[1, 3, 5, 7]`,
    `[2, 4, 7, 8]`,
    `[3, 5, 9, 10]`
  ]
  Integers in each row are sorted from left to right.
  Integers in each column are sorted from up to bottom.
  No duplicate integers in each row or column.
  ```java
  public class Solution {
      /*
       * @param matrix: A list of lists of integers
       * @param target: An integer you want to search in matrix
       * @return: An integer indicate the total occurrence of target in the given matrix
       */
      public int searchMatrix(int[][] matrix, int target) {
          // write your code here
          if(matrix.length == 0 || matrix[0].length == 0){
              return 0;
          }
          int row = matrix.length - 1;
          int col = 0;
          int count = 0;
          while(row >= 0 && col < matrix[0].length){
              if(matrix[row][col] < target){
                  col++;
              } else if (matrix[row][col] > target){
                  row--;
              } else {
                  count++;
                  col++;
                  row--;
              }
          }
          return count;
      }
  }
  ```
'''
tags: [
  "Binary_Search"
]
isStarred: false
isTrashed: false
createdAt: "2017-09-07T18:39:34.543Z"
updatedAt: "2018-01-02T02:58:38.465Z"
